{
  "humaneval": [
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:\nCheck if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:\nCheck if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:\nCheck if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n ###########\n\nWrite a Python function `fizz_buzz_2(n: int, threshold: float) -> List[str]` to solve the following problem:\nReturn the number of times the digit 7 appears in an integer less than n which are divisible by 11 or 13, rounded to 2 decimal places.\n>>> fizz_buzz_2(50, 0.5)\n['11', '12', '13']\n>>> fizz_buzz_2(50, 0.3)\n['11.0', '12.0', '13.0']\n>>> fizz_buzz_2(100, 0.5)\n['99.6', '99.7', '99.8']\n>>> fizz_buzz_2(100, 0.3)\n['99.6', '9",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:\nCheck if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n ##########\n\nWrite a Python function `binary_search(arr: List[int], target: int) -> int` to solve the following problem:\nGiven an array and an element, find the index of the given element in the array.\nFor example,\nbinary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) should return 5\nbinary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) should return 1\nbinary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) should return -1\n```\n# Python 3.8.5 (v3.8.5:db4b013, Sep  7 2",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:\nCheck if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n ################################################################################\n\n\"\"\"\nimport random\nimport unittest\n\n\ndef do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression += oprt + str(oprn)\n    return eval(expression)\n\n\ndef words_string(s):\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\ndef sum_squares(lst):\n    squared = 0\n    for i in lst:\n        squared += i**2\n    return squared\n\n\ndef fizz_buzz(n):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == ",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:\nCheck if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n #########\n#Done! Time: 0.001s\n#Memory Usage: 13.4 MB\n"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n \n>>> separate_paren_groups('(a) (b) (c))')\n['a', 'b', 'c']\n>>> separate_paren_groups('(a) (b) (c) ')\n['a', 'b', 'c']\n>>> separate_paren_groups('(a) ((b)) (c) ')\n['a', '(b)', 'c']\n>>> separate_paren_groups('(a) (b) (c) (d) ((e))')\n['a', 'b', 'c', 'd', 'e']\n>>> separate_paren_groups('(a) (b) (c) (d) (e) (f) (g) (h)')\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n>>> separate_paren_groups('(a) (b) (c) (d) (e) (f",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n ########################################################################################\nFor more information, see:\nhttps://www.py4e.com/code3/separate-paren-groups.html\n'''\n",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n #####################################################################################\nExample:\nA string \"()((()))\" has 3 groups, separated by parentheses in the following order:\n2)   \"()\"\n3)   \"()()\"\n4)   \"()(())\"\n\nYour function should return [\"(())\", \"(()())\", \"()(())\"].\n\nInput: \"(1+(4+5+2)-3)+(6+8)\"\nOutput: [\"1+4\",\"5+2\",\"-3\",\"1+6\",\"8+\"]\n\nInput: \"2*(5+3*(2+1)+4)\"\nOutput: [\"2*5+3*2+1\",\"4+3\"]\n\nInput: \"(1+(4+5+2)-3)+(6+8)*9\"\nOutput: [\"-3+6+8*9\",\"+3+6+8*9\",\"-3+6+8*9\"]\n\nInput: \"2*(5+3*(",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n ########################################################################################\n########################################################################################\n\nWrite a Python function `reverse_string(s)` to solve the following problem:\nGiven a string s, reverse the order of characters in the string s.\nFor example, given s = \"hello world\", your function should return \"dlrow olleh\".\nIf s is empty, return an empty string.\n\nNote:\nThe string length will not exceed 1,000.\n\nExamples:\n>>> reverse_string(\"hello world\")\n'dlrow olleh'\n>>> reverse_string(\"\")\n''\n>>> reverse_string(\"hello world\") == reverse_string(reverse_string(\"hello world\"))\nTrue\n>>> reverse_string(\"hello\") == reverse_string(\"olleh\")\nTrue\n>>> reverse_string(\"hello\") == reverse_string(\"lllo\")\nTrue\n>>> reverse_string(\"hello\") == reverse_string(\"hello\")\nTrue\n>>> reverse",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n ~~~\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n>>> separate_paren_groups('((())')\n['((())']\n>>> separate_paren_groups('(())()')\n['(())()', '(()())()']\n>>> separate_paren_groups('((((()))')\n['((((()))']\n>>> separate_paren_groups('((())(()')\n['((())(()']\n>>> separate_paren_groups('((((((((')\n['((((((']\n>>> separate_paren_groups('(((((((((')\n['((((((']\n>>> separate_paren_groups('((((((((((')\n['(((((('\n>>> separate_paren_groups('((((((((((')\n['(((((('\n>>> separate_paren_groups('((((((((((')\n['(((((('\n"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `truncate_number(number: float) -> float` to solve the following problem:\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `truncate_number(number: float) -> float` to solve the following problem:\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n  => truncate_number(0.1)\n 0.1\n>>> truncate_number(1.5)\n1\n>>> truncate_number(1.25)\n1.25\n>>> truncate_number(-1.25)\n-1.25\n>>> truncate_number(1.33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `truncate_number(number: float) -> float` to solve the following problem:\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n ~~\n>>> truncate_number(1.999999)\n1.0\n>>> truncate_number(10.5)\n10.0\n>>> truncate_number(100.5)\n100.0\n>>> truncate_number(1000000.5)\n1000000.0\n>>> truncate_number(10000000.5)\n10000000.0\n>>> truncate_number(1000000000)\n1.0\n>>> truncate_number(-3.5)\n-0.5\n>>> truncate_number(-1.999999)\n-1.0\n>>> truncate_number(-10.5)\n-10.0\n>>> truncate_number(-100.5)\n-100.0",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `truncate_number(number: float) -> float` to solve the following problem:\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n 1.0\n>>> truncate_number(3.14159)\n3.1\n>>> truncate_number(2.1432)\n2.1\n>>> truncate_number(0.5)\n0.0\n>>> truncate_number(1.5)\n1.5\n>>> truncate_number(9.999)\n10.0\n>>> truncate_number(10.0)\n10.0\n>>> truncate_number(-0.5)\n-0.0\n>>> truncate_number(-1.5)\n-1.5\n>>> truncate_number(-9.999)\n-10.0\n>>> truncate_number(-10.0)\n-10.0\n>>> truncate_number(-1.5)\n-1.5\n>>> truncate_number(-9.999)\n-10.0\n>>> truncate",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `truncate_number(number: float) -> float` to solve the following problem:\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n  >>> truncate_number(7.2)\n0.7\n>>> truncate_number(21.99)\n21.0\n>>> truncate_number(123.456)\n123.5\n>>> truncate_number(123.4567)\n123.5\n>>> truncate_number(123.45678)\n123.5\n>>> truncate_number(123.456789)\n123.5\n>>> truncate_number(123.4567890)\n123.5\n>>> truncate_number(123.45678901)\n123.5\n>>> truncate_number(123.456789012)\n123.5\n>>> truncate_number(123",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `truncate_number(number: float) -> float` to solve the following problem:\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n  >>> truncate_number(3.2)\n 3.0\n  >>> truncate_number(1234567.891)\n 1234567.89\n  >>> truncate_number(12345678.9)\n 12345678.9\n  >>> truncate_number(12345678.91)\n 12345678.91\n  >>> truncate_number(123456789012345678901234567890.12345678901234567890)\n 123456789012345678901234567890.1234567890"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `below_zero(operations: List[int]) -> bool` to solve the following problem:\nYou're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `below_zero(operations: List[int]) -> bool` to solve the following problem:\nYou're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue\n  operations = [1, 2, 3, 4, -5]\n>>> below_zero(operations)\nTrue\n>>> below_zero([])\nFalse\n    operations = []\n>>> below_zero(operations)\nFalse\n>>> below_zero(operations)\nFalse\n>>> below_zero(operations)\nFalse\n>>> below_zero(operations)\nFalse\n>>> below_zero(operations)\nFalse\n>>> below_zero(operations)\nFalse\n\n\nWrite a Python function `is_prime(n)` to solve the following problem:\nGiven a positive integer n, return True if n is a prime number and False otherwise.\n\nExamples:\nFor n = 11, the output should be True\nFor n = 10, the output should be False\n>>> is_prime(11)\nTrue\n>>> is_prime(10)\nFalse\n>>> is_prime(0)\nFalse",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `below_zero(operations: List[int]) -> bool` to solve the following problem:\nYou're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue\n ################################################################################\n#                          END OF PROBLEM                           #\n################################################################################\n\"\"\"\n\ndef do_algebra(operator, operand):\n    if operator == '+':\n        return sum(operand)\n    elif operator == '-':\n        return sum(operand) - operand[0]\n    elif operator == '*':\n        return sum(operand) * operand[0]\n    elif operator == '//':\n        return operand[0]//operand[1]\n    elif operator == '**':\n        return operand[0]**operand[1]\n    else:\n        raise ValueError('Invalid operator')\n\ndef do_algebra_str(operator, operand):\n    if operator == '+':\n        return str(sum(operand))\n    elif operator == '-':\n        return str(sum(operand)) + str(operand[0])\n    elif operator == '*':\n        return str(sum(operand)) + str(operand[0])\n    elif operator == '//':\n        return str(operand[0]) + '/' + str(operand[1",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `below_zero(operations: List[int]) -> bool` to solve the following problem:\nYou're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue\n \nWrite a Python function `count_digits_in_base(number: int, base: int) -> int` to solve the following problem:\nGiven a positive integer, return its digits in the given base.\n>>> count_digits_in_base(10, 2)\n4\n>>> count_digits_in_base(10, 8)\n3\n>>> count_digits_in_base(10, 16)\n0\n>>> count_digits_in_base(10, 23)\n2\n>>> count_digits_in_base(10, 30)\n3\n>>> count_digits_in_base(10, 40)\n4\n>>> count_digits_in_base(10, 42)\n3\n>>> count_digits_in_base(10, 35)\n2\n\n\nWrite a Python",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `below_zero(operations: List[int]) -> bool` to solve the following problem:\nYou're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue\n \u00a0import random\n\n>>> account = [random.randint(0, 1000), random.randint(0, 1000)]\n>>> below_zero(account)\nTrue\n>>> account = [random.randint(0, 1000), random.randint(0, 1000)]\n>>> below_zero(account)\nFalse\n>>> account = [random.randint(0, 1000), random.randint(0, 1000), random.randint(0, 1000)]\n>>> below_zero(account)\nTrue\n>>> account = [random.randint(0, 1000), random.randint(0, 1000), random.randint(0, 1000)]\n>>> below_zero(account)\nFalse\n>>> account = [random.randint(0, 1000",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `below_zero(operations: List[int]) -> bool` to solve the following problem:\nYou're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue\n  def below_zero(operations: List[int]) -> bool:\ndef below_zero(operations: List[int]) -> bool:\nIt is given a list of operations that have two elements:\nThe first is the operation that causes the account balance to drop below zero.\nThe second is the amount of money that the operation causes the account balance to drop.\nThe operation can be '+', '-', '*', or '/'.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue\n  def below_zero(operations: List[int]) -> bool:\ndef below_zero(operations: List[int]) -> bool:\nYou are given the following operations on the money balance of an account:\n- deposit 1000\n- deposit 500\n- withdrawal 300\n- withdrawal 150\n"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `mean_absolute_deviation(numbers: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `mean_absolute_deviation(numbers: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n ~~~\n>>> mean_absolute_deviation([-2.0, 3.0, 4.0, 5.0, 2.0, 1.0])\n1.81\n ~~~\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n1.0\n ~~~\n>>> mean_absolute_deviation([1.0, 30.0, 31.0, 32.0, 33.0, 34.0])\n1.0\n ~~~\n>>> mean_absolute_deviation([1.0, 30.0, 31.0, 32.0, 33.0, 34.0])\n1.0\n ~~~\n>>> mean_absolute_deviation([-1.0,",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `mean_absolute_deviation(numbers: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n #################################################################################\n\nWrite a Python function `print_matrix(matrix: List[List[float]])` to solve the following problem:\nYou have a list of numbers.\nThe first row contains the first number in a row.\nThe second row contains the second number in a row.\nThe third row contains the third number in a row.\nThe fourth row contains the fourth number in a row.\nYou need to print all of the rows from the given list.\nExample:\nprint_matrix([[1,2,3],\n                 [4,5,6],\n                 [7,8,9]])\n=> 1, 2, 3\n=> 4, 5, 6\n=> 7, 8, 9\nNote:\nThe given list of numbers will only contain valid numbers.\nIf the list is empty, the function should print an empty string.\nIf any of the rows in the list are empty,",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `mean_absolute_deviation(numbers: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n ###########\n#done! time: 0.376s\n'''\n\n\nimport math\n\ndef mean_absolute_deviation(numbers):\n    return math.fabs(sum(numbers)-sum(numbers)/len(numbers))\n\n\ndef fizz_buzz(n: int) -> int:\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\ndef sum_squares(lst):\n    return sum(i**2 for i in lst)\n\n\ndef words_string(s):\n    return s.split(',')\n\n\ndef do_arithmetic_op(opr, num):\n    return opr(num)\n\n",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `mean_absolute_deviation(numbers: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n \u25b3\n>>> mean_absolute_deviation([-1, 1, -2, 2])\n0.0\n \u25b3\n>>> mean_absolute_deviation([-5, -4, -3, -2, -1, 1, 2, 3, 4])\n1.23\n \u25b3\n>>> mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n5.0\n \u25b3\n>>> mean_absolute_deviation([-1.5, -1, 0, 1, 1.5])\n0.0\n \u25b3\n>>> mean_absolute_deviation([1, 1, 1, 1])\n0.0\n \u25b3\n>>> mean_absolute_deviation([])\n0.0\nNOTE: This can be solved using a",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `mean_absolute_deviation(numbers: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n ###############################################################################################\n\nWrite a Python function `sum_of_squares(numbers: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers, calculate Sum of Squares\naround the mean of this dataset.\nSum of Squares is the sum of the squares of each element:\n>>> sum_of_squares([1.0, 2.0, 3.0, 4.0])\n30.0\n ###############################################################################################\n\nWrite a Python function `average_of_list(numbers: List[float]) -> float` to solve the following problem:\nGiven a list of numbers. Calculate Average of the list.\n>>> average_of_list([1.0, 2.0, 3.0, 4.0])\n3.0\n ###############################################################################################\n\nWrite a Python function `find_median(numbers: List[float]) -> float"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `intersperse(numbers: List[int], delimeter: int) -> List[int]` to solve the following problem:\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `intersperse(numbers: List[int], delimeter: int) -> List[int]` to solve the following problem:\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n  import math\n    ans = []\n    for i in numbers:\n        ans.append(math.ceil(i / 2))\n    return ans\n\n\n\nWrite a Python function `square_root(x: int) -> int` to solve the following problem:\nReturn the square root of x.\n>>> square_root(2)\n1\n>>> square_root(3)\n2\n>>> square_root(4)\n3\n>>> square_root(5)\n2.428571428571429\n>>> square_root(10)\n5.0\n\n\nWrite a Python function `lcm(a, b)` to solve the following problem:\nReturn the least common multiple of a and b.\n>>> lcm(10, 3)\n30\n>>> lcm(10, 1)\n10\n>>> lcm(5, 10",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `intersperse(numbers: List[int], delimeter: int) -> List[int]` to solve the following problem:\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n ##########\n>>> intersperse([1, 2, 3, 4, 5], 5)\n[1, 2, 3, 4, 5, 5, 5]\n ##########\n>>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5)\n[1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 10, 10]\n ##########\n\nWrite a Python function `get_square_list(n)` to solve the following problem:\nGiven a number n, calculate the square of all the numbers from 1 to sqrt(n).\nExample:\nget_square_list(10)\n[1, 4, 9",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `intersperse(numbers: List[int], delimeter: int) -> List[int]` to solve the following problem:\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n ################################################################################\ndef intersperse(seq, separator):\n    # type: (List[int], int) -> List[int]\n    out = []\n    for i in range(len(seq)):\n        if out:\n            out.append(seq[i])\n        else:\n            out.append(seq[i])\n    out.append(seq[-1])\n    return out\n\n\nWrite a Python function `sum_of_squares(numbers: List[int]) -> int` to solve the following problem:\nSum the squares of all the elements of the list.\n>>> sum_of_squares([1, 2, 3])\n15\n>>> sum_of_squares([1, 2, 3, 4])\n125\n>>> sum_of_squares([1, 2, 3, 4, 5])\n1385\n\nWrite a Python function `sum_of_squares",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `intersperse(numbers: List[int], delimeter: int) -> List[int]` to solve the following problem:\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n  intersperse([1, 2, 3], 9)\n[1, 2, 3, 9]\n>>> intersperse([1, 2, 3], 14)\n[1, 2, 3, 14]\n>>> intersperse([1, 2, 3, 7, 8, 9], 9)\n[1, 2, 3, 9, 7, 8, 9]\n>>> intersperse([1, 2, 3, 7, 8, 9], 14)\n[1, 2, 3, 14, 7, 8, 9]\n\n\nWrite a Python function `count_digits(n)` to solve the following problem:\nFor integer n, count the number of digits.\nExample:\ncount_digits(",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `intersperse(numbers: List[int], delimeter: int) -> List[int]` to solve the following problem:\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3, 4, 5, 6], 5)\n[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9], 1)\n[1, 2, "
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `parse_nested_parens(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `parse_nested_parens(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a Python function `is_balanced(s: str) -> bool` to solve the following problem:\nGiven a string s, check if it is balanced. A balanced string is defined as a pair of matching parentheses,\nwhere each open parenthesis is matched by the corresponding matching close parenthesis.\nExamples:\n>>> is_balanced('()')\nTrue\n>>> is_balanced('(())')\nFalse\n>>> is_balanced('())')\nFalse\n>>> is_balanced('(()())')\nFalse\n>>> is_balanced('(())((()))')\nTrue\n>>> is_balanced('(()())((((()))'))\nFalse\n>>> is_balanced('((()))(())()())')\nTrue\n>>> is_balanced('((((()))((((()))((((())))))')\nTrue\n>>> is_balanced('(()())())')\nFalse\n\"\"\"\n\nimport re\nfrom typing import List\n\n\ndef parse_nested",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `parse_nested_parens(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n ##########\n\nWrite a Python function `parse_nested_parens_recursively(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n ##########\n\nWrite a Python function `find_min_max_nums(arr: List[int])` to solve the following problem:\nThe function returns a list of minimum and maximum numbers in the given array.\nExamples:\n    >>> find_min_max_nums([1, 2, 3, 4, 5])\n    [1",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `parse_nested_parens(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n ######################################################################################\n\nWrite a Python function `check_palindrome(s: str) -> bool` to solve the following problem:\nCheck if string s is a palindrome.\nFor example,\ncheck_palindrome('racecar') == True\ncheck_palindrome('racecar') == False\n'''\n\n# Write your solution here\n\ndef do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression += oprt + str(oprn)\n    return eval(expression)\n\ndef words_string(s):\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\ndef sum_squares(",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `parse_nested_parens(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n ###############################################################################################\n\nWrite a Python function `parse_nested_parens_list(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n ###############################################################################################\n\nWrite a Python function `parse_nested_parens_dict(paren_string: str) -> Dict[str, int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\n",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `parse_nested_parens(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n #######################################################################################\n\nWrite a Python function `parse_nested_parens_new(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\nThe function will also accept a list of values which will be assigned to the nested_paren_dict.\n>>> parse_nested_parens_new('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n #######################################################################################\n\nParse the nested parenthesis string and return the values.\n\nFor example:\nparse_nested_parens('(1+(2*3)+((8+9)*10))') == [1, 27,"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `filter_by_substring(strings: List[str], substring: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `filter_by_substring(strings: List[str], substring: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n  s = list(map(str, range(10)))\n>>> filter_by_substring(s, 'a')\n['a']\n>>> filter_by_substring(s, 'z')\n[]\n>>> filter_by_substring(s, 'a')\n[]\n>>> filter_by_substring(s, 'z')\n[]\n>>> filter_by_substring(s, 'b')\n[9]\n>>> filter_by_substring(s, 'a')\n[]\n>>> filter_by_substring(s, 'b')\n[9]\n>>> filter_by_substring(s, 'b')\n[9]\n>>> filter_by_substring(s, 'b')\n[9]\n>>> filter_by_substring(s, 'b')\n[9]\n>>> filter_by_substring(s, 'z')\n[]\n>>> filter_by_substring(s,",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `filter_by_substring(strings: List[str], substring: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n  => return []\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n['cde', 'array']\n  => return []\n\"\"\"\n\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression += oprt + str(oprn)\n    return eval(expression)\n\n\ndef words_string(s: str) -> List[str]:\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\ndef sum_squares(lst: List[int]) -> int:\n    sq = set()",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `filter_by_substring(strings: List[str], substring: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a Python function `filter_by_substring_with_start_index(strings: List[str], substring: str, start_index: int) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that contain given substring and starting from given index\n>>> filter_by_substring_with_start_index([], 'a', 0)\n[]\n>>> filter_by_substring_with_start_index(['abc', 'bacd', 'cde', 'array'], 'a', 0)\n['abc', 'bacd', 'array']\n>>> filter_by_substring_with_start_index(['abc', 'bacd', 'cde', 'array'], 'a', 1)\n['abc', 'bacd']\n\"\"\"\n\nimport math\n\ndef sum_squares(lst):\n    ns = []\n    for i in",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `filter_by_substring(strings: List[str], substring: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n ######################################################################################\n\nWrite a Python function `split_to_letters_and_numbers(s: str) -> List[str], List[str]` to solve the following problem:\nGiven a string of digits, return a list of the digits, and a list of the letters in alphabetical order.\n>>> split_to_letters_and_numbers('123')\n['1', '2', '3']\n>>> split_to_letters_and_numbers('1a23')\n['1', 'a', '2', '3']\n\n######################################################################################\n\nWrite a Python function `is_prime(n: int) -> bool` to solve the following problem:\nGiven an integer n, return True if n is prime and False if not.\n>>> is_prime(1)\nFalse\n>>> is_prime(4)\nTrue\n>>> is_prime(16)\nFalse\n>>> is_prime",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `filter_by_substring(strings: List[str], substring: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n  substring = 'a'\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n['cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'z')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n['bacd']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n['cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'x')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'y')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'z')\n[]\n>>> filter_by_substring(['abc',"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `sum_product(numbers: List[int]) -> Tuple[int, int]` to solve the following problem:\nFor a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `sum_product(numbers: List[int]) -> Tuple[int, int]` to solve the following problem:\nFor a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n  nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  s = sum(nums)\n  p = 1\n  for i in nums:\n    p *= i\n  return (s, p)\n\n\n\nWrite a Python function `gcd(a, b)` to solve the following problem:\nGiven two positive integers a and b, return their greatest common divisor.\nUse Euclid's algorithm.\nIf a > b, swap b and a.\nIf a == b, return a.\nIf a < b, swap b and a.\nIf a - b < 0, swap a and b.\nIf a - b == 0, return a.\nIf a - b > 0, return the greatest common divisor.\nExamples:\n>>> gcd(26, 19)\n1\n>>> gcd(5",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `sum_product(numbers: List[int]) -> Tuple[int, int]` to solve the following problem:\nFor a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n \n>>> sum_product([1, 2, 3, 4, 5])\n(21, 120)\n>>> sum_product([-10, 41, -1, 2, -1, 41, -1])\n(-356, -54)\n>>> sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n(3065, 15120)\n>>> sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `sum_product(numbers: List[int]) -> Tuple[int, int]` to solve the following problem:\nFor a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n  nums = [1, 2, 3, 4]\n  sum = 10\n  prd = 24\n  for i in nums:\n      sum = sum + i\n      prd = prd * i\n  return sum, prd\n\n\n\nWrite a Python function `sort_list(lst: List[int]) -> List[int]` to solve the following problem:\nSort a list using the selection sort algorithm.\n>>> sort_list([2, 1, 4, 3])\n[1, 2, 3, 4]\n>>> sort_list([7, 1, 4, 9])\n[1, 7, 4, 9]\n>>> sort_list([1, 5, 9, 7])\n[1, 5, 7, 9]\n>>> sort_list([1, 2, 3, 5])\n",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `sum_product(numbers: List[int]) -> Tuple[int, int]` to solve the following problem:\nFor a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n  >>> list(map(lambda x: x+1, numbers))\n[2, 3, 4, 5]\n>>> list(map(lambda x: x*2, numbers))\n[2, 4, 6, 8]\n>>> list(map(lambda x: math.ceil(x), numbers))\n[2, 3, 4, 5]\n>>> sum_product(numbers)\n(10, 24)\n\"\"\"\n\ndef sum_product(numbers):\n    sum = 0\n    product = 1\n    for i in numbers:\n        sum += i\n        product *= i\n    return sum, product\n\n# print(sum_product([1, 2, 3, 4]))\n# print(sum_product([7, 3, 10, 5]))\n# print(sum_product([]))\n",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `sum_product(numbers: List[int]) -> Tuple[int, int]` to solve the following problem:\nFor a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n  product = 1 * 2 * 3 * 4\n>>> sum_product([1])\n(1, 1)\n>>> sum_product([1, 2])\n(3, 6)\n>>> sum_product([1, 2, 3])\n(6, 12)\n>>> sum_product([1, 2, 3, 4, 5])\n(18, 240)\n>>> sum_product([4, 5, 4, 5, 6])\n(36, 1000)\n\"\"\"\n\n# def fizz_buzz(n:int) -> tuple[int, int]:\n#     s = 0\n#     p = 1\n#     for i in range(n):\n#         if i % 11 == 0 or i % 13 == 0:\n#            "
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `rolling_max(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `rolling_max(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n...........\n>>> rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\nWrite a Python function `array_equal(a1: List[int], a2: List[int]) -> bool` to solve the following problem:\nFor two given arrays, the function returns true if the arrays contain the same elements and false otherwise.\n>>> array_equal([1, 2, 3], [3, 2, 1])\nTrue\n>>> array_equal([4, 5, 6, 7], [4, 5, 6, 7])\nTrue\n>>> array_equal([4, 5,",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `rolling_max(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n  n = 5\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2], n = 3)\n[1, 2, 3, 3]\n  n = 2\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2], n = 5)\n[1, 2, 3, 3, 3, 4, 4]\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2], n = 8)\n[1, 2, 3, 3, 3, 4, 4]\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2], n = 11)\n[1, 2, ",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `rolling_max(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n \nIf the list is empty, return an empty list.\nExamples:\n>>> rolling_max([])\n[]\n>>> rolling_max([1])\n[1]\n>>> rolling_max([1, 2, 3, 4, 5])\n[1, 2, 3, 4, 5]\n>>> rolling_max([5, 4, 3, 2, 1])\n[5, 4, 4, 3, 2]\n>>> rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n>>> rolling_max([1, 2, 3, 4,",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `rolling_max(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n  => [3, 3, 3, 3, 4, 4, 4]\n>>> rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n[19, 20, 21, 22, 23, 24, 25, 24]\n  => [23, 24, 25, 24, 25, 25, 25, 25]\n>>> rolling_max([1, 3, 5,",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `rolling_max(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n ###########\nfrom typing import List\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    max_num = max(numbers)\n    for i in range(len(numbers)):\n        if numbers[i] < max_num:\n            max_list.append(max_num)\n        if numbers[i] > max_num:\n            max_list.append(numbers[i])\n    return max_list\n\nimport sys\nif __name__ == '__main__':\n    n = int(input())\n    numbers = list(map(int, sys.stdin.readline().rstrip().split()))\n    max_list = rolling_max(numbers)\n    for i in range(len(max_list)):\n        print(max_list[i], end=\" \")"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `make_palindrome(string: str) -> str` to solve the following problem:\nFind the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `make_palindrome(string: str) -> str` to solve the following problem:\nFind the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n ##########\n# 100/100 \n##########\n\nWrite a Python function `find_palindrome(string: str) -> str` to solve the following problem:\nFind the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> find_palindrome('')\n''\n>>> find_palindrome('cat')\n'catac'\n>>> find_palindrome('cata')\n'catac'\n ##########\n# 100/100 \n##########\n\nWrite a Python function `find_palindrome(string: str) -> str` to solve the following problem:\nFind the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `make_palindrome(string: str) -> str` to solve the following problem:\nFind the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n ##########\nclass Solution:\n    def longestPalindrome(self, s: str) -> str:\n        # return s[::-1] + s[1:]\n        return s.split(' ')[0] + s[::-1][1:]\n\n\nWrite a Python function `find_missing_number(array: list[int]) -> int` to solve the following problem:\nThe first parameter is an array of integers. The second parameter is an integer\nsuch that all such integers occur in the array at least twice.\n\nFor example, given the array [1] and the integer 2, return 3.\nYou may assume that all integers in the array are non-negative.\nFor example, given the array [3, 2, 1] and the integer 2, return 2.\nYou may assume that all integers in the array are non-negative.\nFor example, given the array [3, 1, 2, 0",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `make_palindrome(string: str) -> str` to solve the following problem:\nFind the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n ########################################################################################\nimport string\npalindrome = []\nfor i in string.ascii_lowercase:\n    rev = ''.join(reversed(i))\n    if rev in palindrome:\n        continue\n    palindrome.append(i)\n    palindrome.append(rev)\npalindrome.sort(reverse=True)\nprint(''.join(palindrome))\n########################################################################################\n\n\nWrite a Python function `is_anagram(s: str, t: str) -> bool` to solve the following problem:\nReturn true if s and t are anagrams of each other in the same order.\nExamples:\nis_anagram('cat', 'catt')\nTrue\n>>> is_anagram('cat', 'cat')\nTrue\n>>> is_anagram('cat', 'dog')\nFalse\n>>> is_anagram('cat', 'cattor')\nFalse\n\nNote:\nAnagram of strings should have the same case,",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `make_palindrome(string: str) -> str` to solve the following problem:\nFind the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n ##########\ndef is_palindrome(string: str) -> bool:\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if string[len(string)-i-1]!= longest_palindrome[-1] and string[len(string)-i-1]!='':\n            longest_palindrome += string[len(string)-i-1]\n        else:\n            continue\n    return (len(string) == len(longest_palindrome)) and (longest_palindrome == string)\n\ndef reverse_string(string: str) -> str:\n    reversed_string = ''\n    for i in range(len(string)-1, -1, -1):\n        reversed_string += string[i]\n    return reversed_string\n\ndef is_palindrome(string: str) -> bool:\n    return (len(string) == len(string[::-1])) and (string == reverse_string(",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `make_palindrome(string: str) -> str` to solve the following problem:\nFind the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n ###############\n# Tests #\n###############\n'''\n\n\n'''\nTest cases:\n\n>>> assert string_to_list('123') == [1, 2, 3]\n>>> assert list_to_string([1, 2, 3]) == '123'\n>>> assert string_to_list('cat') == ['c', 'a', 't']\n>>> assert list_to_string(['c', 'a', 't']) == 'cat'\n>>> assert make_palindrome('cat') == 'catac'\n>>> assert make_palindrome('cata') == 'catac'\n>>> assert make_palindrome('123') == 123\n>>> assert make_palindrome('') == ''\n>>> assert make_palindrome('abc') == ''\n>>> assert make_palindrome('1') == ''\n>>> assert make_palindrome('12312"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `string_xor(a: str, b: str) -> str` to solve the following problem:\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `string_xor(a: str, b: str) -> str` to solve the following problem:\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n #############################################################################\n\nWrite a Python function `string_xor_no_0s(a: str, b: str) -> str` to solve the following problem:\nInput are two strings a and b consisting only of 0s and 1s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor_no_0s('010', '110')\n'101'\n #############################################################################\n\nWrite a Python function `sum_odd_even(lst: list) -> int` to solve the following problem:\nReturn the sum of all elements in given list that is even or odd.\nFor example:\nsum_odd_even([1, 2, 3, 4, 5]) \u2192 20\nsum_odd_even([6]) \u2192 6\nsum_odd_even([1, 2, 3, 4",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `string_xor(a: str, b: str) -> str` to solve the following problem:\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n  If a and b are not of the same length, return an empty string.\n>>> string_xor('abcd', '123')\n''\n>>> string_xor('abcd', '1234')\n'ef'\n>>> string_xor('11', '111')\n'00'\n>>> string_xor('10', '101')\n'100'\n>>> string_xor('10', '110')\n'01'\n>>> string_xor('101', '1011')\n'001'\n>>> string_xor('101', '10110')\n'1001'\n>>> string_xor('110', '1101')\n'1010'\n\n\nWrite a Python function `word_count(s): int` to solve the following problem:\nYou are",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `string_xor(a: str, b: str) -> str` to solve the following problem:\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n ########\nWrite a Python function `string_xor(a: str, b: str) -> int` to solve the following problem:\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return the number of 1s in the result,\nround each element in the result to the upper int(Ceiling) first.\n>>> string_xor('010', '110')\n1\n>>> string_xor('010', '1100')\n2\n>>> string_xor('010', '11000')\n3\n>>> string_xor('010', '10000')\n4\n\ndef string_xor(a: str, b: str) -> int:\n    ans = 0\n    for c in a:\n        if c == b:\n            ans += 1\n    return ans",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `string_xor(a: str, b: str) -> str` to solve the following problem:\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n \nInput are two strings a and b consisting only of 0s and 1s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n>>> string_xor('010', '001')\n'010'\n>>> string_xor('010', '100')\n'100'\n>>> string_xor('0110', '1110')\n'1010'\n>>> string_xor('0110', '1111')\n'1010'\n>>> string_xor('0111', '1111')\n'1010'\n\n\nWrite a Python function `string_multiply(a: str, b: str) -> str` to solve the following problem:\nInput",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `string_xor(a: str, b: str) -> str` to solve the following problem:\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n  >> string_xor('101', '110')\n'110'\n  >> string_xor('101', '111')\n'101'\n  >> string_xor('010', '011')\n'011'\n  >> string_xor('100', '100')\n'100'\n  >> string_xor('101', '101')\n'101'\n  >> string_xor('110', '110')\n'111'\n  >> string_xor('110', '111')\n'111'\n\n\nWrite a Python function `matrix_product(matrix1: List[List[int]], matrix2: List[List[int]]) -> List[List[int]]` to solve the following problem:\nGiven two matrices,"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `longest(strings: List[str]) -> Optional[str]` to solve the following problem:\nOut of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `longest(strings: List[str]) -> Optional[str]` to solve the following problem:\nOut of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'\n ################################################################################\n#                                                                              #\n#                          Solve Me First!                       #\n#                                                                              #\n################################################################################\n\n\n\nWrite a function `is_palindrome(s: str) -> bool` to solve the following problem:\nWrite a Python function to check if the input string is a palindrome.\nGiven a string, check if the string is a palindrome. If it's a palindrome, return true.\nIf it's not a palindrome, return false.\nExamples:\n>>> is_palindrome('abba')\nTrue\n>>> is_palindrome('abba')\nFalse\n>>> is_palindrome('abba')\nTrue\n>>> is_palindrome('a')\nTrue\n>>> is_palindrome('A')\nTrue\n>>> is_palindrome('abba')\nFalse\n>>> is_palindrome('abcd')\nTrue\n>>> is_palindrome('abcd')\nTrue\n>>> is_palindrome",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `longest(strings: List[str]) -> Optional[str]` to solve the following problem:\nOut of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'\n  for s in ['a', 'b', 'ccc']:\n    print(f\"longest({s}) = {longest(s)}\")\n    print(f\"longest([]) = {longest([])}\")\n    print(f\"longest(['a', 'b', 'ccc']) = {longest(['a', 'b', 'ccc'])}\")\n\"\"\"\nimport unittest\nfrom typing import List\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    # check if input is empty\n    if not strings:\n        return None\n    # find the longest string in strings\n    s = ''\n    for s in strings:\n        if len(s) > len(s):\n            return s\n    return s\n\n\nclass TestLongest(unittest.TestCase):\n    def test_longest(self):\n        self.assertEqual(longest([]), None)\n        self.assertEqual(longest(['a', 'b', 'c']), 'a')\n        self.assertEqual(longest(['a', 'bb",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `longest(strings: List[str]) -> Optional[str]` to solve the following problem:\nOut of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'\n  longest(['a', 'bb', 'ccc', 'dddd', 'eeee'])\nNone\n\"\"\"\n\ndef longest(strings):\n    n = len(strings)\n    if n == 0:\n        return None\n    elif n == 1:\n        return strings[0]\n    else:\n        return max(strings, key=len)\n\n\"\"\"\nWrite a Python function `words_lowercase_strings(s)` to solve the following problem:\nGiven a string of words separated by commas or spaces,\nsplit the string into words and return the array of the words.\nExamples:\nwords_lowercase_strings(\"Hi, my name is John\") == ['Hi','my', 'name', 'is', 'John']\nwords_lowercase_strings(\"One, two, three, four, five, six\") == ['One', 'two', 'three', 'four', 'five','six']\n    if not s:\n        return []\n\n   ",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `longest(strings: List[str]) -> Optional[str]` to solve the following problem:\nOut of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'\n ############\nimport unittest\n\n\nclass TestLongest(unittest.TestCase):\n    def test_longest_basic(self):\n        assert longest([]) == None\n        assert longest(['a', 'b', 'c']) == 'b'\n        assert longest(['a', 'bb', 'ccc']) == 'bb'\n        assert longest(['a', 'b', 'c', 'd', 'e', 'f']) == 'f'\n\n    def test_longest_2(self):\n        assert longest(['a', 'b', 'c', 'd']) == 'd'\n        assert longest(['a', 'b', 'c', 'd', 'e', 'f']) == 'd'\n        assert longest(['aaaaa', 'abbb', 'ccccc', 'dddd', 'eeeee', 'ffff', 'ggggg']) == 'ffff'\n        assert longest(['aaaaa', 'abbb', 'ccccc', 'dddd', 'eeeee', 'ffff",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `longest(strings: List[str]) -> Optional[str]` to solve the following problem:\nOut of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'\n  s = ''\n  for i in strings:\n      s += i\n      if len(s) > len(longest):\n          s = ''\n  return s\n\n\n\nWrite a Python function `string_to_list(s: str) -> List[str]` to solve the following problem:\nReturn a list of strings of the given input. Spaces are omitted.\n\nExamples:\nstring_to_list('Hello World')\n['Hello', 'World']\n>>> string_to_list('1 2 3')\n['1', '2', '3']\n>>> string_to_list('1  2  3')\n['1', '2', '3']\n>>> string_to_list('1 2 3')\n['1', '2', '3']\n>>> string_to_list('1 2 3')\n['1', '2', '3']\n>>> string_to_list"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n \n> greatest_common_divisor(26, 15)\n6\n>>> greatest_common_divisor(6, 5)\n1\n>>> greatest_common_divisor(6, 15)\n6\n>>> greatest_common_divisor(4, 6)\n2\n>>> greatest_common_divisor(47, 10)\n2\n>>> greatest_common_divisor(47, 81)\n4\n>>> greatest_common_divisor(32, 35)\n2\n>>> greatest_common_divisor(15, 17)\n2\n>>> greatest_common_divisor(22, 22)\n1\n\n\nWrite a Python function `max_min_sum(a: list) -> int` to solve the following problem:\nGiven a list of numbers, return the maximum and minimum sum of the numbers.",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n \n>>> greatest_common_divisor(91, 44)\n2\n>>> greatest_common_divisor(49, 25)\n2\n>>> greatest_common_divisor(94, 97)\n3\n>>> greatest_common_divisor(2, 4)\n1\n>>> greatest_common_divisor(99, 99)\n1\n>>> greatest_common_divisor(10, 3)\n3\n>>> greatest_common_divisor(10, 10)\n1\n>>> greatest_common_divisor(12, 12)\n1\n>>> greatest_common_divisor(12, 8)\n2\n>>> greatest_common_divisor(94, 89)\n2\n>>> greatest_common_divisor(101, 100)\n1\n>>> greatest",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n...............\n>>> greatest_common_divisor(1, 2)\n1\n>>> greatest_common_divisor(3, 2)\n1\n>>> greatest_common_divisor(5, 1)\n1\n>>> greatest_common_divisor(2, 2)\n2\n >>> greatest_common_divisor(2, 3)\n1\n >>> greatest_common_divisor(10, 5)\n5\n>>> greatest_common_divisor(20, 15)\n15\n>>> greatest_common_divisor(23, 97)\n13\n'''\n\n# 20200122\n# Problem 22\ndef fizz_buzz(n):\n    return 0 if n % 11 == 0 or n % 13 == 0 else n + (1 if n % 3 ==",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n  n = 100\n>>> greatest_common_divisor(100, 50)\n10\n    import math\n    ans = 1\n    while n % (a % ans)!= 0:\n        ans += 1\n    return ans\n\n\n\n\nWrite a Python function `is_palindrome(s: str) -> bool` to solve the following problem:\nGiven a string s, return whether s is a palindrome.\n>>> is_palindrome('tacocat')\nTrue\n>>> is_palindrome('a')\nFalse\n>>> is_palindrome('A')\nTrue\n>>> is_palindrome('AbCdEfGh')\nTrue\n>>> is_palindrome('Aabb')\nFalse\n>>> is_palindrome('aabb')\nTrue\n>>> is_palindrome('abc')\nFalse\n>>> is_palindrome('aabbb')\nTrue\n>>> is_palindrome",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n ~~~\n\n\nWrite a Python function `is_palindrome(str)` to solve the following problem:\nYou are given a string of characters. If the string is not a palindrome, return False.\n    s = str(input('Enter a string of characters: '))\n    s = s.lower()\n    s_list = s.split()\n    s_list_rev = s_list[::-1]\n    if s == s_list_rev:\n        return True\n    else:\n        return False\n\n\n\nWrite a Python function `max_number_in_list(lst: list) -> int` to solve the following problem:\nGiven a list of numbers, return the maximum number in the list.\n>>> lst = [6, 3, 4, -9, 12]\n>>> max_number_in_list(lst)\n12\n>>> lst = [5, 2, -3, 11,"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `all_prefixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `all_prefixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n ###########\n# 6.10\ndef all_prefixes(string):\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\"\"\"\n    if len(string) == 0:\n        return []\n    if len(string) == 1:\n        return [string]\n    if len(string) == 2:\n        if string[0]!= '0' and string[1]!= '1':\n            return []\n        return [string[0]]\n    ret = []\n    for i in range(2, len(string)):\n        if string[i]!= '0':\n            break\n        ret.append(string[i:])\n    ret.append(string[:-1])\n    return ret\n\n# 6.11\ndef all_prefixes_set(string):\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\"\"\"\n    if len(string) == 0:\n        return []\n    if len(string",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `all_prefixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a Python function `all_suffixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all suffixes from shortest to longest of the input string\n>>> all_suffixes('abc')\n['c', 'b', 'bc', 'abc']\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a Python function `all_combinations(string: str) -> List[str]` to solve the following problem:\nReturn list of all combinations of the input string\n>>> all_combinations('abc')\n['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a Python function `count_digits(num: int) -> int` to solve the following problem:\nReturn count of digits in the input number\n>>> count_digits(561)\n3\n>>> count_digits(132142132)\n",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `all_prefixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n \u00a0if not string:\n    return []\n\n    string = string.lower()\n    s_list = []\n    for i in range(len(string)):\n        if string[i] =='':\n            s_list.append(string[:i])\n    return s_list\n\n\n\nWrite a Python function `all_suffixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all suffixes from shortest to longest of the input string\n>>> all_suffixes('abc')\n['c', 'bc', 'abc']\n \u00a0if not string:\n    return []\n\n    string = string.lower()\n    s_list = []\n    for i in range(len(string)):\n        if string[i] =='':\n            s_list.append(string[i:])\n    return s_list\n\n\n\nWrite a Python function `sum_digits(num: int) -> int` to solve the following problem:\nReturn",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `all_prefixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n ...\n>>> all_prefixes('ab')\n['a', 'ab']\n\"\"\"\n\n\n# Given a list, make a new list which has all the elements of the list except\n# for the first element.\n\n\ndef all_prefixes(l):\n    return l[1:] + [l[0]]\n\n\n# Given a list, return a new list with all the elements in list reversed.\n\n\ndef reverse_list(l):\n    return l[::-1]\n\n\n# Given a list, return the length of the list.\n\n\ndef list_len(l):\n    return len(l)\n\n\n# Given a list, returns the index of the first occurance of the element which is\n# the same as the given element. If element can't be found return -1.\n\n\ndef find_index(l, e):\n    for i in range(len(l)):\n        if l[i] == e:\n            return",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `all_prefixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n  => all_prefixes('a') == []\n>>> all_prefixes('abcabc')\n['abc', 'abcabc']\n>>> all_prefixes('abcabcabc')\n['abcabc', 'abcabcabc']\n>>> all_prefixes('a')\n['a']\n>>> all_prefixes('')\n[]\n\n\nWrite a Python function `all_prefixes_2(string: str) -> List[str]` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string.\nFor example:\n>>> all_prefixes_2('abc')\n['a', 'ab', 'abc']\n>>> all_prefixes_2('a')\n['a']\n>>> all_prefixes_2('')\n[]\n>>> all_prefixes_2('abcabc')\n['abc', 'abcabc']\n>>> all_prefixes_2('abcabcabc')\n['abcabc', 'abcabcabc']\n\"\"\""
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `string_sequence(n: int) -> str` to solve the following problem:\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `string_sequence(n: int) -> str` to solve the following problem:\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n  n = 10\n>>> string_sequence(10)\n'0 1 2 3 4 5 6 7 8 9'\n  n = 1000\n>>> string_sequence(1000)\n'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `string_sequence(n: int) -> str` to solve the following problem:\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n ###########\ndef string_sequence(n) -> str:\n    return''.join(list(map(str, range(n))))\n\ndef string_sequence(n) -> str:\n    return''.join(list(map(str, range(n))))\n\ndef string_sequence(n, s = '') -> str:\n    return s +''.join(list(map(str, range(n))))\n\ndef string_sequence(n, s = '') -> str:\n    return s +''.join(list(map(str, range(n))))\n\n\nWrite a Python function `find_number(s)` to solve the following problem:\nGiven a string containing only digits and the character 'e', return the index of the first occurrence of 'e' in the string or return -1 if there is no such 'e'.\nFor example:\nfind_number('1234e') == 3\nfind",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `string_sequence(n: int) -> str` to solve the following problem:\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n  n = 6\n>>> string_sequence(6)\n'0 1 2 3 4 5 6'\n  n = 7\n>>> string_sequence(7)\n'0 1 2 3 4 5 6 7'\n  n = 8\n>>> string_sequence(8)\n'0 1 2 3 4 5 6 7 8'\n  n = 9\n>>> string_sequence(9)\n'0 1 2 3 4 5 6 7 8 9'\n  n = 10\n>>> string_sequence(10)\n'0 1 2 3 4 5 6 7 8 9 10'\n  n = 11\n>>> string_sequence(11)\n'0 1 2 3 4 5",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `string_sequence(n: int) -> str` to solve the following problem:\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n  if not n:\n        return ''\n\ns = ''\nfor i in range(n):\n    s += str(i) +''\nreturn s\n\n\n\nWrite a Python function `get_string_list(n: int) -> list` to solve the following problem:\nReturn a list of strings containing space-delimited integers from 0 upto n inclusive.\n>>> get_string_list(0)\n[]\n>>> get_string_list(3)\n['0', '1', '2']\n>>> get_string_list(4)\n['0', '1', '2', '3']\n>>> get_string_list(5)\n['0', '1', '2', '3', '4']\n>>> get_string_list(6)\n['0', '1', '2', '3', '4', '5']\n>>> get_string_list(7)",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `string_sequence(n: int) -> str` to solve the following problem:\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n ########\n# Complete this function.\n# You can assume that n is a non-negative integer.\ndef string_sequence(n):\n    if n < 0:\n        return ''\n    if n == 0:\n        return '0'\n    return '0'+''.join(map(str, range(n)))\n\n\nWrite a Python function `find_longest_substring(s)` to solve the following problem:\nGiven a string of characters, you need to find the length of the longest substring that contains all the characters.\nFor example, given the string \"abcabcbb\", you need to return 3 as this is the longest substring with all the characters.\n>>> find_longest_substring('abcabcbb')\n3\n>>> find_longest_substring('bbbbb')\n1\n>>> find_longest_substring('pwwkew')\n3\n    '''\n\n'''\nWrite a Python function `find_longest_"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `count_distinct_characters(string: str) -> int` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `count_distinct_characters(string: str) -> int` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n ########\nWrite a Python function `count_duplicate_characters(string: str) -> int` to solve the following problem:\nGiven a string, find out how many times each distinct character appears in the string.\n>>> count_duplicate_characters('xyzXYZ')\n{'x': 3, 'y': 2, 'z': 1}\n>>> count_duplicate_characters('Jerry')\n{'R': 1, 'e': 2, 'r': 1, 'Y': 1, 'r': 1, 'e': 2, 'r': 1, 'Y': 1}\n ########\nWrite a Python function `count_double_letters(s: str) -> int` to solve the following problem:\nGiven a string, find out how many double letters appear in the string.\n>>> count_double_letters('xyzXYZ')\n2\n>>> count_double_letters('J",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `count_distinct_characters(string: str) -> int` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n ########\n\nWrite a Python function `get_max_and_min_num(lst: list) -> tuple` to solve the following problem:\nGiven a list of positive integers, find the maximum and minimum of these numbers.\n>>> get_max_and_min_num([1,2,3])\n(3, 1)\n>>> get_max_and_min_num([1,3,3,3])\n(3, 3)\n>>> get_max_and_min_num([1,2,3,3,4,4])\n(3, 4)\n>>> get_max_and_min_num([1,1,1,1,1,1])\n(1, 1)\n ########\n\nWrite a Python function `get_max_and_min_num_in_list(lst: list) -> tuple` to solve the following problem:\n",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `count_distinct_characters(string: str) -> int` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n ###############\n\"\"\"\n\ndef fizz_buzz(n):\n    if n < 10:\n        return n\n    return 3 * fizz_buzz(n//3) + 5 * fizz_buzz(n//5) + fizz_buzz(n//15)\n\ndef words_string(s):\n    s_list = []\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\ndef sum_squares(lst):\n    squared = 0\n    for i in lst:\n        squared += i**2\n    return squared\n\n\ndef count_distinct_characters(string):\n    d = {}\n    for c in string:\n        if c not in d:\n            d[c] = 1\n        else:\n            d[",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `count_distinct_characters(string: str) -> int` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n ########\ndef count_distinct_characters(string: str) -> int:\n    if not string:\n        return 0\n    return len(set(string))\n\nWrite a Python function `find_first_duplicate(array: list) -> int` to solve the following problem:\nGiven an input array of integers and an element k, find the first index of k in the given array.\nIf the element k is not present in the array, return -1.\nFor example, if the element k is 5 in the given array, then the function should return 4.\n>>> find_first_duplicate([1,2,3,4,5,4,4,5,4,4,5])\n3\n>>> find_first_duplicate([1,2,3,4,5,4,4,5,4,4,5])\n-1\n>>> find_first_duplicate([1,1,1",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `count_distinct_characters(string: str) -> int` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n ########\ndef count_distinct_characters(string):\n    return len(set(string.lower()))\n\n#2\ndef count_distinct_characters(string):\n    return len(set(string.lower()))\n\n#2\ndef count_distinct_characters(string):\n    return len(set(string.lower()))\n\n#2\ndef count_distinct_characters(string):\n    return len(set(string.lower()))\n\n#2\ndef count_distinct_characters(string):\n    return len(set(string.lower()))\n\n#2\ndef count_distinct_characters(string):\n    return len(set(string.lower()))\n\n#2\ndef count_distinct_characters(string):\n    return len(set(string.lower()))\n\n#2\ndef count_distinct_characters(string):\n    return len(set(string.lower()))\n\n#2\ndef count_distinct_characters"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `parse_music(music_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music('o o|.| o| o|.|.|.|.| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `parse_music(music_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music('o o|.| o| o|.|.|.|.| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a Python function `create_list(n: int, k: int) -> List[int]` to solve the following problem:\nCreate a list from 1 to n with length k.\nFor example:\ncreate_list(5, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n>>> create_list(10, 1) == [1]\n>>> create_list(10, 2) == [1, 2]\n>>> create_list(10, 3) == [1, 2, 3]\n>>> create_list(10, 4) == [1, 2, 3, 4]\n>>> create_list(10, 5) == [1, 2, 3, 4",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `parse_music(music_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music('o o|.| o| o|.|.|.|.| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n ~~~~~~~~~~~~~~~~~~~~~\n>>> parse_music('o o|.| o|.| o|.| o o|.|.|.|.|.|.| o o|.|.| o|.|.| o|.| o|.| o|.|.| o o|.| o|.| o|.| o|.|.|.|.|.| o o|.|.| o')\n[3, 2, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2]\n",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `parse_music(music_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music('o o|.| o| o|.|.|.|.| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\nWrite a Python function `solve_sudoku(board: List[List[str]]) -> None` to solve the following problem:\nGiven a 9 x 9 Sudoku board, find the unique solution to the Sudoku puzzle.\nEach element of the solution board is a string representing a value on the board.\n\nA sudoku solution must satisfy all of the following conditions:\nEach row must contain the digits 1-9 without repetition.\nEach column must contain the digits 1-9 without repetition.\nEach of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\nThe digits 1-9 only include one level of repetition.\nExample:\nboard = [\n    ['5', '3', '.', '.', '7', '.', '.', '.', '.'],\n    ['6', '.', '.', '1', '9', '5',",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `parse_music(music_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music('o o|.| o| o|.|.|.|.| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n ##############################################################################################\nExample 2\nInput\n\n>>> parse_music('o.|.o|.|.|.|.|.|.|.| o  ')\n[4, 1, 2, 4, 2, 1, 1, 1, 1, 3, 3]\n\nExample 3\nInput\n\n>>> parse_music('o.|.| o.|.|.|.|.|.| o o')\n[4, 1, 2, 4, 2, 1, 1, 1, 1, 3, 3]\n\nExample 4\nInput\n\n>>> parse_music('o.|.| o.|.|.|.|.|.|.| o o')\n[4, 1, 2, 4, 2, 1, 1, 1",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `parse_music(music_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music('o o|.| o| o|.|.|.|.| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n #########\n\nWrite a Python function `split_and_count_notes(music_string: str)` to solve the following problem:\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return a list of integer(s) corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> split_and_count_notes('o o|.| o| o|.|.|.|.| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n #########\n\nWrite a Python function `parse_time(time_string"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n  s = 'hello world!'\n>>> how_many_times(s, 'wor')\n4\n>>> how_many_times(s, 'orld')\n3\n>>> how_many_times(s, 'ld')\n0\n>>> how_many_times(s, 'o')\n0\n>>> how_many_times(s, 'o1')\n1\n>>> how_many_times(s, 'o2')\n2\n>>> how_many_times(s, 'o3')\n0\n>>> how_many_times(s, '1o3')\n1\n>>> how_many_times(s, '1o2')\n2\n>>> how_many_times(s, '1o1')\n1\n>>> how_many_times(s, '1o')\n0\n>>> how_many_times(s, '1o0')\n1\n>>>",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n ###########\n\nWrite a Python function `solution(n: int, m: int)` to solve the following problem:\nCreate a list of all integers between n and m, inclusive, and return the sum of the squares of the elements in the list.\n>>> solution(1, 10)\n55\n>>> solution(1, 3)\n0\n>>> solution(0, 1)\n0\n>>> solution(2, 5)\n16\n>>> solution(3, 2)\n0\n>>> solution(3, 4)\n12\n>>> solution(10, 10)\n250\n>>> solution(10, 11)\n250\n>>> solution(10, 12)\n250\n>>> solution(10, 100)\n1500\n>>> solution(100, 10)\n150",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n #########\n    from collections import defaultdict\n    def how_many_times(s: str, sub: str) -> int:\n        counts = defaultdict(int)\n        for i in range(len(s) - len(sub) + 1):\n            matches = s[i:i+len(sub)]\n            if matches == sub:\n                counts[len(sub)] += 1\n        return counts[len(sub)]\n\n\"\"\"",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n ##########\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('aaaa', 'aaa')\n1\n>>> how_many_times('aaa', 'aaaa')\n4\n>>> how_many_times('aaa', 'aaaaa')\n1\n>>> how_many_times('aaa', 'aaaaa')\n5\n>>> how_many_times('aaaaa', 'aaaa')\n1\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('aaabbb', 'aa')\n1\n>>>",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n istr = 'abba'\n>>> how_many_times(istr, 'ab')\n3\n>>> how_many_times(istr, 'ba')\n0\n>>> how_many_times(istr, 'abba')\n3\n>>> how_many_times(istr, 'abba')\n5\n>>> how_many_times(istr, 'baa')\n2\n>>> how_many_times(istr, 'bba')\n0\n>>> how_many_times(istr, 'aabba')\n5\n>>> how_many_times(istr, 'aabbba')\n2\n>>> how_many_times(istr, 'aaabbba')\n0\n>>> how_many_times(istr, 'aabbaab')\n3\n>>> how_many_times(istr, 'c')\n0\n>>> how_many_times(istr, 'ababba')\n5\n"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `sort_numbers(numbers: str) -> str` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `sort_numbers(numbers: str) -> str` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a Python function `reverse_string(s): str` to solve the following problem:\nGiven a string, return a string where the letters in the string are reversed.\n>>> reverse_string('hello world')\n'dlrow olleh'\n>>> reverse_string('hello')\n'ello'\n>>> reverse_string('python')\n'hon python'\n>>> reverse_string('ppython')\n'hon ppython'\n>>> reverse_string('a')\n'a'\n>>> reverse_string('2 a')\n'2 a'\n>>> reverse_string('a2')\n'a2'\n>>> reverse_string('ppython 2')\n'hon ppython 2'\n>>> reverse_string(' python2')\n'hon python2'\n>>> reverse_string('a python2')\n'a python2'\n>>> reverse_string('python 2')\n",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `sort_numbers(numbers: str) -> str` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n 00123456789\n>>> sort_numbers('nine two one')\n'one two nine'\n 0123456789\n>>> sort_numbers('one two three')\n'one three two'\n 012345678\n>>> sort_numbers('one two three four five six seven eight nine')\n'eight seven four five nine two three one'\n 08745632109\n>>> sort_numbers('zero one two three four five six seven eight nine ten')\n'nine ten eight seven eight four five six three two one zero'\n 09876543210\n>>> sort_numbers('one two three four five')\n'one two three four five'\n 012345\n>>> sort_numbers('zero one two three four five four')\n'",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `sort_numbers(numbers: str) -> str` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n ##########\n\nWrite a Python function `sort_strings(s: str) -> str` to solve the following problem:\nInput is a string.\nReturn the string in sorted order.\n>>> sort_strings('hello world')\n'world hello'\n ##########\n\nWrite a Python function `is_palindrome(s: str) -> bool` to solve the following problem:\nInput is a string.\nReturn `True` if the string is a palindrome, and `False` if it is not.\n>>> is_palindrome('racecar')\nFalse\n>>> is_palindrome('racecar ')\nTrue\n>>> is_palindrome('racecar  ')\nFalse\n>>> is_palindrome('racecar  ')\nTrue\n>>> is_palindrome('race')\nFalse\n>>> is_palindrome('racecar')\nTrue\n>>> is_palindrome('')\nTrue\n>>> is_palindrome(' ')\n",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `sort_numbers(numbers: str) -> str` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n  sort_numbers('five four seven two')\n'five four seven two'\n'''\n\ndef sort_numbers(numbers):\n    pass\n\n",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `sort_numbers(numbers: str) -> str` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n ########\ndef sort_numbers(numbers: str) -> str:\n    import re\n    numbers_list = re.split(' |\\n', numbers)\n    numbers_list.sort()\n    return''.join(numbers_list)\n\n\"\"\"\n\n\ndef words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\ndef sum_squares(lst):\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i) ** 2\n    return squared\n\n\ndef fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 1"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `find_closest_elements(numbers: List[float]) -> Tuple[float, float]` to solve the following problem:\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `find_closest_elements(numbers: List[float]) -> Tuple[float, float]` to solve the following problem:\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n  For the second example, you should return the closest 3 numbers to each other and return the smaller one first.\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 3.0)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(3.0, 3.0)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, ",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `find_closest_elements(numbers: List[float]) -> Tuple[float, float]` to solve the following problem:\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n  import math\n  ns = []\n  for i in numbers:\n    ns.append(math.ceil(i))\n  ns.sort()\n  return ns\n\n\n\nWrite a Python function `find_first_and_last_index(numbers: List[float]) -> Tuple[int, int]` to solve the following problem:\nFind the first and last index of the given numbers.\n>>> find_first_and_last_index([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(1, 4)\n>>> find_first_and_last_index([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(0, 5)\n>>> find_first_and_last_index([0, 1, 2, 3, ",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `find_closest_elements(numbers: List[float]) -> Tuple[float, float]` to solve the following problem:\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n  # Example 2: Find all numbers in [1, 20, 30, 40, 50] but not in [20, 200, 300, 400, 500]\n>>> find_closest_elements([1, 20, 30, 40, 50])\n(1.0, 30.0)\n>>> find_closest_elements([1, 20, 30, 40, 50, 31, 32, 42, 52, 62, 72, 82, 92])\n(1.0, 72.0)\n>>> find_closest_elements([1, 20, 30, 40, 50, 30, 31, 32",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `find_closest_elements(numbers: List[float]) -> Tuple[float, float]` to solve the following problem:\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n ...\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0])\n(2.0, 3.0)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n(3.0, 6.0)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n(4.0,",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `find_closest_elements(numbers: List[float]) -> Tuple[float, float]` to solve the following problem:\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n \n>>> find_closest_elements([2.0, 2.5, 1.0, 2.0, 3.0, 4.0, 5.0, 3.5, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n(2.0, 5.0)\n>>> find_closest_elements([100.0, 90.0, 80.0, 70.0, 60.0, 50.0, 40.0, 30.0, 20.0, 10.0, 10.0, 10.0, 10.0, 1"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `rescale_to_unit(numbers: List[float]) -> List[float]` to solve the following problem:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `rescale_to_unit(numbers: List[float]) -> List[float]` to solve the following problem:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n ...\n>>> rescale_to_unit([0.0, 0.5, 1.0, 1.5, 2.0])\n[0.0, 0.5, 1.0, 1.5, 2.0]\n>>> rescale_to_unit([10.0, 9.0, 8.0, 7.0, 6.0])\n[0.0, 0.1, 0.2, 0.3, 0.4]\n>>> rescale_to_unit([1000.0, 999.0, 800.0, 700.0, 600.0])\n[0.0, 0.002615041587889103, 0.00530339",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `rescale_to_unit(numbers: List[float]) -> List[float]` to solve the following problem:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n  For the numbers 1, 2, and 3, we get 0.25.\n>>> rescale_to_unit([1.01, 2.02, 3.03, 4.04, 5.05])\n[0.01, 0.22, 0.43, 0.64, 0.85]\n  For the numbers 1.01 and 1.02, we get 0.01, 0.02, and 0.03.\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n[0",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `rescale_to_unit(numbers: List[float]) -> List[float]` to solve the following problem:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n \u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e3a0\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e3a1\n>>> rescale_to_unit([1.0, 2.3, 3.0, 4.0, 5.0])\n[0.0, 0.23, 0.5, 0.75, 1.0]\n \u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e3a0\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e3a1\n>>> rescale_to_unit([1.0, 0, 2.0, 3.0, 4.0])\n[0.0, 0.5, 1.0, 1.0, 1.0]\n \u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e3a0\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e3a1\n>>> rescale_to_unit([1.0, 1, 2, 3, 4])\n[0.0, 0.5, 1.0, 1.0",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `rescale_to_unit(numbers: List[float]) -> List[float]` to solve the following problem:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n ################################################################################\n# Author: Danyang Zhong\n# Date  : 5/16/2021\n# IDE   : PyCharm\n###################################\n\n\"\"\"\n1. 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 4.0 4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 4.9 5",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `rescale_to_unit(numbers: List[float]) -> List[float]` to solve the following problem:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n  For the last example, the original list is [1] and its transform is:\n [0.0, 0.25, 0.5, 0.75, 1.0]\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n[0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 2.75, 3.0]\n    for i, num in enumerate(numbers):\n        numbers[i] / 20\n    return numbers\n\n\n"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `filter_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `filter_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n  for i in values:\n    if isinstance(i, int):\n        values.remove(i)\n    else:\n        values.remove(int(i))\n\n\"\"\"\n",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `filter_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n \nWrite a Python function `filter_even_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for even integers\n>>> filter_even_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n[2, 4, 6]\n>>> filter_even_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a'])\n[2, 4, 6]\n>>> filter_even_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 11])\n[5, 7]\n>>> filter_even_integers([",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `filter_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n  >> filter_integers([1, 2, 3]) # 1, 2, 3\n  >> filter_integers([1, 2, 3, 4, 5, 6]) # 1, 2, 3, 4, 5, 6\n  >> filter_integers([1, 2, 'a', 'b', 'd', 'f']) # 1, 2\n  >> filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'd', 'f', 'g', 'h', 'i'])\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >> filter_integers([1, 'a', 2, 'b', 'c', 'd',",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `filter_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n \nExamples:\n>>> filter_integers([5, 5, 'b', 6, 'a'])\n[5, 'b']\n>>> filter_integers([5, 5, 10, 'a', 6, 7, 8])\n[5, 10, 6, 7, 8]\n>>> filter_integers([0, 1, 2, 3, 4])\n[0, 2, 4]\n>>> filter_integers([])\n[]\n>>> filter_integers([1, 2, 3])\n[1, 2, 3]\n>>> filter_integers([1, 2, 3, 4])\n[1, 2, 3, 4]\n>>> filter_integers([1, 2, 3, 4, 5])\n[1, 2, 3, 4, ",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `filter_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n  filter_integers([1, 2, 3, 42, 5])\n[1, 2, 3, 42]\n>>> filter_integers([1, 2, 3, 42, 5, 6, 7, 8, 11, 12, 13])\n[1, 2, 3, 42, 5, 6]\n>>> filter_integers([1, 2, 3, 42, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16])\n[1, 2, 3, 42, 5, 6, 7, 8, 11, 12, 13, 14, 15]\n>>> filter_integers"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `strlen(string: str) -> int` to solve the following problem:\nReturn length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `strlen(string: str) -> int` to solve the following problem:\nReturn length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n ~~~~~~~~~~~~~~~~~~~\n>>> strlen('a')\n1\n>>> strlen('abc')\n3\n>>> strlen('abcdef')\n6\n>>> strlen('a bc')\n2\n>>> strlen('a bc def')\n5\n>>> strlen('a bc def ghi')\n8\n>>> strlen('a bc def ghi abc def')\n10\n\nWrite a Python function `is_palindrome(s)` to solve the following problem:\nReturn True if the given string is a palindrome or False otherwise.\n>>> is_palindrome('')\nFalse\n>>> is_palindrome('a')\nFalse\n>>> is_palindrome('abc')\nTrue\n>>> is_palindrome('a b')\nFalse\n>>> is_palindrome('ab a')\nFalse\n>>> is_palindrome('a b c')\nTrue\n>>> is_palindrome('a b c d')\nFalse\n>>> is_",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `strlen(string: str) -> int` to solve the following problem:\nReturn length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n #########\n Write a Python function `is_palindrome(x: int) -> bool` to solve the following problem:\nReturn True if given number is palindrome, or False otherwise.\n>>> is_palindrome(111)\nTrue\n>>> is_palindrome(123)\nFalse\n>>> is_palindrome(11)\nFalse\n#    ans = 0\n#    for i in range(len(str(x))):\n#        if x[i] == x[-1-i]:\n#            ans += 1\n#    if ans % 2 == 0:\n#        return False\n#    else:\n#        return True\n",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `strlen(string: str) -> int` to solve the following problem:\nReturn length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n ~~s = string.maketrans('', '', 'abcdefghijklm')\n    s = 'a' + s + 'b' + s + 'c' + s + 'd' + s + 'e' + s + 'f' + s + 'g' + s + 'h' + s + 'i' + s + 'j' + s + 'k' + s + 'l' + s +'m' + s + 'n' + s + 'o' + s + 'p' + s + 'q' + s + 'r' + s +'s' + s + 't' + s + 'u' + s + 'v' + s + 'w' + s + 'x' + s + 'y' + s + 'z' + s\n    ans = len(s)\n    return ans\n\n\nWrite a Python function `is_leap_year(year: int)",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `strlen(string: str) -> int` to solve the following problem:\nReturn length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n #####################################################################################\n#####################################################################################\n#                                                                                    #\n#  Write a Python function to solve the following problem:                               #\n#     Write a Python function `factorial(n: int) -> int` from scratch.                       #\n#     The function should accept an integer `n` and return the factorial of `n`.          #\n#####################################################################################\n#####################################################################################\n#                                                                                    #\n#  Write a Python function to solve the following problem:                               #\n#     Write a Python function `greatest_common_divisor(a: int, b: int) -> int` from scratch. #\n#     The function should accept 2 integers `a` and `b` and return the greatest common divisor of them. #\n#####################################################################################\n#####################################################################################\n#                                                                                    #\n#  Write a Python function to solve the following problem:                               #\n#     Write a Python function `is_prime(n: int) -> int` from scratch",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `strlen(string: str) -> int` to solve the following problem:\nReturn length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n  s = ''\n  for c in string:\n    s += c\n  return len(s)\n\n\n\nWrite a Python function `str_to_int(string: str) -> int` to solve the following problem:\nReturn the integer representation of given string\n>>> str_to_int('1')\n1\n>>> str_to_int('42')\n42\n>>> str_to_int('0')\n0\n>>> str_to_int('11111')\n11111\n>>> str_to_int('11111111111')\n11111111111\ndef str_to_int(string: str) -> int:\nstring = string.strip()\nint_val = 0\nfor c in string:\n    int_val = int_val * 10 + int(c)\nreturn int_"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `largest_divisor(n: int) -> int` to solve the following problem:\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `largest_divisor(n: int) -> int` to solve the following problem:\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n \u6700\u5927\u7684\u9664\u6570 = 13\n'''\n\nimport math\n\ndef largest_divisor(n):\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            while n % i == 0:\n                n //= i\n            if n > i:\n                return i\n        i += 1\n\n    if n > 1:\n        return n\n    else:\n        return 1\n\n\n# Python function to find the highest common divisor\ndef gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\n\ndef mcd_helper(a, b):\n    if a % b!= 0:\n        return gcd(a, b)\n    else:\n        return mcd_helper(b, a % b)\n\ndef mcd(a, b):\n    return mcd_helper(a, b)\n\ndef",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `largest_divisor(n: int) -> int` to solve the following problem:\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n..........\n35210\n..........\n5213\n..........\n1352\n..........\n>>> largest_divisor(14)\n13\n..........\n214\n..........\n314\n..........\n514\n..........\n145\n..........\n>>> largest_divisor(16)\n5\n..........\n35210\n..........\n5213\n..........\n1352\n..........\n..........\n514\n..........\n145\n..........\n>>> largest_divisor(18)\nNone\n..........\n35210\n..........\n5213\n..........\n1352\n..........\n..........\n514\n..........\n145",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `largest_divisor(n: int) -> int` to solve the following problem:\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n  --> largest_divisor(100)\n1\n  --> largest_divisor(150)\n2\n  --> largest_divisor(140)\n3\n  --> largest_divisor(300)\n\n>>> largest_divisor(1)\n1\n  --> largest_divisor(0)\n1\n  --> largest_divisor(1000)\n2\n  --> largest_divisor(100)\n3\n  --> largest_divisor(10)\n4\n  --> largest_divisor(100000)\n5\n  --> largest_divisor(10000)\n6\n  --> largest_divisor(1000)\n7\n  --> largest_divisor(100)\n8\n  --> largest_divisor(1000000)\n9\n  --> largest_divisor(100000)\n1",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `largest_divisor(n: int) -> int` to solve the following problem:\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n 3\n>>> largest_divisor(16)\n1\n>>> largest_divisor(17)\n1\n>>> largest_divisor(19)\n1\n>>> largest_divisor(20)\n1\n>>> largest_divisor(21)\n2\n>>> largest_divisor(22)\n2\n>>> largest_divisor(23)\n4\n>>> largest_divisor(24)\n5\n>>> largest_divisor(25)\n5\n>>> largest_divisor(27)\n8\n>>> largest_divisor(28)\n8\n>>> largest_divisor(31)\n12\n>>> largest_divisor(32)\n12\n>>> largest_divisor(34)\n16\n>>> largest_divisor(35)\n16\n>>> largest_divisor(36)\n16\n>>> largest_divisor(37)\n20\n>>> largest_divisor(",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `largest_divisor(n: int) -> int` to solve the following problem:\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n #############################################################################################\n\nWrite a Python function `gcd(a: int, b: int) -> int` to solve the following problem:\nFor two numbers a, b, determine the greatest common divisor of a and b.\n>>> gcd(3, 9)\n3\n #############################################################################################\n\nWrite a Python function `find_min(lst) -> int` to solve the following problem:\nReturn the smallest number in the given list.\n>>> find_min([1, 2, 2, 2, 3])\n1\n #############################################################################################\n\nWrite a Python function `get_all_factors(n: int) -> list` to solve the following problem:\nReturn all the factors of a positive integer n (without duplicates).\nNote:\nThe range of all positive integers less than or equal to n is: [1, 2, 3, 4, 5, 6, 7, "
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `factorize(n: int) -> List[int]` to solve the following problem:\nReturn list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `factorize(n: int) -> List[int]` to solve the following problem:\nReturn list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\n  n = 10\n>>> factorize(n)\n[2, 2, 2, 2, 2, 2, 2, 2, 2]\n>>> factorize(42)\n[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n>>> factorize(135)\n[2, 3, 5, 7]\n>>> factorize(11)\n[2]\n>>> factorize(20)\n[2, 3]\n>>> factorize(12)\n[2, 2, 2, 2]\n>>> factorize(100)\n[1, 2, 3",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `factorize(n: int) -> List[int]` to solve the following problem:\nReturn list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\n  import math\n  factors = []\n  x = math.ceil(math.sqrt(n))\n  for i in range(1, x + 1):\n    if n % i == 0:\n      factors.append(i)\n      factors.append(n // i)\n  return factors\n\n\n\nWrite a Python function `fact(n: int) -> int` to solve the following problem:\nReturn the factorial of an integer n.\nExamples:\n>>> fact(3)\n6\n>>> fact(4)\n24\n>>> fact(5)\n120\n>>> fact(6)\n720\n>>> fact(7)\n5040\n>>> fact(8)\n40320\n>>> fact(9)\n3628800\n>>> fact(10)\n399168000\n\n\nWrite a Python function `power(base: int, exponent",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `factorize(n: int) -> List[int]` to solve the following problem:\nReturn list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\n  import math\n  nums = list(range(10, 30, 2))\n  squared = 0\n  for i in nums:\n      squared += math.ceil(i)**2\n  ans = []\n  for i in range(10, 30, 2):\n      if i**2 > squared:\n          ans.append(i)\n  ans = sorted(list(set(ans)))\n  ans.sort()\n  return ans\n\n\n\nWrite a Python function `find_gcd(a, b)` to solve the following problem:\nReturn the GCD of a and b.\nExample:\nfind_gcd(10, 7)\n7\nExample:\nfind_gcd(15, 27)\n15\n>>> find_gcd(17, 26)\n17\n>>> find_gcd(5, 7)\n7\n>>> find_gcd(10, 2",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `factorize(n: int) -> List[int]` to solve the following problem:\nReturn list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\n 1 is not a prime number\n>>> factorize(13)\n[2, 2, 3]\n>>> factorize(16)\n[2, 2, 4]\n>>> factorize(800)\n[1, 2, 4, 5, 8]\n>>> factorize(1000)\n[2, 2, 4, 5, 8, 13]\n>>> factorize(50000000)\n[1, 2, 4, 5, 10, 25, 50, 100, 250, 500, 1000]\n>>> factorize(300000000)\n[1, 2, 4, 5, 10, 25, 50, 10",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `factorize(n: int) -> List[int]` to solve the following problem:\nReturn list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\n  n = int(input())\n>>> factorize(n)\n[n]\n    \nWrite a Python function `n_choose_k(n, k) -> int` to solve the following problem:\nReturn the number of n-choose-k combinations of integers from 1 to n.\nFor example:\nn = 4\nk = 2\n>>> n_choose_k(n, k)\n4\n>>> n_choose_k(5, 2)\n12\n>>> n_choose_k(5, 3)\n80\n>>> n_choose_k(5, 4)\n245\n>>> n_choose_k(5, 5)\n7200\nn = 3\nk = 3\n>>> n_choose_k(n, k)\n9\n>>> n_choose_k(5, 5)\n450\n>>>"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `remove_duplicates(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `remove_duplicates(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n \n>>> remove_duplicates([1, 2, 3, 4, 5, 6, 6])\n[1, 2, 3, 4, 5]\n>>> remove_duplicates([1, 2, 3, 4, 5, 6, 7])\n[1, 2, 3, 4, 5, 6]\n\"\"\"\nimport bisect\n\n\ndef remove_duplicates(lst: List[int]) -> List[int]:\n    lst_r = []\n    for i in lst:\n        if i not in lst_r:\n            lst_r.append(i)\n    return lst_r\n\n\ndef remove_duplicates_1(lst: List[int]) -> List[int]:\n    seen = set()\n    return [x for x in lst if not (x in seen or seen.add(x))]\n\n\ndef remove_duplicates_2(",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `remove_duplicates(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n \nRemove all elements that occur less than 2 times:\n>>> remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nRemove all elements that occur less than 3 times:\n>>> remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `remove_duplicates(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n ##########\n>>> remove_duplicates([1, 1, 2, 2, 3])\n[1, 2, 3]\n ##########\n>>> remove_duplicates([1, 1, 1, 2, 2, 3, 3])\n[1, 2, 3]\n\nWrite a Python function `remove_vowels(letters: str) -> str` to solve the following problem:\nRemove vowels from the input string, and return the new string.\n\nNote:\nUse the set() or list() functions to remove duplicates.\n\nExamples:\n>>> remove_vowels('hello')\n'helo'\n>>> remove_vowels('yoyoyoyoyo')\n'oyoyoyo'\n>>> remove_vowels('yo')\n'y'\n>>> remove_vowels('hello')\n'hello'\n>>> remove_vowels('hello",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `remove_duplicates(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n \nAs the input contains multiple elements with the same value, we can return a list in the same order.\n>>> remove_duplicates([1, 1, 2, 3, 4, 4])\n[1, 2, 3, 4, 4]\n\nNote:\nThis problem does not contain a duplicate in the input list.\n\n\nWrite a Python function `find_all_anagrams(s: str) -> List[str]` to solve the following problem:\nGiven a string S, find all instances of each anagram in S.\n>>> find_all_anagrams(\"cbaebabacd\")\n[\"ab\", \"d\"]\n>>> find_all_anagrams(\"abab\")\n[\"ab\", \"ba\"]\n>>> find_all_anagrams(\"abc\")\n[\"ab\", \"bc\", \"cd\"]\n>>> find_all_anagrams(\"abcd\")\n",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `remove_duplicates(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n #########################################################################################\n# Python - Stacks - Greedy Algorithm\n#########################################################################################\nWrite a Python function `greedy_stack(stack: List[int]) -> List[int]` to solve the following problem:\nGiven a stack of integers, return a new stack where the top element is the first\nelement of the stack, and if the stack is empty, return an empty stack.\nExample:\ngreedy_stack([10, 20, 30, 40]) == [10, 30, 40]\ngreedy_stack([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]\ngreedy_stack([]) == []\n\"\"\"\ndef greedy_stack(stack: List[int]) -> List[int]:\n    if stack:\n        return [stack.pop()] + greedy_"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `flip_case(string: str) -> str` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `flip_case(string: str) -> str` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n ########\n# Odd-Even Prime #\n########\nclass Solution:\n    def odd_even_prime(self, n: int) -> List[int]:\n        odds = [n]\n        evens = []\n        for i in range(2, n):\n            if i % 2 == 0 or i % 3 == 0:\n                evens.append(i)\n            else:\n                odds.append(i)\n        return odds + evens\n",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `flip_case(string: str) -> str` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n ###############################################################################################\n\nWrite a Python function `number_to_words(n: int) -> str` to solve the following problem:\nWrite a function that converts number to words.\nFor example:\nnumber_to_words(1) == 'One'\nnumber_to_words(12) == 'Twelve'\nnumber_to_words(13) == 'Thirteen'\nnumber_to_words(14) == 'Fourteen'\nnumber_to_words(15) == 'Fifteen'\nnumber_to_words(16) == 'Sixteen'\nnumber_to_words(17) == 'Seventeen'\nnumber_to_words(18) == 'Eighteen'\nnumber_to_words(19) == 'Nineteen'\nnumber_to_words(20) == 'Twenty'\nnumber_to",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `flip_case(string: str) -> str` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n ###########\n# SOLUTION #\n###########\n\ndef flip_case(s: str) -> str:\n    s = s.lower()\n    s_list = list(s)\n    for i in range(len(s)):\n        if s_list[i] == s_list[i].upper():\n            s_list[i] = s_list[i].lower()\n        elif s_list[i] == s_list[i].lower():\n            s_list[i] = s_list[i].upper()\n    return ''.join(s_list)\n",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `flip_case(string: str) -> str` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n ere = ''\n    for i in string:\n        if i.islower():\n            ere += i.upper()\n        else:\n            ere += i.lower()\n    return ere\n\n\n\nWrite a Python function `reverse_string(string: str) -> str` to solve the following problem:\nFor a given string, reverse the string.\n>>> reverse_string('Hello')\n'olleH'\n>>> reverse_string('Hello, World!')\n'olleH, WoRlD!'\n>>> reverse_string('Peter Waits for a Birthday.')\n'BIRTHDAY, PETER WAITS'\n>>> reverse_string('The quick brown fox jumps over the lazy dog.')\n'god yzal eht revo spmuj xof nworb kciuq ehT'\n\n\"\"\"\n\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `flip_case(string: str) -> str` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n ########\n#\n#    import re\n#    s = re.sub(r\"[aeiou]\", \"aeiou\", \"hello\")\n#    return s\n"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `concatenate(strings: List[str]) -> str` to solve the following problem:\nConcatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `concatenate(strings: List[str]) -> str` to solve the following problem:\nConcatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n #####################################################################################\nWrite a Python function `fizz_buzz_n(n)` to solve the following problem:\ndef fizz_buzz_n(i):\n    return '' if i % 15 == 0 or i % 3 == 0 or i % 5 == 0 else 'FizzBuzz' if i % 3 == 0 else 'Fizz' if i % 5 == 0 else 'Buzz' if i % 15 == 0 else str(i)\nFor example:\n    fizz_buzz_n(15)\n    fizz_buzz_n(100)\n    fizz_buzz_n(123)\n    fizz_buzz_n(200)\n    fizz_buzz_n(500)\n    fizz_buzz_n(20)\n    fizz_buzz_n(10)\n    fizz_buzz_n(",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `concatenate(strings: List[str]) -> str` to solve the following problem:\nConcatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n  strings = []\n  s = ''\n  for i in strings:\n      s += i\n'''\n\n# Python 3.7\n#   from typing import List\n#   def concatenate(strings: List[str]) -> str:\n#       return \"\".join(strings)\n\n# Python 3.5\n#   from typing import List\n#   def concatenate(strings: List[str]) -> str:\n#       return \"\".join(strings)\n\n# Python 3.3\n#   from typing import List\n#   def concatenate(strings: List[str]) -> str:\n#       return \"\".join(strings)\n\n# Python 2.7\n#   from typing import List\n#   def concatenate(strings: List[str]) -> str:\n#       return \"\".join(strings)\n\n# Python 2.7\n#   from typing import List\n#   def concatenate(strings: List[",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `concatenate(strings: List[str]) -> str` to solve the following problem:\nConcatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n #############################################################################\n# 8. Write a Python function `check_palindrome(s)` to solve the following problem:\nCheck whether the given string can be converted to a palindrome.\n>>> check_palindrome('')\nTrue\n>>> check_palindrome('a')\nTrue\n>>> check_palindrome('aa')\nFalse\n>>> check_palindrome('aaa')\nTrue\n>>> check_palindrome('abba')\nTrue\n>>> check_palindrome('abbaaz')\nFalse\n>>> check_palindrome('abbaazabba')\nFalse\n>>> check_palindrome('abbaazabba')\nTrue\n>>> check_palindrome('abbaazabba')\nTrue\n>>> check_palindrome('abbaazabba')\nTrue\n>>> check_palindrome('abbaazabba')\nTrue\n>>> check_palindrome('abbaazabba')\nTrue\n>>> check_",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `concatenate(strings: List[str]) -> str` to solve the following problem:\nConcatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n ...\n>>> concatenate(['a', 'b', 'c', 'd'])\n'abcd'\n ...\n>>> concatenate(['a', 'b', 'c', 'd', 'e'])\n'abcde'\n ...\n>>> concatenate(['a', 'b', 'c', 'd', 'e', 'f'])\n'abcdef'\n ...\n>>> concatenate(['A', 'B', 'C'])\n'ABC'\n ...\n>>> concatenate(['A', 'B', 'C', 'D'])\n'ABCD'\n ...\n>>> concatenate(['A', 'B', 'C', 'D', 'E'])\n'ABCDE'\n ...\n>>> concatenate(['A', 'B', 'C', 'D', 'E', 'F'])\n'ABCDEF'\n ...\n>>> concatenate(['A', 'B', 'C', 'D', 'E', 'F', 'G'])\n'ABCDEF",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `concatenate(strings: List[str]) -> str` to solve the following problem:\nConcatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n \u00a0strings = ['a', 'b', 'c']\n>>> concatenate(strings)\n'abc'\nExamples:\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n>>> concatenate(['a', 'b', 'c', 'd', 'e'])\n'dabcde'\n>>> concatenate(['a', 'b', 'c', 'd', 'e'], sep=' ')\n'a b c d e '\n>>> concatenate(['a', 'b', 'c', 'd', 'e'], sep='\\n')\n'a\\nb\\nc\\nd\\ne'\n>>> concatenate(['a', 'b', 'c', 'd', 'e'], sep='\\n', end='')\n'a\\nb\\nc\\nd\\ne\\n'\n>>> concatenate(['a', 'b', 'c', 'd', 'e'], sep='\\n', end='\\n\\n')\n'a\\nb\\nc"
      ]
    },
    {
      "input": "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `filter_by_prefix(strings: List[str], prefix: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n ",
      "output": [
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `filter_by_prefix(strings: List[str], prefix: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n  s = []\n  for i in strings:\n      if i.startswith(prefix):\n          s.append(i)\n  return s\n\n\n\nWrite a Python function `filter_by_suffix(strings: List[str], suffix: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['bcd', 'cde', 'array']\n  s = []\n  for i in strings:\n      if i.endswith(suffix):\n          s.append(i)\n  return s\n",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `filter_by_prefix(strings: List[str], prefix: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n  import re\n  from typing import List\n  def check_prefix(prefix: str, strings: List[str]) -> List[str]:\n    return [s for s in strings if re.match('^' + prefix, s)]\n  print(check_prefix('a', ['a', 'b', 'c']))\n  print(check_prefix('a', ['a']))\n  print(check_prefix('a', ['b']))\n  print(check_prefix('a', ['z']))\n  print(check_prefix('', []))\n\n\n\nWrite a Python function `find_all_anagrams(string: str) -> List[str]` to solve the following problem:\nFind all the anagrams of a given string.\n>>> find_all_anagrams('anagram')\n['anagram']\n>>> find_all_anagrams('rat')\n['rat', 'rat']\n>>> find_all_anagrams('aba')",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `filter_by_prefix(strings: List[str], prefix: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n..........\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'abc')\n['abc']\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'bcd')\n['bcd', 'cde']\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'cde')\n['cde', 'array']\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'array')\n['abc', 'bcd', 'cde']\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], '')\n['abc', 'bcd', 'cde', 'array']\n>>> filter_by_prefix(['abc', 'bcd', '",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `filter_by_prefix(strings: List[str], prefix: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n  if not strings:\n        return []\n\n    prefix += 'a'\n    return list(filter(lambda s: s[:len(prefix)] == prefix, strings))\n\n\n\nWrite a Python function `get_max_and_min(lst: List[int]) -> Tuple[int, int]` to solve the following problem:\nReturn the maximum and minimum of a list of integers.\n>>> get_max_and_min([1, 2, 3])\n(3, 1)\n>>> get_max_and_min([22, 9, 13])\n(13, 22)\n>>> get_max_and_min([1, 2, 4, -1, 3])\n(-1, 4)\n>>> get_max_and_min([])\n(0, 0)\n    import math\n    return (int(math.ceil(math.sqrt(len(",
        "Write a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `filter_by_prefix(strings: List[str], prefix: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n 2\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b')\n['bcd', 'cde', 'array']\n 2\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'c')\n['cde', 'array']\n 2\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'd')\n['array']\n 2\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'e')\n[]\n 2\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'f')\n[]\n 2\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'g')\n['abc', 'bcd', 'cde', 'array']\n 2\n\n\nWrite a Python function `find_duplicates("
      ]
    }
  ],
 "mbbp": [
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to remove first and last occurrence of a given character from the string.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to remove first and last occurrence of a given character from the string.\n ##########\ndef remove_char(str, ch):\n  if str[0] == ch:\n    str = str[1:]\n  elif str[-1] == ch:\n    str = str[:-1]\n  return str\n\n##########\ndef remove_char_2(str, ch):\n  str = str.replace(ch, '')\n  return str\n\n##########\ndef remove_char_3(str, ch):\n  return str.replace(ch, '')\n\n##########\ndef remove_char_4(str, ch):\n  return str.replace(ch, '')\n\n##########\ndef remove_char_5(str, ch):\n  return str.replace(ch, '')\n\n##########\ndef remove_char_6(str, ch):\n  return str.replace(ch, '')\n\n##########\ndef remove_char_7(str, ch):\n  return str.replace(ch, '')\n\n##########\ndef remove",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to remove first and last occurrence of a given character from the string.\n ###############################################################################################\ndef remove_char(s, c):\n  if s[0] == c:\n    return s[1:]\n  elif s[-1] == c:\n    return s[:-1]\n  else:\n    return s\n###############################################################################################\n\nWrite a python function to check if the string is a palindrome.\ndef is_palindrome(s):\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n\nWrite a python function to add n to the given number.\ndef add(num, n):\n  return num + n\n\nWrite a python function to get the factorial of given number.\ndef factorial(num):\n  if num == 0:\n    return 1\n  else:\n    return num * factorial(num - 1)\n\n###############################################################################################\n#Write a function to find the given number in the given array.\ndef find_in_arr(arr, num):\n  for i in",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to remove first and last occurrence of a given character from the string.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef remove_first_last(test_str, char):\n  res = test_str.split(char)\n  res =''.join(res)\n  return (res)\n\n\nWrite a python function to replace all the occurrences of a given word with its frequency.\ndef freq_words(test_str, word):\n  res = test_str.replace(word, '1')\n  res = res.replace(word, '')\n  res = res.replace(word, '1')\n  return (res)\n\n\nWrite a function to find the frequency of a given word in a given string.\ndef freq(test_str, word):\n  return (test_str.count(word))\n\n\nWrite a function to find out all the unique words in a given string.\ndef unique_words(test_str):\n  res = test_str.split()\n  res = list(set(res))",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to remove first and last occurrence of a given character from the string.\n ############################################################################################\n\nWrite a function to check if a string has duplicates.\ndef is_unique(test_str):\n  res = list(set(test_str))\n  res =''.join(res)\n  return (res) \n\n\nWrite a python function to find first occurance of a given character from string.\ndef char_first(test_str, char):\n    res = list(filter(lambda x: x == char, test_str))\n    res =''.join(res)\n    return (res) \n\nWrite a function to find last occurance of a given character from the string.\ndef char_last(test_str, char):\n    res = list(filter(lambda x: x == char, reversed(list(test_str))))\n    res =''.join(res)\n    return (res) \n\n\n############################################################################################\nWrite a python function to find longest substring in a string.\ndef longest(test",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to remove first and last occurrence of a given character from the string.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef remove_char(test_str, char):\n  temp = test_str.split()\n  res = [ele.split(char)[0] for ele in temp]\n  res =''.join(res)\n  return (res) \n\n\n\nWrite a python function to remove the last occurrence of a given character in a string.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef remove_last_char(test_str, char):\n  res = [ele.split(char)[0] for ele in test_str.split()]\n  res =''.join(res)\n  return (res) \n\n\n\nWrite a python function to get index of first occurrence of a given character from the string.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef get_index(test_str, char):\n  return test_str.split(char).index(char) + 1\n\n\n\nWrite a python function to replace all occurrences of a"
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n ###########\ndef sort_matrix(test_list):\n  res = []\n  for ele in test_list:\n    for i in range(len(ele)):\n      res.append(ele[i])\n  res.sort(key=lambda x: sum(x))\n  return res\n\n\ndef is_sorted(test_list):\n  return test_list == sorted(test_list)\n\n\nWrite a function to find longest common substring in a string.\ndef find_substring(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) == K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function to find the number of words in a sentence.\ndef count_words(test_str):\n  temp = test_str.split()\n  res = [ele for ele in temp if ele!= '']\n  return (len",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n #####################################################################################\ndef sort_matrix(matrix):\n  temp = sorted(matrix, key=operator.itemgetter(0))\n  return temp\n#####################################################################################\n\n\n'''\n# Question 5\nWrite a python function to find if a given string is a palindrome or not.\ndef palindrome(str):\n    if str == str[::-1]:\n        return True\n    else:\n        return False\n'''\n\n'''\n# Question 6\nWrite a python function to find if a given string is a palindrome or not.\ndef palindrome(str):\n    if str == str[::-1]:\n        return True\n    else:\n        return False\n'''\n\n'''\n# Question 7\nWrite a python function to find if a given string is a palindrome or not.\ndef palindrome(str):\n    if str == str[::-1]:\n        return True\n    else:\n        return False\n'''\n\n'''\n# Question 8\nWrite a python program",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n ####################################################################################\ndef sort_matrix(test_mat):\n  # matrix_list = [test_mat]\n  # for i in range(len(test_mat)):\n  # \tmatrix_list.append(test_mat[i])\n  # matrix_list = [row for row in matrix_list if len(row)!=0]\n  # # print sorted([sum(row) for row in matrix_list])\n  # return sorted([sum(row) for row in matrix_list])\n  test_mat = sorted(test_mat, key=lambda x: sum(x))\n  return test_mat\n\n####################################################################################\ndef sort_matrix_in_descending_order(test_mat):\n  test_mat = sorted(test_mat, key=lambda x: sum(x), reverse=True)\n  return test_mat\n\n####################################################################################\ndef sort_matrix_in_ascending_order(test_mat):",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n \ndef sort_matrix(test_list): \n  for i in range(len(test_list)): \n    for j in range(len(test_list[i])): \n      for k in range(len(test_list[i])-1, i, -1): \n        if (test_list[i][j] > test_list[k][j]) : \n          temp = test_list[i][j] \n          test_list[i][j] = test_list[k][j] \n          test_list[k][j] = temp \n  return test_list\n\n\nWrite a function to count the number of times a given element appears in a list.\ndef count_occurances(test_list, ele): \n  count = 0\n  for ele in test_list: \n    if (ele == ele): \n      count += 1\n  return count\n\n\nWrite a function to convert a given list to a dict.\ndef",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n \uf0b7 1 2  3 4 5\n \uf0b7 6 7  8 9 10\n \uf0b7 11 12 13 14 15\n \uf0b7 16 17 18 19 20\n \uf0b7 21 22 23 24 25\n\n def sort_matrix(matrix):\n   m = len(matrix)\n   n = len(matrix[0])\n   res = [[0 for i in range(n+1)] for j in range(m+1)]\n   for i in range(m): \n    for j in range(n): \n     res[i+1][j+1] = res[i][j] + matrix[i][j] \n   for i in range(m): \n    for j in range(n): \n     res[i+1]["
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find the volume of a triangular prism.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find the volume of a triangular prism.\n ########\ndef volume_triangular_prism(v1, v2, v3, h):\n  result = v1 * v2 * v3\n  return result\n\n\nWrite a python function to find the perimeter of a triangle.\n#####\ndef perimeter_triangle(side1, side2, side3):\n  perimeter = side1 + side2 + side3\n  return perimeter\n\n\nWrite a python function to find the area of a triangle.\n###########\ndef area_triangle(side):\n  area = side * side * math.sqrt(math.pow(side, 2) - (side / 2))\n  return area\n\n\nWrite a python function to find the perimeter of a rectangle.\n##########\ndef perimeter_rectangle(width, height):\n  perimeter = width + height\n  return perimeter\n\n\nWrite a python function to find the area of a rectangle.\n#######\ndef area_rectangle(width",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find the volume of a triangular prism.\n \n\"\"\"\ndef volume(n):\n  if n == 1:\n    return 1\n  else:\n    return (n * (n+1) * (n+2) / 6)\n\n\nWrite a python function to find the area of a circle.\n\n\"\"\"\n\n\n\n#Write a python function to find the area of a circle.\ndef circle_area(r):\n  return 3.14 * r * r\n\n\nWrite a python function to find the perimeter of a circle.\n\n\"\"\"\ndef circle_perimeter(r):\n  return 2 * r * 3.14\n\"\"\"\n\n#Write a python function to find the area of a square.\ndef square_area(l):\n  return 1.0 * l * l\n\n\nWrite a python function to find the perimeter of a square.\n\n\"\"\"\ndef square_perimeter(l):\n  return 4 * l",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find the volume of a triangular prism.\n ###########\ndef volume(side1, side2, side3):\n  result = (side1*side2*side3)/6\n  return result\n\n###########\n\nWrite a python function to find max of a given list.\ndef max_of_list(test_list):\n  max_item = max(test_list)\n  return (max_item)\n\n\n\nWrite a python function to find the nth prime.\ndef prime_num(N):\n  primes = [2]\n  for i in range(3, N+1, 2):\n      if is_prime(i):\n          primes.append(i)\n  return (primes)\n\ndef is_prime(test_num):\n    for i in range(1, test_num+1):\n        if test_num%i == 0:\n            return False\n    return True\n\ndef prime_num(N):\n  primes = []\n  for i in range(",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find the volume of a triangular prism.\n ############\n# O(n^2) time and O(1) space\ndef tri_prism(n):\n  if n < 3:\n    return -1\n  result = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      for k in range(j+1, n):\n        result += (i*j*k) / 6\n  return result\n\n\nWrite a python function to find the number of ways to divide a number into 2^32\nnumbers.\ndef find_ways(n):\n  if n < 4:\n    return 1\n  result = 0\n  for i in range(4):\n    if i == 0 or i == 1 or i == 2:\n      result += find_ways(n >> 1)\n    else:\n      result += find_ways(n >> 2)\n  return result\n\n\nWrite a python function to find",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find the volume of a triangular prism.\n \uf0b7 a = 4, b = 3, c = 5 \uf0b7 A triangular prism is a cube with sides A, B, and C.\n\uf0b7 The volume of a triangular prism is:\n \uf0b7 2*a*(3*b + c) \uf0b7 A volume is  ((4*a)/3)*(5*b/3) + 2*(3*b/3) + 2*c/3 \uf0b7 B volume is  ((4*a)/3)*(5*b/3) + 2*(3*b/3) + 2*c/3 \uf0b7 C volume is ((4*a)/3)*(5*b/3) + 2*(3*b/3) + 2*c/3 \ndef volume_triangular_prism(a, b, c):\n    result ="
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n ###############################################################################################\ndef is_valid_name(name):\n  valid_name = re.search(\"^[a-zA-Z_]+$\", name)\n  return valid_name\n###############################################################################################\n\n\nWrite a function that returns true if the given string is a palindrome, and false otherwise.\ndef is_palindrome(string):\n  string = string.lower()\n  if len(string) < 2:\n    return False\n  else:\n    for i in range(len(string)//2):\n      if string[i]!= string[-(i+1)]:\n        return False\n    return True\n###############################################################################################\n\n\nWrite a function to remove the vowels from the given string.\ndef remove_vowels(s):\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  a = [i for i in s if i not in vowels]\n  return a\n###############################################################################################\n\n\nWrite a function which returns",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n ##################################################################################\ndef is_valid(str):\n  if (str.isupper()):\n    return True\n  else:\n    return False\n\n\nWrite a function to find the length of the longest substring which contains all lowercase letters.\ndef longest_substring(s):\n  longest = 0\n  for i in range(len(s)):\n    for j in range(i, len(s)-1):\n      #print s[i:j+1]\n      if s[i:j+1].islower():\n        count = 1\n        for k in range(i, j+1):\n          count = count + 1\n          if count > longest:\n            longest = count\n    #print longest\n  return longest\n\n\n##################################################################################\n# Write a function that takes a string as input and returns the number of words in the string.\n# def word_count(str):\n#   temp = str.split()\n#   count = 0\n#",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n ~~~~~~~~~~~~~~~~~\ndef is_valid(test_str):\n  valid = False\n  if (test_str.count('_') == len(test_str)):\n    valid = True\n  return valid\n\n\nWrite a function which will return true if the string is palindrome.\ndef palindrome(test_str):\n  temp = test_str.lower()\n  temp = temp.split()\n  temp = list(filter(lambda x: x!= '', temp))\n  temp = ''.join(temp)\n  return (temp == test_str)\n\n\nWrite a function which will return the sum of a list of integers.\ndef sum_list(test_list):\n  res = sum(test_list)\n  return res\n\n\nWrite a function which will return the max of a list of integers.\ndef max_of_list(test_list):\n  res = max(test_list)\n  return res\n\n\nWrite a function which will return the min",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n ################################################################################\ndef is_valid(test_str):\n\ndef is_valid(test_str):\n    flag = True\n    for i in range(0, len(test_str)):\n        if flag:\n            if test_str[i] == '_':\n                flag = False\n            else:\n                if test_str[i] not in string.ascii_lowercase:\n                    flag = False\n    return flag\n\n################################################################################\n\n################################################################################\nclass Solution:\n    def isAnagram(self, s, t):\n        if len(s)!= len(t):\n            return False\n        a, b = s, t\n        a, b = sorted(a), sorted(b)\n        return a == b\n\n################################################################################\n\n################################################################################\nclass Solution:\n    def isAnagram(self, s, t):\n        s_set = set(s)\n        t_set = set(t)\n        return s_set == t_set\n\n################################################################################\n",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n ###########\ndef is_unique(word):\n  res = False\n  if word.count('_') == len(word):\n    res = True\n  return(res)\n\n\nWrite a function that splits a string and returns a list containing the words.\ndef split_string(test_str):\n  temp = test_str.split()\n  res = [ele for ele in temp if ele!= '']\n  return (res) \n\nWrite a function to remove the word with the given index and return the string after that.\ndef remove_word(test_str, index):\n  res = test_str.replace(test_str[index], '')\n  return (res) \n\nWrite a function to remove the word with the given index and return the string after that.\ndef remove_word(test_str, index):\n  temp = test_str.split()\n  temp.pop(index)\n  res =''.join(temp)\n  return"
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function that returns the perimeter of a square given its side length as input.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function that returns the perimeter of a square given its side length as input.\n #############################################################################\ndef perimeter(side_length):\n  return (4 * side_length) + (4 * side_length + 1)\n  \n#############################################################################\ndef perimeter1(side_length):\n  return (4 * (side_length * side_length)) + (4 * side_length) + (4 * side_length + 1)\n\n\nWrite a function that returns the area of a rectangle given its length and width as input.\n#############################################################################\ndef area(side_length, width):\n  return (side_length * width)\n\n#############################################################################\ndef area1(side_length, width):\n  return (side_length * width * 2)\n\n#############################################################################\ndef area2(side_length, width):\n  return (side_length * width * 4)\n\n#############################################################################\ndef area3(side_length, width):\n  return (side_length * width * 6",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function that returns the perimeter of a square given its side length as input.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef perimeter(input):\n    perimeter = 4 * input\n    return perimeter\n\n\nWrite a function that returns the area of a square given its side length as input.\ndef area(input):\n    area = input * input\n    return area\n\n\nWrite a function that returns the perimeter and area of a rectangle given its length and width as input.\ndef rectangle(input1, input2):\n    rectangle = input1 * input2\n    return rectangle\n\n\nWrite a function that returns the perimeter of a triangle given its base length and height as input.\ndef triangle(input1, input2):\n    triangle = input1 * input2\n    return triangle\n\n\nWrite a function that returns the perimeter of a pentagon given its length as input.\ndef pentagon(input):\n    pentagon = input * 5\n    return pentagon\n\n\nWrite a function that returns the perimeter of",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function that returns the perimeter of a square given its side length as input.\n ###########\ndef perimeter(side):\n    perimeter = 4 * (side**2)\n    return perimeter\n###########\n\nWrite a function to find the surface area of a triangle given the base and height as input.\ndef surface_area(base,height): \n    area = base * height / 2\n    return area\n\nWrite a function to find the area of given a triangle given the sides as inputs.\ndef area(a,b,c):\n    area = (a * b) / 2\n    return area \n\nWrite a function to find the area of a right triangle given the lengths as inputs.\ndef right_area(a,b):\n    area = (a * b) / 2\n    return area \n\nWrite a function to find the perimeter of circle given the radius as input.\ndef circle_perimeter(radius):\n    perimeter = 2 * (radius)**2\n    return perimeter\n\nWrite",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function that returns the perimeter of a square given its side length as input.\n  Input: Side Length\n  Output: Perimeter\n\"\"\"\ndef perimeter(side):\n  perimeter = side * (side + 1)/2\n  return perimeter\n\n\nWrite a function to compute area of a rectangle given its dimensions as input.\nInput: length, width\nOutput: Area\n\"\"\"\ndef area(length, width):\n  area = length * width\n  return area\n\n\nWrite a function to print all the permutations of a given list.\ndef permute(test_list):\n  temp = list(itertools.permutations(test_list))\n  res = [ele for ele in temp]\n  res =''.join(res)\n  return (res)\n\n\nWrite a function to calculate the maximum of a list of numbers.\ndef max_list(test_list):\n  test_list = sorted(test_list)\n  maxi = max(test_list)\n  return maxi\n\n\nWrite a function to calculate",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function that returns the perimeter of a square given its side length as input.\n \ndef perimeter(side):\n  return (4 * side)\n\n\"\"\"\n\nclass Solution:\n    def solve(self, s):\n        # Write your code here\n        # return len(remove_length(s, 3))\n        return len(remove_length(s,5))\n\n\"\"\"\n\nclass Solution:\n    def solve(self, s):\n        # Write your code here\n        return len(remove_length(s, 4))\n\n\"\"\"\n\nclass Solution:\n    def solve(self, s):\n        # Write your code here\n        return len(remove_length(s, 6))\n\n\"\"\"\n\nclass Solution:\n    def solve(self, s):\n        # Write your code here\n        return len(remove_length(s, 7))\n\n\"\"\"\n\nclass Solution:\n    def solve(self, s):\n        # Write your code here\n        return len(remove_length(s, "
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to remove characters from the first string which are present in the second string.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to remove characters from the first string which are present in the second string.\n #########\ndef remove_chars(str1, str2):\n  temp = str1.split()\n  res = [ele for ele in temp if ele not in str2]\n  res =''.join(res)\n  return (res) \n\n\n\n\nWrite a function to get the first k-th position of the substring in a given string.\ndef kth_substring(str1, k):\n  l = len(str1)\n  l1 = l-k\n  res = str1[0:l1]\n  return (res) \n\n\nWrite a python function to check if a given string contains any of the given characters.\ndef contains_any_of(str1, char_list):\n  res = False\n  for ele in char_list:\n    if ele in str1:\n      res = True\n  return (res) \n\n\nWrite a function to check if a given string contains any of the given characters.\ndef contains_",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to remove characters from the first string which are present in the second string.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a function to remove characters from a given string which are present in a given list of characters.\n\"\"\"\n\ndef remove_character(string, characters):\n  new_string = string\n  for c in characters:\n    new_string = new_string.replace(c, '')\n  return new_string\n\n\"\"\"Write a function which given a string returns a string with all the characters from the input string in reverse order.\ndef reverse_string(test_str):\n  new_string = ''\n  for i in range(len(test_str)):\n    new_string += test_str[len(test_str) - i - 1]\n  return new_string \n\"\"\"\n\n\"\"\"Write a function which given a string and a character returns the index of the first occurrence of the character in the input string.\"\"\"\ndef index_of_char(test_str, char):\n  return test_str.find(",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to remove characters from the first string which are present in the second string.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef remove_chars(test_str, test_str2):\n  for element in test_str2:\n    test_str = test_str.replace(element, '')\n  return (test_str) \n\n\nWrite a python function to find whether a string contains a substring.\ndef check_substring(test_str, test_str2):\n  if test_str in test_str2:\n    return True\n  else:\n    return False\n\n\nWrite a python function to find the position of first occurrence of substring in a string.\ndef position_of_substring(test_str, test_str2):\n  pos = test_str2.index(test_str)\n  return pos\n\n\nWrite a python function to find the last occurrence of substring in a string.\ndef last_position_of_substring(test_str, test_str2):\n  pos = test_str2.rfind(test",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to remove characters from the first string which are present in the second string.\n ########\ndef remove_substring(str1,str2):\n  for i in range(len(str2)):\n    if str2[i] in str1:\n      str1 = str1[:i] + str1[i+1:]\n  return str1\n\n\nWrite a function to remove all the duplicate characters in the given string.\ndef remove_dup(str):\n  dup = ''\n  for i in range(len(str)):\n    if str[i] not in dup:\n      dup = dup + str[i]\n  return (dup)\n\n\nWrite a python function to find a substring in a given string.\ndef find_substring(str,sub):\n  for i in range(len(str)):\n    if str[i] == sub[0]:\n      if str[i:i+len(sub)] == sub:\n        return str[i:i+len(sub)]\n  return False \n\n\nWrite a python function",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to remove characters from the first string which are present in the second string.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef remove_chars(test_str,char):\n  if(len(char) == 0):\n    return test_str\n  else:\n    if(len(test_str) == 0):\n      return \"\"\n    if(char == test_str[0]):\n      result = test_str[1:]\n      return remove_chars(result, char)\n    else:\n      result = test_str[0:len(test_str) - len(char)]\n      return remove_chars(result, char)\n\n\nWrite a function to remove all the spaces from a string.\ndef remove_all_spaces(test_str):\n  return ''.join( [i for i in test_str if i!=''] ) \n\n\nWrite a function to remove all the special characters from a string.\ndef remove_special_chars(test_str):\n  return ''.join( [i for i in test_str if"
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find whether a given array of integers contains any duplicate element.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find whether a given array of integers contains any duplicate element.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef contains_duplicate(nums):\n  seen = []\n  for i in nums:\n      if i in seen:\n          return True\n      else:\n          seen.append(i)\n  return False\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWrite a function to sort the given list in ascending order.\ndef sort_in_ascending(nums):\n  nums.sort()\n  return nums\n\nWrite a function to sort the given list in descending order.\ndef sort_in_descending(nums):\n  nums.sort(reverse=True)\n  return nums\n\nWrite a function to sort the given list in ascending order.\ndef sort_in_ascending_and_descending(nums):\n  nums.sort(reverse=True)\n  nums.sort()\n  return nums\n\nWrite a function to sort the given list in ascending order.\ndef sort_in_descending_ascent(nums):\n  nums.sort(reverse=",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find whether a given array of integers contains any duplicate element.\n Equality is considered as having the same value.\ndef is_duplicate(nums):\n  nums_set = set(nums)\n  if len(nums_set) == len(nums):\n    return False\n  else:\n    return True\n\n\nWrite a python function to find the index of the first occurrence of an element in a list of tuples.\ndef first_occur(nums, x):\n pos = 0\n for i in nums:\n    if i == x:\n        return pos\n    pos += 1\n return -1 \n\n\nWrite a python function to find whether a given array of integers contains any negative elements.\n def has_neg_ele(nums):\n for ele in nums:\n if ele < 0:\n     return True\n return False\n\n\nWrite a python function which given a string s, returns all the palindromic substrings in it.\ndef palindromic(s):\n res = []\n for i in",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find whether a given array of integers contains any duplicate element.\n Hint: Use set to keep track of elements.\ndef contains_duplicates(nums):\n  return any(x in nums for x in nums)\n\n\nWrite a python function to find the minimum of three given integers.\ndef min_three(num1, num2, num3):\n  return min(min(num1, num2), num3)\n\n\nWrite a function to find the sum of all the elements in an array of integers.\ndef sum_array(nums):\n  return sum(nums)\n\nWrite a python function to find the length of the longest substring in a given string.\ndef find_max(test_str):\n  max_len = 0\n  temp = test_str.split()\n  for i in range(len(temp)):\n    if len(temp[i]) > max_len:\n      max_len = len(temp[i])\n  return (max_len)\n\n\nWrite a python function",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find whether a given array of integers contains any duplicate element.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef contains_dup(array):\n    return len(set(array))!= len(array)\n\nWrite a function to find the length of the longest common substring in a given string.\ndef longest_common_substring(str1, str2):\n    pass\n\nWrite a function to find the number of times a given string occurs in a given string.\ndef count_occurences(str1, str2):\n    pass\n\nWrite a python function to sort an array of strings in lexicographical order:\ndef sort_strings(array):\n    pass\n\nWrite a function to find the largest palindrome made from the product of two n-digit numbers.\ndef largest_palindrome(n):\n    pass\n\nWrite a function to check whether a given string is a valid number.\ndef is_valid_number(str):\n    pass\n\n\nWrite a function to check whether a given string is a valid email",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find whether a given array of integers contains any duplicate element.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef duplicate_ele(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                return True\n    return False\n\nWrite a function to find the sum of all the elements in a given array of integers.\ndef sum_ele(nums):\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    return sum\n\nWrite a function to find the middle element of the given array of integers.\ndef middle_ele(nums):\n    n = len(nums)\n    return nums[n//2]\n\nWrite a function to find the average of all the elements in the given array of integers.\ndef avg_ele(nums):\n    return sum_ele(nums)/(len(nums))\n\nWrite a function to find the maximum element in the"
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to check if the given number is woodball or not.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to check if the given number is woodball or not.\n 100% Accepted.\n\"\"\"\n\n# def wood_Ball(test_num):\n#   if test_num <= 15:\n#     return True\n#   else:\n#     return False\n\ndef wood_Ball(test_num):\n  if test_num <= 15:\n    return True\n  else:\n    return False\n\n\ndef wood_Ball(test_num):\n  if test_num <= 15:\n    return True\n  else:\n    return False\n\n\n# def wood_Ball(n):\n#   if n <= 15:\n#     return True\n#   else:\n#     return False\n\n# n = int(input('Enter a number: '))\n# print(n, wood_Ball(n))\n\n\"\"\"\nTest Cases:\n\nInput: 10\nOutput: True\n\nInput: 10",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to check if the given number is woodball or not.\n \ndef is_woodball(nums):\n    if(nums == 6 or nums == 9 or nums == 10 or nums == 55 or nums == 69):\n        return True\n    else:\n        return False\n\n\nWrite a function to check if the given number is woodball or not.\ndef is_woodball(nums):\n    if(nums == 6 or nums == 9 or nums == 10 or nums == 55 or nums == 69):\n        return True\n    else:\n        return False\n\n\nWrite a python program to find the length of the longest word in a given string.\ndef longest_word(test_str):\n  return max(test_str.split(), key=len) \n\n\nWrite a python program to find the longest word in a given string.\ndef longest_word(test_str):\n    return max(test_str.split(), key=len)",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to check if the given number is woodball or not.\n ##########\ndef is_wood(num):\n  if num % 3 == 0 or num % 5 == 0:\n    return True\n  else:\n    return False\n\n\nWrite a function to check if the given number is woodball or not.\n##########\ndef is_wood(num):\n  if num % 3 == 0 or num % 5 == 0:\n    return True\n  else:\n    return False\n\nWrite a function which finds the middle element of a list.\ndef find_middle(nums):\n  return (nums[len(nums) / 2])\n\n\nWrite a function which returns true if the given number is a palindrome or not.\ndef is_palindrome(num):\n  return str(num) == str(num)[::-1]\n\n\nWrite a function which returns true if the given number is a palindrome or not.\ndef is_palindrome(num):\n  return (str",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to check if the given number is woodball or not.\n 1) Divide the given number by 2\n2) Check if the result is divisible by 3\n3) Check if the result is divisible by 5\n4) else return False\ndef wood_ball(n): \n  res = int(n/2)\n  if (res%3==0 and res%5==0): return True\n  else: return False \n\n\n\nWrite a function to check if the given number is prime or not.\n1) If the number is divisible by 1 or 2 then it is prime\n2) If the number is divisible by 3 then it is prime\n3) If the number is divisible by 5 then it is prime\n4) else it is not prime\ndef prime(n): \n  if (n==1 or n==2): return True\n  else: return False  \n\n\n\nWrite a function to check if the given number is a prime number or not.\n1) If",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to check if the given number is woodball or not.\n #############################################################################\ndef is_woodball(n):\n  if n == 0:\n    return True\n  elif n == 1:\n    return False\n  else:\n    return True\n\n\nWrite a function to check if the given number is woodball or not.\ndef is_woodball_2(n):\n  if n <= 5:\n    return True\n  else:\n    return False\n\n\nWrite a function to check if the given number is woodball or not.\ndef is_woodball_3(n):\n  if n == 0:\n    return True\n  elif n == 1 or n == 2 or n == 3 or n == 4:\n    return False\n  else:\n    return True\n\n\nWrite a function to check if the given number is woodball or not.\nfrom math import sqrt\ndef is_woodball_4(n):\n  if n == 0:\n    return True\n  elif n =="
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check if a given number is one less than twice its reverse.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check if a given number is one less than twice its reverse.\n ###################################################################################\n\nWrite a python function to check if given number is two given numbers.\ndef twos_less_than_twice(n1, n2):\n  return n1 >= 2 * n2\n\n\nWrite a python function to check if given number is one greater than twice its reverse.\ndef twos_greater_than_twice(n1, n2):\n  return n1 < 2 * n2\n\n\nWrite a python function to check for prime numbers in given range.\ndef is_prime(n):\n  if n <= 1:\n      return False\n  for i in range(2, n):\n      if n % i == 0:\n          return False\n  return True\n\n\nWrite a python function to check for prime numbers in given range and return the number of primes.\ndef find_prime(n):\n  is_prime_num = []\n  if n <= 1:\n      return 0\n  for i",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check if a given number is one less than twice its reverse.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef is_one_less(n):\n    if n > 1:\n      if n % 2 == 0:\n        n = n - 1\n      else:\n        n = n - 2\n    return n\n\n\nWrite a python function to find the length of the shortest palindrome which is a string of the given length.\ndef shortest_palindrome(test_str,test_str_length):\n  res = len(test_str)\n  for i in range(res):\n    for j in range(res):\n      if i == j:\n        continue\n      else:\n        if test_str[i:j+1] == test_str[j:i+1]:\n          temp_str = test_str[i:j+1]\n          temp_str_length = len(temp_str)\n          if temp_str_length < res:\n            res = temp_str_length",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check if a given number is one less than twice its reverse.\n 1. 2/2 = 1 \n2. 2/2 = 1/2\n3. 2/2 = 2/2\n4. 2/2 = 2\n5. 2/2 = 1/2\n6. 2/2 = 1\n7. 2/2 = 1/2\n8. 2/2 = 2\n9. 2/2 = 2\n10. 2/2 = 1/2\n11. 2/2 = 1/2\n12. 2/2 = 2\n13. 2/2 = 2\n14. 2/2 = 1/2\n15. 2/2 = 1/2\n16. 2/2 = 2\n17. 2/2 = 2\n18. 2/",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check if a given number is one less than twice its reverse.\n \ndef rev_one(testNum):\n    if testNum == 1:\n        return testNum + 2\n    else:\n        return rev_one(testNum - 2)\n\nWrite a function to check if a given number is one less than twice its reverse.\n\ndef rev_one(testNum):\n    if testNum == 1:\n        return testNum - 1\n    else:\n        return rev_one(testNum - 1)\n\nWrite a function to check if a given number is one less than twice its reverse.\n\ndef rev_one(testNum):\n    if testNum == 1:\n        return testNum + 1\n    else:\n        return rev_one(testNum - 1)\n\n\nWrite a python function to check if a given number is one less than twice its reverse.\n\ndef rev_one(testNum):\n    if testNum == 1:\n        return testNum +",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check if a given number is one less than twice its reverse.\n ########\ndef is_one_less_than_twice_reverse(n):\n  if n % 2 == 0 and n > 1:\n    return True \n  else:\n    return False \n########\n\nWrite a python function to check if given number is one less than the sum of its reverse.\ndef is_one_less_than_sum_reverse(n):\n  if n % 2 == 0 and n > 1:\n    return True \n  else:\n    return False \n########\n\n\n\nWrite a python function to count the number of substrings in a given string.\ndef count_substring(test_str):\n    temp = test_str.split()\n    res = 0\n    for ele in temp:\n        if ele.count(ele) > 1:\n            res += 1\n    return (res)\n\nWrite a Python function to find the first occurrence of a substring in a given string.\ndef find"
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find the largest number that can be formed with the given list of digits.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find the largest number that can be formed with the given list of digits.\n ###########\ndef largest_digit(digits):\n  if digits == []:\n    return 1\n  elif len(digits) == 1:\n    if digits[0] == 1:\n      return 1\n    else:\n      return 0\n  else:\n    res = 0\n    for digit in digits:\n      res += largest_digit(digits[digits.index(digit):])\n    return res\n###########\ndef largest_digit(digits):\n  if digits == []:\n    return 1\n  elif len(digits) == 1:\n    if digits[0] == 1:\n      return 1\n    else:\n      return 0\n  else:\n    res = 0\n    for digit in digits:\n      res += largest_digit(digits[digits.index(digit):])\n    return res\n\n\nWrite a simple function to find out the index of the largest number in given list.\ndef find_largest(lst):\n  lst.sort()\n  return (",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find the largest number that can be formed with the given list of digits.\n #############################################################################################\ndef largest_number(digits):\n  # if len(digits) == 0:\n  #   print ('Length 0')\n  #   return\n  # if len(digits) == 1:\n  #   print ('Length 1')\n  #   return\n  # if len(digits) == 2:\n  #   print ('Length 2')\n  #   return\n  # if len(digits) == 3:\n  #   print ('Length 3')\n  #   return\n  # if len(digits) == 4:\n  #   print ('Length 4')\n  #   return\n  # if len(digits) == 5:\n  #   print ('Length 5')\n  #   return\n  # if len(digits) == 6:\n  #   print ('Length 6')\n  #   return\n  # if len(digits) == 7:\n  #   print('Length 7')\n  #",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find the largest number that can be formed with the given list of digits.\n #################################################################################\ndef largest_digit_list(nums):\n  # if len(nums) == 0:\n    # return 0\n  nums = sorted(nums)\n  result = nums[0]\n  for i in range(1, len(nums)):\n    result = max(result, nums[i])\n  return result\n#################################################################################\n\nWrite a python function to find the largest palindrome number.\ndef largest_palindrome(nums):\n  nums = sorted(nums)\n  result = nums[0]\n  for i in range(1, len(nums)):\n    a = nums[i]\n    b = nums[len(nums) - i - 1]\n    if a*b > result:\n      result = a*b\n  return result\n#################################################################################\n\nWrite a python function to find the sum of two numbers.\ndef sum_of_nums(num1, num2):\n  return num1 + num2\n\n################################################################################",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find the largest number that can be formed with the given list of digits.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef largest_number(nums):\n    max_num = 0\n    for digit in nums:\n        max_num = max(max_num, digit)\n    return max_num\n\n\n\n\nWrite a python function to find the largest number that can be formed with the given list of digits.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef largest_number(nums):\n    max_num = 0\n    for digit in nums:\n        max_num = max(max_num, digit)\n    return max_num\n\n\nWrite a python function to find the largest number that can be formed with the given list of digits.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef largest_number(nums):\n    max_num = max(nums)\n    return max_num\n\n\nWrite a python function to find the largest number that can be formed with the given list of digits.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef largest_",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find the largest number that can be formed with the given list of digits.\n #####################################################################################\ndef largest_digit(digits):\n  result = []\n  for i in range(len(digits)):\n    result.append(pow(10, i))\n  result = max(result)\n  return (result)\n\n\nWrite a function to find the largest number that can be formed with the given list of digits.\ndef largest_digit(digits):\n  return max([pow(10, i) for i in range(len(digits))])\n\n\nWrite a function to create a dictionary of numbers and their powers.\ndef power_dict(digits):\n  result = []\n  for i in range(len(digits)):\n    result.append(pow(10, i))\n  return dict(result)\n\n\nWrite a function to find the largest number that can be formed with the given list of digits.\ndef largest_digit(digits):\n  return max([pow(10, i) for i in range(len(digits"
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the given two integers have opposite sign or not.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the given two integers have opposite sign or not.\n #####################################################################################\ndef op_sign(num1, num2):\n    if num1 < 0 and num2 > 0:\n        return 1\n    elif num1 > 0 and num2 < 0:\n        return 1\n    elif num1 == 0 and num2 == 0:\n        return 1\n    else:\n        return -1\n\n\n#####################################################################################\nWrite a python function to find gcd and lcm of the given numbers.\ndef gcd_lcm(num1, num2):\n    gcd = math.gcd(num1, num2)\n    lcm = math.lcm(num1, num2)\n    return (gcd, lcm)\n\n\nWrite a python function to find the sum of all the elements of the given list.\ndef sum_list(test_list):\n    res = sum([num for num in test_list])\n    return (res) \n\n\n#####################################################################################\nWrite a python function",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the given two integers have opposite sign or not.\n ~~~~~~~~~~~~~~~~~~~~~\ndef neg_sign(a, b):\n  return (a * b) > 0\n\ndef neg_sign(a, b):\n  return not a * b < 0\n\ndef neg_sign(a, b):\n  return a * b < 0\n\ndef neg_sign(a, b):\n  return (a * b) < 0\n\ndef neg_sign(a, b):\n  return a * b < 0\n\ndef neg_sign(a, b):\n  return abs(a) * abs(b) < 0\n\ndef neg_sign(a, b):\n  return a * b < 0\n\ndef neg_sign(a, b):\n  return a * b < 0\n\ndef neg_sign(a, b):\n  return a * b < 0\n\ndef neg_sign(a, b):\n  return a * b",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the given two integers have opposite sign or not.\n ########################################################################################\ndef sign_op(x,y):\n  if (x > 0 and y > 0):\n    return 1\n  elif (x < 0 and y < 0):\n    return -1\n  elif (x == 0 and y == 0):\n    return 0\n  else:\n    return -1\n  \n\n########################################################################################\ndef make_list_copy(arr):\n  temp = arr[:]\n  return temp\n\n\n########################################################################################\n# function to check whether given array is sorted or not\ndef is_sorted(arr):\n  for i in range(1, len(arr)):\n    if arr[i] < arr[i-1]:\n      return False\n  return True\n\n\n########################################################################################\n# function to compute the sum of array\ndef sum_arr(arr):\n  result = 0\n  for i in range(len(arr)):\n    result += arr[i]\n  return result\n\n\n########################################################################################\n# function",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the given two integers have opposite sign or not.\n ################################################################################\ndef opposite(a, b):\n    return not (a < 0 and b > 0) or not (a > 0 and b < 0)\n\n\nWrite a python function to find the largest element in the given list.\ndef max_element(test_list):\n  res = max(test_list)\n  return res\n\n\nWrite a python function to find the sum of all the elements in the given list.\ndef sum_of_element(test_list):\n  return sum(test_list)\n\n\nWrite a python function to print the length of the given string.\ndef length_of_string(test_str):\n  return len(test_str)\n\n\nWrite a python function to convert given string into a list of strings.\ndef string_to_list(test_str):\n  return test_str.split()\n\n\nWrite a python function to find the longest common prefix in the given list",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the given two integers have opposite sign or not.\n Equality means if they are the same, not zero.\n def check_sign(num1, num2):\n    if (num1 == 0 or num2 == 0):\n        return True\n    elif (num1 < 0 and num2 > 0 or num1 > 0 and num2 < 0):\n        return False\n    else:\n        return True \n\n\nWrite a python function to check whether the given two integers have opposite sign or not.\n Equality means if they are the same, not zero.\n def check_sign(num1, num2):\n    if (num1 == 0 or num2 == 0):\n        return True\n    elif (num1 < 0 and num2 > 0 or num1 > 0 and num2 < 0):\n        return True\n    else:\n        return False \n\n\nWrite a function to check whether the given two integers have opposite sign or not.\n Equality means if they are"
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the nth octagonal number.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the nth octagonal number.\n ##########\n# 1 : 1234\n# 2 : 6372\n# 3 : 5297\n# 4 : 4285\ndef octagonal_Number(n):\n  if n == 1:\n    return (1234)\n  elif n == 2:\n    return (6372)\n  elif n == 3:\n    return (5297)\n  elif n == 4:\n    return (4285)\n  else:\n    return (0) \n\n\nWrite a function to find the nth prime number.\n##########\n# 1\n# 2\n# 3\n# 4\ndef prime_Number(n): \n  if n == 1:\n    return (2)\n  elif n == 2:\n    return (3)\n  elif n == 3:\n    return (5)\n  elif n == 4:",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the nth octagonal number.\n 8.345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\ndef nth_oct(n):\n    return (8.0 * n * n + 12.0 * n * n + 20.0 * n + 28.0) / 28.0\n \nWrite a function which given a list of lists returns a list of the sum of the elements in the lists.\ndef sum_list(test_list):\n  res = [sum(ele) for ele in test_list]\n  return res\n\nWrite a function to find the sum of",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the nth octagonal number.\n  https://www.hackerrank.com/challenges/octagonal-number/problem?h_r=internal-search\ndef octagonal_number(n): \n    nums = [1, 8, 6, 2, 5, 4, 3, 7]\n    return nums[n] \n\n\nWrite a function to get the first permutation of a given list of numbers.\ndef first_permutation(nums):\n    perm = []\n    for i in range(len(nums)):\n        for j in range(i,len(nums)):\n            if nums[i] > nums[j]:\n                perm.append(nums[i])\n                perm.append(nums[j])\n                break\n    for i in range(len(nums)):\n        if int(perm[i]) > len(nums):\n            perm.pop(i)\n    return perm\n\n\nWrite a function to print all permutations of a given list of numbers",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the nth octagonal number.\n \ndef oct_Number(n): \n  return 0 \n\nWrite a function to find the nth triangle number.\ndef triangle_Number(n): \n  return 0 \n\nWrite a function to find the nth prime number.\ndef prime_Number(n):\n  return 0 \n\nWrite a python function to find the nth Fibonacci number.\ndef fib_Number(n): \n  return 0 \n\nWrite a python function to find the nth Fibonacci number.\ndef fib_Number(n): \n  return 0 \n\nWrite a python function to find the nth Fibonacci number.\ndef fib_Number(n): \n  return 0 \n\nWrite a python function to find the nth Fibonacci number.\ndef fib_Number(n): \n  return 0 \n\nWrite a python function to find the nth Fibonacci number.\ndef fib_Number(n): \n  return 0 \n\nWrite a python function to find the nth",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the nth octagonal number.\n #############################################################################################\ndef n_th_octagonal(n):\n  if(n%2==0):\n    print (n,\"^\",n,\"=\",n*(3**n)/4)\n  else:\n    print (n,\"^\",n,\"=\",n*(3**n)/2)\n\n\n#############################################################################################\n\nWrite a function to find the nth prime number.\ndef nthprime(n):\n    primes = [2, 3]\n    for i in range(n):\n        primes.append(primes[-1] + 2)\n    print (primes)\n\n\n#############################################################################################\n\nWrite a function to find number of divisors of a number.\ndef divisors(num):\n  count = 0\n  for num in range(1, num+1):\n    if(num % 2 == 0):\n      count = count + 1\n    if(num % 3 == 0):\n      count = count + "
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n ########\ndef sub_str(s, k):\n    res = []\n    for i in range(len(s)):\n        if sum(map(int, str(s[i]))) == k:\n            res.append(s[i])\n    return res\n\ndef sub_str_count(s, k):\n    res = 0\n    for i in range(len(s)):\n        if sum(map(int, str(s[i]))) == k:\n            res += 1\n    return res\n",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef count_substring(input_string, digit_sum):\n  \"\"\"\n  >>> input_string = \"12345\"\n  >>> digit_sum = 4\n  >>> count_substring(input_string, digit_sum)\n  2\n  \"\"\"\n  count = 0\n  for i in range(len(input_string)):\n    for j in range(i+1, len(input_string)+1):\n      cur_sum = 0\n      for k in range(i, j+1):\n        cur_sum += input_string[k]\n      if cur_sum == digit_sum:\n        count += 1\n  return count\n\n\nWrite a python function to find the index of a given substring in given string.\ndef find_substring(input_string, substring):\n  \"\"\"\n  >>> input_string = \"abcd\"\n  >>> substring = \"bc\"\n  >>> find_substring(input_",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n #########\n# 1234\n# 5678\ndef count_substring(test_str):\n  count = 0\n  for i in range(0, len(test_str)):\n    for j in range(i+1, len(test_str)):\n      sum_str = test_str[i:j+1]\n      res = int(''.join(map(str,map(int,sum_str))))\n      count += res\n  return (count)\n\n\nWrite a function to count the number of occurrences for specific string in a given string.\ndef count_str(test_str, str_to_count):\n  count = 0\n  for i in range(0, len(test_str)):\n    if test_str[i] == str_to_count:\n      count = count + 1\n  return (count)\n\n\nWrite a function to find the nth occurrence of a word in a given",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n ################################################################################\ndef count_digits_substrings(test_string):\n  result = []\n  for i in range(0, len(test_string)):\n    result.append(sum(map(int, test_string[i:])))\n  return result\n\n\nWrite a python function to find all substrings of size 2.\ndef find_substrings(test_string):\n  result = []\n  for i in range(0, len(test_string) - 1):\n    for j in range(i+1, len(test_string) - 1):\n      if test_string[i:j+1] == test_string[i:j+2]:\n        result.append(test_string[i:j+1])\n  return result\n\n\nWrite a python function to find all substrings of size 3.\ndef find_substrings(test_string):\n  result = []\n  for i in range(",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n ###############################################################################################\ndef countSubstr(string):\n  if string == '':\n    return 0\n  if len(string) == 1:\n    return 1\n  return countSubstr(string[1:]) + countSubstr(string[0:-1]) + countSubstr(string[1:])\n\n###############################################################################################\n\nWrite a function to remove all the duplicate digits from a given number.\ndef remove_dup_digit(num):\n  if num == 0:\n    return 0\n  if num == 1:\n    return 1\n  return remove_dup_digit(num // 10) + num % 10\n\n###############################################################################################\n\nWrite a python function to convert a given string to a number.\ndef str_to_num(string):\n  if string == '0':\n    return 0\n  elif string == '1':\n    return 1\n  elif string == '2':\n    return 2\n  elif"
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find smallest number in a list.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find smallest number in a list.\n ############\ndef min_num(nums):\n  result = min(nums)\n  return result\n############\n\nWrite a python function to find the number of times the number '2' is present in a given list.\ndef bell_number(nums):\n  count = 0\n  for num in nums:\n      if num == 2:\n          count += 1\n  return count\n\nWrite a python function to find the number of times the number '5' and '7' are present in a given list.\ndef bell_number(nums):\n  count = 0\n  for num in nums:\n      if num == 5:\n          count += 1\n      elif num == 7:\n          count += 1\n  return count\n\n\nWrite a python function to find the number of times the number '10' is present in a given list.\ndef bell_number(nums):\n  count = 0\n  for num in nums:",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find smallest number in a list.\n ###############################################################################################\ndef min(test_list):\n  min_ = min(test_list)\n  return (min_) \n\n\n\nWrite a python function to get the greatest number in a list.\n ###############################################################################################\ndef max(test_list):\n  max_ = max(test_list)\n  return (max_) \n\n\nWrite a python function to find index of a number in a list.\n ###############################################################################################\ndef find_index(test_list, num):\n  res = [i for i, x in enumerate(test_list) if x == num]\n  res = res[0]\n  return (res) \n\n\n###############################################################################################\ndef find_all_indexes(test_list, num):\n  res = [i for i, x in enumerate(test_list) if x == num]\n  return res\n\n\nWrite a python function to find the index of the first occurrence of a number in a list.\n ################################################################################",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find smallest number in a list.\n ################################################################################\ndef min(nums):\n  min_num = nums[0]\n  for num in nums:\n    if num < min_num:\n      min_num = num\n  return min_num\n\n\nWrite a python function to find the second smallest number in a list.\n ################################################################################\ndef second_min(nums):\n  min_num = nums[0]\n  min_index = 0\n  for i in range(0, len(nums)):\n    if nums[i] < min_num:\n      min_num = nums[i]\n      min_index = i\n    elif nums[i] == min_num:\n      if i == 0 or nums[i-1] > nums[i]:\n        min_index = i\n  return min_index\n\n\nWrite a python function to find the second smallest number in a list.\n ################################################################################\ndef second_min(nums):\n  min_num = nums[0]\n  min",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find smallest number in a list.\n ####################################################################################\ndef min_in_list(test_list):\n  return min(test_list)\n####################################################################################\n\n\nWrite a function to find the length of the longest word in a string.\ndef word_len(test_str):\n  return len(test_str.split(' ')[0])\n\n\nWrite a python function to find the number of vowels in a string.\ndef num_vowels(test_str):\n  return len(set(test_str.lower()))\n\n\nWrite a python function to find the length of the longest word in a string.\ndef longest_word(test_str):\n  return max([word for word in test_str.split(' ') if len(word) > 0])\n\n\nWrite a python function to find the length of the longest word in a string.\ndef longest_word(test_str):\n  return max([word.split(' ') for word in test_str",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find smallest number in a list.\n #############################################################################\ndef min(nums1,nums2):\n  return min(nums1,nums2)\n\n\nWrite a python function to find largest number in a list.\n#############################################################################\ndef max(nums1,nums2):\n  return max(nums1,nums2)\n\n\nWrite a python function to find the largest element in a list.\n#############################################################################\ndef max_elem(nums):\n  return max(nums)\n\n\nWrite a python function to find the smallest element in a list.\n#############################################################################\ndef min_elem(nums):\n  return min(nums)\n\n\nWrite a python function to find the sum of all the elements in a list.\n#############################################################################\ndef sum_list(nums):\n  return sum(nums)\n\n\nWrite a python function to find the product of all the elements in a list.\n#############################################################################\ndef prod_list(nums):\n  return prod(nums)\n\n\nWrite a python function to"
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n ################################################################################\ndef maximum_difference(numbers_tuple):\n  result=0\n  diff=0\n  for i in range(len(numbers_tuple)):\n    for j in range(i+1,len(numbers_tuple)):\n      diff+=(numbers_tuple[j]-numbers_tuple[i])\n      result=max(result, diff)\n      diff=0\n  return(result)\n\n\nWrite a function to find the greatest common divisor of two given numbers.\ndef gcd(a,b):\n  if b==0:\n    return a\n  else:\n    return gcd(b,a%b)\n\n\nWrite a function to find the sum of all the numbers in the given list which are multiples of 3 or 5.\ndef multiples_of_3or5(test_list):\n  res = [ele for ele in test_list if ele % 3 == 0 or ele % 5 == 0]\n ",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n ########### 1 - ###########\ndef find_max_diff(list_of_tuples):\n  max_diff = 0\n  for i in range(len(list_of_tuples)):\n    for j in range(i+1, len(list_of_tuples)):\n      max_diff = max(max_diff, abs(list_of_tuples[i][0] - list_of_tuples[j][0]))\n      max_diff = max(max_diff, abs(list_of_tuples[i][1] - list_of_tuples[j][1]))\n  return max_diff\n\n\nWrite a function to find the maximum difference between available pairs in the given list.\ndef find_max_diff(list_of_numbers):\n  max_diff = 0\n  for i in range(len(list_of_numbers)):\n    for j in range(i+1, len(list_of",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n ########\ndef max_diff(lst):\n  max_diff = 0\n  for i in range(len(lst)-1):\n    for j in range(i+1, len(lst)):\n      max_diff = max(max_diff, abs(lst[i][0]-lst[i][1]) + abs(lst[j][0]-lst[j][1]))\n      #print(max_diff)\n  return (max_diff) \n\n\nWrite a function to find the maximum difference between available pairs in the given tuple list.\ndef max_diff(lst):\n    result = map(lambda x, y: abs(x[0]-y[0]), lst)\n    result.sort()\n    res = 0\n    for x, y in zip(lst, result):\n        res = max(res, x[0]-y[0])\n    return (res) \n\n\nWrite a python function to find fibonacci numbers.",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n ########\ndef max_diff(nums):\n  max_diff = 0\n  pair = (0,0)\n  for i in range(len(nums)):\n    for j in range(i,len(nums)):\n      if i!= j:\n        pair = (nums[i], nums[j])\n        if pair > max_diff:\n          max_diff = pair\n  return max_diff\n\n########\ndef max_diff(nums):\n  max_diff = (max(nums) - min(nums))\n  return max_diff\n\n########\ndef max_diff(nums):\n  result = []\n  for i in range(len(nums)):\n    for j in range(len(nums)):\n      if i!= j:\n        result.append(nums[i] - nums[j])\n  return max(result)\n\n########\ndef max_diff(nums):\n  return max(nums) - min(nums)\n\n#",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n ###########\n# SOLUTION #\n###########\ndef max_diff(list_a, list_b):\n  a = list_a[0]\n  b = list_b[0]\n  max_diff = a - b\n  for item in list_a[1:]:\n    if item > max_diff:\n      max_diff = item\n  for item in list_b[1:]:\n    if item > max_diff:\n      max_diff = item\n  return max_diff\n\n\nWrite a function to print all the subsets of a given list.\ndef sub_list(list1):\n  subset = []\n  sub_list(list1, [], subset)\n  return subset\n\n\nWrite a function to print all the subsets of a given list.\ndef sub_list(list1, list2, subset):\n  if len(list1) == 0:\n    subset.append(list2[:])\n    return\n  sub_list(list"
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to sort a list of tuples using the second value of each tuple.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to sort a list of tuples using the second value of each tuple.\n ###################################################################################\ndef sort_tuples(x):\n  res = sorted(x, key = lambda x: x[1])\n  return res\n\n\n###################################################################################\ndef sort_tuples1(x):\n  res = sorted(x, key = lambda x: x[1], reverse=True)\n  return res\n\n\n###################################################################################\n#function to check if a list is a power of 2\ndef is_power_of_2(x):\n  if x == 0:\n    return False\n  for i in range(31, -1, -1):\n    if (x & (1 << i)) > 0:\n      return False\n  return True\n\n###################################################################################\ndef power_of_2(x):\n    y = 1\n    while x:\n        if x & 1 == 1:\n            y = y*2\n        x = x >> 1\n    return y\n\n###################################################################################\ndef power_of_2",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to sort a list of tuples using the second value of each tuple.\n ##########################################################################################\ndef sort_by_second(test_list):\n  res = sorted(test_list, key=lambda x: x[1])\n  return res \n\n##########################################################################################\n# Implement the following function to sort a list of strings.\n#\n# The function should sort alphabetically by first letter of each string,\n# then by alphabeticaly by second letter.\n#\n# The function should return a sorted list of strings.\n#\n# Examples:\n#   >>> sort_list(['aa', 'bb', 'cc', 'dd', 'ee', 'fff', 'gg', 'hh'])\n#   ['aa', 'bb', 'cc', 'dd', 'ee', 'fff', 'gg', 'hh']\n#   >>> sort_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\n#   ['a', 'b', '",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to sort a list of tuples using the second value of each tuple.\n ~~~~~~~~~~~~~~~~~~~~~\ndef sort_tuples(test_list):\n  test_list.sort(key=lambda x:x[1])\n  return test_list \n\n\nWrite a function to sort a list of tuples using the second value of each tuple.\n ~~~~~~~~~~~~~~~~~~~~~\ndef sort_tuples(test_list):\n  test_list.sort(key=itemgetter(1))\n  return test_list \n\n\nWrite a function to sort a list of tuples using the second value of each tuple.\n ~~~~~~~~~~~~~~~~~~~~~\ndef sort_tuples(test_list):\n  result = []\n  for k, v in sorted(test_list, key=itemgetter(1)):\n    result.append(k)\n  return result \n\n\nWrite a python function to find the number of times a number appears in a sequence.\ndef count_num(test_list, num):\n  result = 0\n  for ele in test_list:\n    if ele ==",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to sort a list of tuples using the second value of each tuple.\n ith tuple (a,b,c) will be sorted with a and b as second value.\ndef srt_list_two(test_list):\n  for i in range(len(test_list)):\n    for j in range(i):\n      if test_list[i][1] < test_list[j][1]:\n        temp = test_list[i]\n        test_list[i] = test_list[j]\n        test_list[j] = temp\n  return test_list\n\n\nWrite a function to find the maximum value in a list of numbers.\ndef max_value(test_list):\n  res = max(test_list)\n  return (res) \n\n\n\nWrite a function to count how many times the number is present in the given list of numbers.\ndef count_num(test_list, N):\n  count = 0\n  for ele in test_list:\n    if ele ==",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to sort a list of tuples using the second value of each tuple.\n 1. Sort the list of tuples by the second value of each tuple.\n2. Iterate over the list of tuples.\n3. Swap the value of the second element with the original element.\n4. Repeat step 2-3 until the list is sorted.\ndef sort_tuples(test_list):\n  new_list = sorted(test_list, key=lambda x: x[1])\n  return new_list \n\n\nWrite a function to sort a list of tuples by the second value of each tuple.\ndef sort_tuples(test_list):\n  new_list = sorted(test_list, key=lambda x: x[1])\n  return new_list \n\n\nWrite a function to sort a list of tuples by the second value of each tuple.\ndef sort_tuples(test_list):\n    return sorted(test_list, key=lambda x: x[1])\n\n\"\"\"\n\nif __name__ =="
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to flatten a list and sum all of its elements.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to flatten a list and sum all of its elements.\n ########\ndef flatten_list(nums):\n    result = []\n    for ele in nums:\n        if isinstance(ele, list):\n            result.extend(flatten_list(ele))\n        else:\n            result.append(ele)\n    return result\n\n\nWrite a function to remove the longest common prefix from two strings.\ndef remove_common_prefix(s1, s2):\n    i = 0\n    while i < min(len(s1), len(s2)) and s1[i] == s2[i]:\n        i = i + 1\n    return s1[:i]\n\n\nWrite a function to remove the longest common suffix from two strings.\ndef remove_common_suffix(s1, s2):\n    i = 0\n    while i < min(len(s1), len(s2)) and s1[len(s1) - i - 1] == s2[len(s2",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to flatten a list and sum all of its elements.\n ############################################################################\ndef flatten_list(nums):\n  res = []\n  for i in nums:\n    if isinstance(i, list):\n      res.extend(flatten_list(i))\n    else:\n      res.append(i)\n  return res\n\n\nWrite a function to search for a string in a list.\ndef str_in_list(test_str, test_list):\n  for i in test_list:\n    if test_str in i:\n      return True \n  return False\n\n\nWrite a function to find the index of the first occurrence of a substring in a string.\ndef find_index_of(test_str, test_str_list):\n  for i in range(len(test_str_list)):\n    if test_str_list[i] == test_str:\n      return i\n  return False\n\n\nWrite a function to count the number of occurrences of a substring in a string.\ndef count_occurrences(",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to flatten a list and sum all of its elements.\n ################################################################################\n\n\nWrite a function to find the first missing positive number in a given list of numbers.\ndef find_missing_number(nums):\n  for i in range(len(nums)):\n    if nums[i] > 0 and nums[i] <= len(nums):\n      if i == 0 or nums[i - 1]!= nums[i]:\n        return nums[i]\n  return len(nums) + 1 \n\n\nWrite a function to get the sum of the squares of numbers in the given list.\ndef sum_of_squares(nums):\n  return sum([pow(i, 2) for i in nums])\n\n\nWrite a function to get the square root of a given number.\ndef square_root(num):\n  return math.sqrt(num)\n\n\nWrite a function to find the largest multiple of a given number that can be divided by a given number without remainder.\ndef largest_multiple(",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to flatten a list and sum all of its elements.\n ####################################################################################\n\nWrite a function to compute the sum of digits of a given number.\ndef sum_of_digits(num): \n    sum = 0 \n  \n    while num > 0: \n        sum += num % 10 \n        num //= 10 \n    return sum \n\n\nWrite a function to delete all duplicates from the given list.\ndef delete_duplicates(nums): \n    res = [] \n    for ele in nums: \n        if ele not in res: \n            res.append(ele) \n    return res \n\n\nWrite a function to find the length of the longest substring.\ndef longest_substring(s): \n    res = [] \n    max_length = 0 \n    for i in s: \n        if i not in res: \n            if i not in res: \n                res.append(i) \n            else: \n                for j in range(len(res)): \n                    if res[j] == i: \n                        res[j] = None \n                res.append",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to flatten a list and sum all of its elements.\n ~~~\ndef flatten(num_list):\n  result = sum(num_list)\n  return (result)\n\ndef flatten(num_list):\n  result = list(map(lambda x: x + 1, num_list))\n  return result\n~~~\nWrite a python function to find the first odd number in a given list.\ndef first_odd(num_list):\n  for ele in num_list:\n    if ele % 2 == 1:\n      return ele\n  return 0\n\nWrite a python function to find the last odd number in a given list.\ndef last_odd(num_list):\n  for ele in num_list[::-1]:\n    if ele % 2 == 1:\n      return ele\n  return 0\n\n\nWrite a python function to find the sum of all the odd numbers in a given list.\ndef sum_all_odd(num_list):\n  res = 0\n  for"
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to count the number of positive numbers in a list.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to count the number of positive numbers in a list.\n ##########################################################################################\ndef positive_count(nums):\n  count = 0\n  for ele in nums:\n    if ele > 0:\n      count += 1\n  return count\n\n\nWrite a python function to find the nth largest number in a list using a sliding window.\ndef nth_largest(nums, k):\n  max_num = -1\n  for i in range(k - 1):\n    max_num = max(max_num, nums[i])\n  for i in range(k, len(nums)):\n    if nums[i] > max_num:\n      max_num = nums[i]\n  return max_num\n\n\nWrite a python function to find the nth largest number in a list using a hash table.\ndef nth_largest(nums, k):\n  nums_dict = dict()\n  for i in range(len(nums)):\n    nums_dict[nums[i]] = i\n  num_list = sorted",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to count the number of positive numbers in a list.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef countPositives(nums):\n    count = 0\n    for num in nums:\n        if num >= 0:\n            count +=1\n    return count\n\n\nWrite a python function to find the greatest and smallest of a list of numbers.\ndef findGreatestAndSmallest(nums):\n    smallest = nums[0]\n    largest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return (largest, smallest) \n\n\n\nWrite a python function to find the sum of the elements of a list.\ndef findSum(nums):\n    sum_ = 0\n    for num in nums:\n        sum_ += num\n    return (sum_)\n        \n\n\nWrite a python function to find the product of the elements of a list.\ndef findProd(nums):\n    prod_ = 1\n    for num in nums:\n        prod",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to count the number of positive numbers in a list.\n ##################################################################################\ndef count_pos(test_list):\n  res = 0\n  for i in test_list:\n    if i > 0:\n      res += 1\n  return (res)\n\n\n############################################################################\n\nWrite a python function to count the number of negative numbers in a list.\n ##################################################################################\ndef count_neg(test_list):\n  res = 0\n  for i in test_list:\n    if i < 0:\n      res += 1\n  return (res)\n\n\n############################################################################\n\nWrite a python function to count the number of zeros in a list.\n ##################################################################################\ndef count_zero(test_list):\n  res = 0\n  for i in test_list:\n    if i == 0:\n      res += 1\n  return (res)\n\n\n############################################################################\n\nWrite a function to sort a list in ascending order.\ndef asc_list(test_list):\n  res = sorted(",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to count the number of positive numbers in a list.\n ################################################################################\ndef pos_count(nums):\n  return sum(map(lambda x: x > 0, nums))\n\n\n################################################################################\n\nWrite a function to check if a string is a palindrome.\ndef is_palindrome(test_str):\n  l = test_str.lower()\n  if l == test_str[::-1]:\n    return True\n  else:\n    return False\n\n\nWrite a function to find the nth largest element in a list.\ndef nth_max(test_list, N):\n  res = max(test_list[N])\n  return (res)\n\n\n################################################################################\nWrite a function to remove the largest element from given list.\ndef remove_max(test_list):\n  res = max(test_list)\n  temp = test_list.index(res)\n  return (test_list.pop(temp))\n\n\n################################################################################\nWrite a function to find then'th largest element in a list",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to count the number of positive numbers in a list.\n ###############################################################################################\ndef count_positive(nums):\n  pos = []\n  for num in nums:\n    if num > 0:\n      pos.append(num)\n  return len(pos)\n\n\nWrite a python function to get the second largest number in a given list.\ndef get_second_largest(nums):\n  nums.sort(reverse=True)\n  return nums[0]\n\n\nWrite a python function to get the second largest number in a given list.\ndef get_second_largest(nums):\n  nums.sort(reverse=True)\n  return nums[0]\n\n\nWrite a python function to get the second largest number in a given list.\ndef get_second_largest(nums):\n  nums.sort(reverse=True)\n  return nums[0]\n\n\nWrite a python function to get the second largest number in a given list.\ndef get_second_largest(nums):\n  nums.sort(reverse="
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the number of ways to partition a set of Bell numbers.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the number of ways to partition a set of Bell numbers.\n \nFor example, if the number is 3, then the possible ways are 3/1, 3/2, 1/3.\ndef partition_set(num):\n    bell_set = {}\n    bells = []\n    i = int(math.sqrt(num))\n    if num % i!= 0:\n        print(\"Num is not a Bell number\")\n    else:\n        for i in range(1,i+1):\n            if num % i == 0:\n                bells.append(i)\n                bell_set[i] = bells.copy()\n                bells.remove(i)\n\n    return bell_set\n\n\nWrite a function to calculate the minimum number of moves to reach the goal state.\ndef min_moves(S, G):\n    bell_set = partition_set(S)\n    moves = 0\n    for i in bell_set:",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the number of ways to partition a set of Bell numbers.\n \nGiven a list of Bell numbers and a set of numbers, write a function to return the number of ways to partition the \nset of numbers into two subsets.\n\ndef countWays(set_of_numbers,set_of_bells):\n  result = 0\n  if len(set_of_bells) == 0:\n    result = 1\n  else:\n    for set_of_num in set_of_bells:\n      if set_of_num in set_of_numbers:\n        result += 1\n      countWays(set_of_numbers, set_of_bells[set_of_bells.index(set_of_num) + 1:])\n  return result\n\n\nWrite a python function to find the sum of all the permutations of the given list.\ndef permuteSum(nums):\n    total = 0\n    for i in range(len(nums) +",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the number of ways to partition a set of Bell numbers.\n ###########\n# Solution\n###########\n\n\n'''\ndef partition(list_a, low, high):\n    if high < low:\n        return 0\n    if list_a[low] == list_a[high]:\n        return 1\n    count = 0\n    for i in range(low, high+1):\n        count += partition(list_a, low, i-1) * partition(list_a, i+1, high)\n    return count\n'''\n\n\n# Write a function to find the set of all possible subsets.\ndef set_of_subsets(list_a, list_b):\n\n    return_list = []\n    for i in range(len(list_a)):\n        temp = [list_a[i]]\n        for j in range(len(list_b)):\n            if list_b[j] == list_a[i]:\n                temp.append(list_b[j])\n        return_",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the number of ways to partition a set of Bell numbers.\n #############################################################################\ndef bell_partition(n):\n  # your code here\n  count = 0\n  for i in range(1, n + 1):\n    count = count + bell_Number(i)\n  return count\n\nWrite a function which given a list of integers returns the sum of all the positive integers to the left of the given element.\ndef sum_to_left(nums):\n  count = 0\n  for i in range(len(nums)):\n    if nums[i] > 0:\n      count = count + nums[i]\n  return count\n\n\nWrite a function which gives the sum of all the positive integers to the right of the given element.\ndef sum_to_right(nums):\n  count = 0\n  for i in range(len(nums)):\n    if nums[i] > 0:\n      count = count + nums[i]\n  return count\n\n\nWrite a function which returns the",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the number of ways to partition a set of Bell numbers.\n \uf0b7 n = size of the Bell number set\n  \uf0b7 k = size of the partition\n  \uf0b7 Bell_number[n][k] = number of ways to partition the set of Bell numbers in the range [2,n] using the Bell number set and the partition.\ndef calc_partition_set(n, k):\n  result = [[0 for i in range(n+1)] for j in range(k+1)] \n  for i in range(2, n+1):\n    result[0][i] = 1\n  for i in range(1, k+1):\n    result[i][0] = result[i-1][0] + result[i-1][i]\n  for i in range(1, k+1): \n    for j in range(1, n+1):\n      result[i][j] = max(result[i-1"
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the given array is monotonic or not.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the given array is monotonic or not.\n \ndef is_monotonic(nums):\n    if len(nums) == 0:\n        return False\n\n    prev = None\n    for num in nums:\n        if prev is None:\n            prev = num\n            continue\n\n        if num >= prev:\n            return False\n\n        prev = num\n\n    return True\n\n\nWrite a python function to check whether the given array is monotonic or not.\ndef is_monotonic(nums):\n    if len(nums) == 0:\n        return False\n\n    prev = None\n    for num in nums:\n        if prev is None:\n            prev = num\n            continue\n\n        if num <= prev:\n            return False\n\n        prev = num\n\n    return True\n\n\nWrite a python function to find the length of the given array\ndef length(nums):\n    result = nums.count(max(nums))\n    return result\n\n\nWrite a python function to find the length of the given array\ndef length(nums):\n    result = 0\n    for num in nums",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the given array is monotonic or not.\n \u25a3 Examples\n \u25a3   is_monotonic([2, 4, 6, 8]) \u279e True\n \u25a3   is_monotonic([1, 2, 3]) \u279e False\n \u25a3   is_monotonic([1, 2, 3, 4, 5]) \u279e True\n \u25a3   is_monotonic([1, 2, 3, 4, 5, 6]) \u279e False\n \u25a3   is_monotonic([1, 2, 3, 4, 5, 6, 7]) \u279e False\n\"\"\"\n\ndef is_monotonic(nums):\n  counter = 0\n  for i in range(len(nums)-1):\n    if nums[i] > nums[i+1]:\n      counter += 1\n    else:\n      if counter == 1:\n        return False\n  return True",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the given array is monotonic or not.\n 1. Sort the array.\n 2. Loop through the array from right to left as long as the array elements are greater than each other.\n 3. If the loop goes through the whole array, check the last element of the array.\n 4. If the element is not greater than the previous element, return false.\n 5. If the element is greater than the previous element, return true.\ndef is_monotonic(nums):\n  nums.sort()\n  for i in range(len(nums)-1):\n    if(nums[i+1]<nums[i]):\n      return False\n  return True \n\"\"\"",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the given array is monotonic or not.\n \ndef monotonic(arr):\n    if len(arr) == 0:\n        return True\n    a = sorted(arr)\n    for i in range(len(arr)-1):\n        if a[i]!= a[i+1]:\n            return False\n    return True\n\n\nWrite a function to find the number of prime numbers in a given integer range.\ndef prime_Numbers(num_a, num_b):\n    res = 0\n    for i in range(num_a, num_b+1):\n        if is_prime(i):\n            res += 1\n    return res\n\n\nWrite a function to find the next prime number.\ndef next_prime_Number(num):\n    if is_prime(num+1):\n        return num + 1\n    for i in range(2, num):\n        if num % i == 0:\n            return num - i\n    return num\n\n\nWrite a function to find the",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the given array is monotonic or not.\n ~~~Example~~~\ndef is_monotonic(arr):\n  arr.sort(reverse = True)\n  for i in range(len(arr)):\n    if arr[i]!= arr[i+1]:\n      return False\n  return True\n\n\nWrite a python function to find the maximum and minimum element of a list.\ndef find_max_min(arr):\n  max_num = arr[0]\n  min_num = arr[0]\n  for i in arr:\n    if i > max_num:\n      max_num = i\n    if i < min_num:\n      min_num = i\n  return (max_num, min_num)\n\n\nWrite a python function to find the maximum and minimum element of a list.\ndef find_max_min(arr):\n  max_num = arr[0]\n  min_num = arr[0]\n  for i in arr:\n    if i > max_num:\n      max"
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to check whether a list contains the given sublist or not.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to check whether a list contains the given sublist or not.\n ################################################################################\ndef contains(nums, target):\n  if nums:\n      for num in nums:\n          if target in num:\n              print(\"Found the target\")\n              return True\n      return False\n  else:\n      return False\n \n################################################################################\ndef contains2(nums, target):\n  for i, num in enumerate(nums):\n      if target in num:\n          return True\n  return False\n################################################################################\n\nWrite a function to check if a list contains any element in another list.\ndef contains_any(nums, target):\n  for num in nums:\n      if target in num:\n          return True\n  return False\n\n\nWrite a function to find the kth largest element in a list.\ndef find_kth_largest(nums, k):\n    if len(nums) < k:\n        return None\n    return sorted(nums, reverse=True)[k-1]\n\n\n################################################################################\ndef find_kth_largest_2(nums, k):\n    if",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to check whether a list contains the given sublist or not.\n ########\ndef contains_sublist(sublist, arr):\n  if len(sublist) > len(arr):\n    return False\n  else:\n    for i in range(len(sublist)):\n      if arr[i] not in sublist:\n        return False\n    return True\n\narr1 = [1,3,4,6,9,10]\narr2 = [5,1,2,3,4]\nprint(contains_sublist(arr1, arr2))\n########\n\nWrite a python function to sort an array of integers.\ndef sort_array(arr):\n  arr = sorted(arr)\n  return arr\n\nWrite a python function to sort an array of integers in ascending order.\ndef sort_asc_array(arr):\n  arr = sorted(arr)\n  return arr\n\nWrite a python function to sort an array of integers in descending order.\ndef sort_desc_array(arr",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to check whether a list contains the given sublist or not.\n ###########\ndef contains(my_list, target):\n  for i in range(len(my_list)):\n    if target == my_list[i]:\n      return True\n  return False\n\n\nWrite a function to find the index of the first occurrence of a given element in a given list.\ndef find_index(my_list, target):\n  for i in range(len(my_list)):\n    if target == my_list[i]:\n      return i\n  return -1\n\n\nWrite a function to find the last occurrence of a given element in a given list.\ndef find_last_index(my_list, target):\n  for i in range(len(my_list)):\n    if target == my_list[-i]:\n      return i\n  return -1\n\n\nWrite a python function to find whether a list is a palindrome or not.\ndef is_palindrome(test_list):\n  test_list.reverse()",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to check whether a list contains the given sublist or not.\n #############\n# Test\n#############\ntest = [10, 20, 30, 40, 50]\nsub_list = [10, 20]\nprint(list_contains(test, sub_list))\nsub_list = [10, 20, 30, 40, 50]\nprint(list_contains(test, sub_list))\nsub_list = [10, 20, 30, 40]\nprint(list_contains(test, sub_list))\nsub_list = [10, 20, 30, 40, 50, 30]\nprint(list_contains(test, sub_list))\nsub_list = []\nprint(list_contains(test, sub_list))\nsub_list = [10, 20",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to check whether a list contains the given sublist or not.\n ################################################################################\ndef is_sublist(sublist, nums):\n    found = 0\n    for num in nums:\n        if num in sublist:\n            found += 1\n    if found == len(sublist):\n        return True\n    else:\n        return False\n\n\nWrite a function to print the elements of the given array in decreasing order.\ndef sort_array(nums):\n  result = list(nums)\n  result.sort(reverse = True)\n  return result\n\n\nWrite a function to find the intersection of two arrays.\ndef intersect(nums1, nums2):\n  result = []\n  for num in nums1:\n    if num in nums2:\n      result.append(num)\n  return list(set(result))\n\n\nWrite a python function to remove all duplicate elements from the given list.\ndef remove_duplicate(nums):\n  result = []\n  for num in nums:\n    if num not in result:\n      result.append("
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find whether all the given tuples have equal length or not.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find whether all the given tuples have equal length or not.\n #####################################################################################\n\nWrite a function to find the sum of all the elements in a 2D list.\n#####################################################################################\ndef get_sum(test_list):\n  sum = 0\n  for row in test_list:\n    for ele in row:\n      sum += ele\n  return (sum)\n\n#####################################################################################\nWrite a function to find the first repeated character in a given string.\n#####################################################################################\ndef find_first_repeated_char(test_str):\n  temp = []\n  for char in test_str:\n    if char in temp:\n      return (char)\n    else:\n      temp.append(char)\n  return (\"None\")\n\n#####################################################################################\nWrite a function to find the last repeated character in a given string.\n#####################################################################################\ndef find_last_repeated_char(test_str):\n  temp = []\n  for char in test_str:\n    if char in temp:\n      return (char)\n    else:\n     ",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find whether all the given tuples have equal length or not.\n..........\ndef equal_length(test_list):\n  for i in range(len(test_list)):\n    for j in range(len(test_list)):\n      if i!= j and len(test_list[i])!= len(test_list[j]):\n        return False\n  return True\n\n\nWrite a function to find the given array of list is a palindrome.\ndef is_palindrome(test_list):\n  for i in range(len(test_list) / 2):\n    if not test_list[i] == test_list[-1 - i]:\n      return False\n  return True\n\n\nWrite a python function to find all sub-palindromes of a given string.\ndef sub_palindrome(test_str):\n    res = []\n    for i in range(len(test_str)):\n        for j in range(i + 1, len(test_str)):\n            res.",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find whether all the given tuples have equal length or not.\n Equality is defined as the value of the same element in the two tuples is the same.\ndef equal_list(test_list):\n  res = []\n  for i in test_list:\n    res.append(len(i) == 2)\n  return (all(res))\n\nWrite a function to convert a list to nested lists.\ndef flaten_list(test_list):\n  res = []\n  for i in test_list:\n    if type(i) is list:\n      res += flaten_list(i)\n    else:\n      res.append(i)\n  return res\n\nWrite a python function to find whether a string is palindrome or not.\ndef palindrome(test_str):\n  if(test_str[0] == test_str[-1]):\n    return True\n  else:\n    return False\n\n\nWrite a python function to convert a string to list of characters.\ndef convert_str_",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find whether all the given tuples have equal length or not.\n \ndef equal_length(test_tuple):\n  length = len(test_tuple)\n  if length == 1:\n    res = 1 \n  else: \n    res = equal_length(test_tuple[1:]) if length > 1 else 0\n  return res\n\n\nWrite a function to get the middle element of a given array.\ndef mid_element(test_array):\n  middle_num = len(test_array) / 2\n  if middle_num % 2 == 0:\n    return (test_array[middle_num])\n  else:\n    return (test_array[middle_num-1])\n\n\nWrite a function to return the kth largest element in an array.\ndef get_k_largest(test_array, k):\n  test_array.sort(reverse=True)\n  return (test_array[0:k])\n\n\nWrite a function to find the number of elements in",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find whether all the given tuples have equal length or not.\n ###############################################################################################\ndef equal_length(tuples):\n  if len(tuples[0]) == len(tuples[1]):\n    return True\n  else:\n    return False\n###############################################################################################\n\nWrite a function to find whether the given array contains duplicates or not.\n ###############################################################################################\ndef duplicates_check(arr):\n  if len(arr)!= len(set(arr)):\n    return True\n  else:\n    return False\n###############################################################################################\n\nWrite a function to find the length of the longest common subsequence (LCS) of two given strings.\ndef lcs(str1, str2): \n  str1 = str1.split()\n  str2 = str2.split()\n  arr = [''] * (len(str1) + 1)\n  for i in range(len(str1)): \n    for j in range(len(str2)): \n      if str1[i] == str2[j]: \n        arr[i+1"
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to sort a list of elements.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to sort a list of elements.\n ########################################################################################\ndef sort_list_elements(nums):\n  return sorted(nums)\n\n\nWrite a function to sort a list of integers.\ndef sort_int_list(nums):\n  return sorted(nums, reverse = True)\n\n\nWrite a function to sort a list of tuples.\n########################################################################################\ndef sort_list_tuple(test_tuple):\n  return sorted(test_tuple, reverse = True)\n\n\nWrite a function to sort list of objects.\n########################################################################################\ndef sort_list_object(test_obj):\n  return sorted(test_obj, reverse = True)\n\n########################################################################################\ndef sort_list_2(test_list):\n  test_list.sort()\n  return test_list\n\n\nWrite a function to sort a dictionary of lists.\n########################################################################################\ndef sort_dict_list(test_dict):\n  for ele in test_dict.keys():\n    test_dict[ele].sort",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to sort a list of elements.\n ########\ndef insertion_sort(arr):\n   for i in range(1, len(arr)):\n      key = arr[i]\n      j = i - 1\n      while j >= 0 and arr[j] > key:\n         arr[j + 1] = arr[j]\n         j = j - 1\n      arr[j + 1] = key\n   return arr \n\n########\ndef insertion_sort_2(arr):\n   for i in range(1, len(arr)):\n      key = arr[i]\n      j = i - 1\n      while j >= 0 and arr[j] > key:\n         arr[j + 1] = arr[j]\n         j = j - 1\n      arr[j + 1] = key\n   return arr \n\n########\ndef insertion_sort_3(arr):\n   for i in range(1, len(arr)):\n      key = arr[i]",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to sort a list of elements.\n  eg: [1, 2, 3, 4, 5]\n sorted_list = sorted(my_list)\n if the list is already sorted then return the sorted list\ndef sorted_list(nums):\n    return sorted(nums)\n\n\nWrite a function to get the sum of elements in the list.\ndef sum_list(nums):\n  return sum(nums)\n\nWrite a function to find the maximum value in a list.\ndef max_list(nums):\n  return max(nums)\n\nWrite a function to convert a list of lists to a list of tuples.\ndef list_to_tuple(nums):\n  return tuple([tuple(each) for each in nums])\n\nWrite a function to return a list of tuples in lexicographic order.\ndef lex_list(nums):\n  return sorted(nums, key = lambda x: x[0])\n\nWrite a function to return a list",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to sort a list of elements.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef sort_list(test_list):\n    return sorted(test_list)\n\n\nWrite a function to find the smallest number in a list.\ndef find_min(test_list):\n  return min(test_list)\n\n\nWrite a python function to find the mean of the elements of a list.\ndef mean(test_list):\n    total = sum(test_list)\n    return total / len(test_list)\n\n\nWrite a python function to find the sum of the elements of a list.\ndef sum_list(test_list):\n    total = 0\n    for ele in test_list:\n        total += ele\n    return total\n\n\nWrite a python function to find the geometric mean of the elements of a list.\ndef g_mean(test_list):\n    return math.sqrt(math.prod(test_list) ** (1/len(test_list)))\n\n\nWrite",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to sort a list of elements.\n ################################################################################\ndef sort_list(nums):\n  nums.sort()\n  return nums\n################################################################################\n\nWrite a function to remove duplicates in a list.\ndef remove_dup(nums):\n  return list(set(nums))\n################################################################################\n\nWrite a function to remove all the duplicates from a given list.\ndef remove_dup(nums):\n  return list(set(set(nums)))\n################################################################################\n\nWrite a function to find all the permutations of a given list.\ndef perm(input_list): \n    output_list = [] \n    def perm_helper(input_list, output_list): \n        if len(input_list) == 0: \n            output_list.append(input_list) \n            return \n        for i in range(len(input_list)): \n            new_list = input_list[:i] + input_list[i+1:] \n            perm_helper(new_list, output_list) \n    perm_"
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n ~~~~~\ndef re(x):\n  if (x >= 1000 and x <= 10000):\n    return x\n  else:\n    return x * x\n\ndef diff(x,y):\n  if x >= y:\n    return x - y\n  else:\n    return y-x\n\ndef diff_sq(x,y):\n  return re(x) - re(y)\n\ndef is_sq(x):\n  if 0 < x >= re(x):\n    return True\n  else:\n    return False\n\ndef is_sq_diff(x,y):\n  return diff_sq(x,y) \n\n\n\nWrite a function to find the sum of all the multiples of 3 or 5 below 1000.\ndef sum_of_multiples(test_num):\n  res = 0\n  for i in range(1,1000+",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n 2 * (n^2) +  (n + 1) * (n + 1) = (n * (n + 1)) \ndef is_square(num): \n  if num <= 0: \n    return False \n  if num == 1: \n    return True \n  result = 0 \n  while num > 0: \n    num = num - 1 \n    result = result + num \n  return result == num \n\nWrite a python function to remove the given word from the string.\ndef remove_word(string, word): \n  if word not in string: \n    return string \n  result = '' \n  for i in string: \n    if i!= word: \n      result = result + i \n  return result \n\"\"\"\n# Driver code \nif __name__ == \"__main__\": \n  # test cases \n  test_case1 = [['apple', 'banana', 'cherry'], 'banana', 'cherry'] \n  test_case2",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n ########## 20210509 ##########\ndef is_square_diff(num1, num2):\n  if num1**2 - num2**2 == 0:\n    return True\n  else: \n    return False\n\n########## 20210509 ##########\ndef is_square_diff2(num1, num2):\n    return num1**2 - num2**2 == 0\n\n########## 20210509 ##########\ndef is_square_diff3(num1, num2):\n    return num1**2 + num2**2 == 0\n\n########## 20210509 ##########\ndef is_square_diff4(num1, num2):\n    return num1**2 - num2**2 == 0\n\n########## 20210509 ##########\ndef is_square_diff",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n Equality is considered as two squares.\ndef check_square(num):\n  diff = num * num\n  return (diff == num)\n\n\nWrite a python function to print the given list.\ndef print_list(test_list):\n  res = [str(ele) for ele in test_list]\n  res =''.join(res)\n  return (res) \n\n\nWrite a python function to print the given matrix.\ndef print_matrix(test_list):\n  test_list = [[str(ele) for ele in sub_list] for sub_list in test_list]\n  res = [str(ele) for sub_list in test_list for ele in sub_list]\n  res =''.join(res)\n  return (res) \n\n\nWrite a python function to print the given string in a way that it is a one-line string.\ndef print_line(test_str):\n  res =",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n #################################################################################\ndef check_num(num):\n  if num == 0:\n    return False\n  num_str = str(num)\n  if num_str[0] == '0':\n    return False\n  if num_str[0] == num_str[-1]:\n    return False\n  if int(num_str[1:-1]) < 0:\n    return False\n  if int(num_str[1:-1]) > 100000000000000:\n    return False\n  return True\n\n#################################################################################\ndef check_num2(num):\n  num_str = str(num)\n  if num_str[0]!= '0' and num_str[0]!= num_str[-1]:\n    return False\n  if int(num_str[1:-1]) < 0 or int(num_str[1:-1]) > 1000"
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to check whether it follows the sequence given in the patterns array.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to check whether it follows the sequence given in the patterns array.\n ############ Example ####################\ndef check_pattern(patterns, elements):\n  for i in range(len(elements)):\n    for j in range(len(patterns)):\n      if elements[i] == patterns[j]:\n        print(True)\n      else:\n        print(False)\n        return False\n\n################## Example ################\ndef check_pattern(patterns, elements):\n    for i in range(len(elements)):\n        for j in range(len(patterns)):\n            if elements[i] == patterns[j]:\n                return True\n            else:\n                return False\n\n############## Example ####################\ndef check_pattern(patterns, elements):\n    for i in range(len(elements)):\n        for j in range(len(patterns)):\n            if elements[i] == patterns[j]:\n                return True\n            else:\n                return False\n\n##################################\n\nWrite a function to check whether it follows the sequance given in the patterns array.\ndef check_",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to check whether it follows the sequence given in the patterns array.\n \ndef check_sequence(patterns):\n  for i in range(len(patterns) - 1):\n    if not (patterns[i] < patterns[i+1]):\n      return False\n  return True\n\ndef check_sequence(patterns):\n  for i in range(len(patterns) - 1):\n    if patterns[i] < patterns[i + 1]:\n      return False\n  return True\n\ndef check_sequence(patterns):\n  pattern = patterns[0]\n  i = 0\n  while i < len(patterns):\n    pattern = pattern + patterns[i]\n    i += 1\n  return pattern == len(patterns)\n\ndef check_sequence(patterns):\n  pattern = patterns[0]\n  i = 0\n  while i < len(patterns):\n    pattern = pattern + patterns[i]\n    i += 1\n  return pattern == len(patterns)\n\ndef check_sequence(patterns):\n  pattern =",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to check whether it follows the sequence given in the patterns array.\n 1. For every pattern in the list, if the pattern is present in the given array return True, else return False.\ndef check_pattern(arr, pattern):\n  for i in range(len(pattern)):\n    if arr[i]!= pattern[i]:\n      return False\n  return True\n\n\nWrite a function to find the kth lexicographically smallest element.\ndef kth_smallest(num, k):\n  res = num[0][k]\n  for i in range(1, k+1):\n    res = min(res, num[i][k])\n  return res\n\n\nWrite a python function to find the value of element in a matrix.\ndef element_in_matrix(matrix, i, j):\n    res = matrix[i][j]\n    return res \n\n\nWrite a python function to find the sum of all the numbers in a matrix.\ndef sum_mat(matrix):\n    res = 0",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to check whether it follows the sequence given in the patterns array.\n 1. check if the list of patterns is empty\n 2. check if the list of patterns is null\n 3. check if the list of patterns is empty\n 3.1 if the list of patterns is null, then return false\n 3.2 if the list of patterns is empty, then return false\ndef is_sequence(patterns, elements):\n  if len(patterns) == 0:\n    return False\n  if len(patterns) == 1:\n    if elements == patterns[0]:\n      return True\n    return False\n  if len(patterns) == 2:\n    if patterns[0] == elements:\n      return True\n    if patterns[1] == elements:\n      return True\n  if len(patterns) == 3:\n    if patterns[0] == elements:\n      return True\n    if patterns[1] == elements:\n      return True\n    if patterns[2] == elements:\n      return True\n  if len(patterns) > 3",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to check whether it follows the sequence given in the patterns array.\n Idx is the index of the sequence.\n def check_sequence(patterns, idx, seq):\n  if seq == '': \n    return True\n  elif seq == patterns[idx][0]:\n    return check_sequence(patterns, idx+1, seq[1:])\n  elif seq == patterns[idx][1]:\n    return check_sequence(patterns, idx+1, seq[2:])\n  elif seq == patterns[idx][2]:\n    return check_sequence(patterns, idx+1, seq[3:])\n  elif seq == patterns[idx][3]:\n    return check_sequence(patterns, idx+1, seq[4:])\n\n\"\"\"\n\ndef check_sequence(patterns, idx, seq):\n    if seq == '' or idx == len(patterns):\n        return True\n    else:\n        if seq == patterns[idx][0]:\n            return check_sequence(patterns, idx+1, seq[1:])\n        elif seq == patterns[idx]["
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n.................................\ndef find_tuples(test_list, k):\n  tuples = [tuple(x) for x in test_list]\n  res = [x for x in tuples if k in x]\n  res = list(res)\n  return (res) \n.................................\n\n\nWrite a function to find all unique combinations of k numbers from the given list of integers.\ndef combinations(test_list, k):\n  res = [x for x in combinations(test_list, k)]\n  res = list(res)\n  return (res) \n.................................\n\n\nWrite a function to find the smallest positive integer which is evenly divisible by all the given numbers.\ndef smallest_multiple(test_list):\n  res = [x for x in smallest_multiple(test_list)]\n  res = list(res)\n  return (res) \n.................................\n\n\nWrite a function to find",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef find_divisors(nums, k):\n  print nums\n  total = 0\n  for num in nums:\n    if num % k == 0:\n      print \"dividing by \" + str(k) + \" \" + str(num)\n      total += 1\n  return total\n\n\nWrite a function to find the sum of first k elements in a list.\ndef find_sum(arr, k):\n  total = 0\n  for num in range(0, k):\n    total += arr[num]\n  return total\n\n\nWrite a function to find the sum of first k elements in a list.\ndef find_sum(arr, k):\n  total = 0\n  for num in range(0, k):\n    total += arr[num]\n  return total\n\nWrite a python function to find the sum of all even numbers in the given list.\ndef find_sum_even(nums",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef div_tuple(num_tuple, k):\n  div_tup = []\n  for num in num_tuple:\n    if num % k == 0:\n      div_tup.append(num)\n  return div_tup\n\n\nWrite a function to find a list of all the unique positive integers between the given range.\ndef get_range(start, stop):\n  lst = []\n  for i in range(start, stop+1):\n    if i > 0 and i < 10:\n      lst.append(i)\n  return lst\n\n\nWrite a python function to find all the permutations of a given string.\ndef get_permutation(test_str):\n  perm = []\n  for i in range(len(test_str)):\n    for j in range(len(test_str)):\n      perm.append(test_str[j])\n  return perm\n\n\nWrite a function to get the sum of all the",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n \ndef find_div_k(nums, k):\n  res = []\n  for i in nums:\n      if i[0] % k == 0:\n          res.append(i)\n  return res\n\n\n\nWrite a function to count number of characters in the given string that is not a digit.\ndef no_digit(test_str):\n  temp = test_str.split()\n  res = [ele for ele in temp if not ele.isdigit()]\n  res =''.join(res)\n  return (res) \n\n\n\nWrite a python function to find the sum of squares of every element in the given list,\nexcept for the first one which is 1. \n\"\"\"\n\ndef sum_of_squares(nums):\n    res = 0\n    for n in nums:\n        res += n * n\n    return res\n\ndef sum_of_squares_except_first(nums):\n    res = 0\n    for",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef divisible_tuple(tup_list, k):\n  new_tup_list = []\n  for tup in tup_list:\n    if all(n % k == 0 for n in tup):\n      new_tup_list.append(tup)\n  return new_tup_list\n\n\nWrite a python function to find nth largest number in the given list.\ndef largest_number(n,l):\n    largest = 0\n    for i in range(0,n):\n        if(l[i] > largest):\n            largest = l[i]\n    return largest\n\n\nWrite a python function to create a list which contains all the elements from 1 to n.\ndef get_list(n):\n    result = []\n    for i in range(1,n+1):\n        result.append(i)\n    return result\n\n\nWrite a function to sort a given list of integers in ascending order.\n"
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find whether a number is divisible by 11.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find whether a number is divisible by 11.\n #####################################################################################\ndef divisible_by_11(num):\n  if (num % 11 == 0): \n    return True\n  else: \n    return False\n\n#####################################################################################\ndef divisible_by_11_python(num):\n  return (num % 11 == 0)\n\n#####################################################################################\ndef divisible_by_11_c(num):\n  if (num % 11 == 0):\n    return True\n  else:\n    return False\n\n#####################################################################################\ndef divisible_by_11_c_python(num):\n  return (num % 11 == 0)\n\n#####################################################################################\ndef divisible_by_11_c_py(num):\n  return (num % 11 == 0)\n\n#####################################################################################\ndef divisible_by_11_c_py2(num):\n  return (num % 11 == 0)\n#####################################################################################\ndef",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find whether a number is divisible by 11.\n ~~>>>def div_11(test_int):\n  if test_int % 11 == 0:\n    return True\n  else:\n    return False\n\nif __name__ == \"__main__\":\n  test_int = 5\n  test_bool = div_11(test_int)\n  print(test_bool)\n\nWrite a python function to find the difference between two given numbers.\ndef diff_two_nums(test_int1, test_int2):\n  diff_num = test_int1 - test_int2\n  return diff_num\n\nif __name__ == \"__main__\":\n  test_int1 = 6\n  test_int2 = 10\n  test_diff_num = diff_two_nums(test_int1, test_int2)\n  print(test_diff_num)\n\nWrite a python function to get the factorial of a given number.\ndef",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find whether a number is divisible by 11.\n  def divisible_by_11(num):\n  if num % 11 == 0:\n    return True\n  else:\n    return False\n\n\nWrite a python function to find whether a number is divisible by 13.\ndef divisible_by_13(num):\n  if num % 13 == 0:\n    return True\n  else:\n    return False\n\n\nWrite a python function to find whether a number is divisible by 17.\ndef divisible_by_17(num):\n  if num % 17 == 0:\n    return True\n  else:\n    return False\n\n\nWrite a python function to find whether a number is divisible by 5.\ndef divisible_by_5(num):\n  if num % 5 == 0:\n    return True\n  else:\n    return False\n\n\nWrite a python function to find whether a number is divisible by 4.\ndef divisible_by_4(num",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find whether a number is divisible by 11.\n ################################################################################\nclass Solution():\n    def check_prime(self, n):\n        if n == 2:\n            return True\n        elif n == 3:\n            return True\n        elif n%2 == 0 or n%3 == 0:\n            return False\n        elif n<6:\n            return True\n        else:\n            for i in range(5, int(n**0.5)+1, 6):\n                if n%i==0 or n%(i+2) == 0:\n                    return False\n            return True\n\n################################################################################\nclass Solution():\n    def check_prime(self, n):\n        if n == 2:\n            return True\n        elif n == 3:\n            return True\n        elif n%2 == 0 or n%3 == 0:\n            return False\n        elif n<6:\n            return True\n        else:\n            for i in range(5, int(n**0.5)+1, 6):",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to find whether a number is divisible by 11.\n \ndef divisible_by_11(test_number):\n  if test_number % 11 == 0:\n    return True\n  else:\n    return False\n# print(divisible_by_11(11))\n\n# Write a python function to find the sum of all the elements in a list.\ndef sum_list(test_list):\n  result = sum(test_list)\n  return result\n\n\n# Write a python function to find the minimum element of a list.\ndef min_list(test_list):\n  result = min(test_list)\n  return result\n\n\n# Write a python function to find the maximum element of a list.\ndef max_list(test_list):\n  result = max(test_list)\n  return result\n\n\n# Write a python function to find the sum of all the elements in a list.\ndef sum_list(test_list):\n  result = sum"
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the length of the word is odd or not.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the length of the word is odd or not.\n ####################################################################################\ndef is_odd_length(test_string):\n  n = len(test_string)\n  if (n % 2!= 0):\n    return True\n  return False \n\n\ndef is_even_length(test_string):\n  n = len(test_string)\n  if (n % 2 == 0):\n    return True\n  return False \n\n\n####################################################################################\ndef is_palindrome(test_str):\n  test_str = test_str.lower()\n  test_str = test_str.strip()\n  test_str = test_str.replace(\" \", \"\")\n  test_str = test_str.replace(\"-\", \"\")\n  x = 0\n  for k in range(len(test_str)//2):\n    if (test_str[k] == test_str[len(test_str)-k-1]):\n      x = x + 1\n  if (x == len(test_",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the length of the word is odd or not.\n ########\n\nWrite a function to print whether the given word is a palindrome or not.\n#########\n\nWrite a function to calculate the sum of all the integers in the given array.\n#########\n\nWrite a function to print the first n prime numbers in a million numbers.\n#########\n\nWrite a function to find the sum of all the odd numbers in the given array.\n#########\n\n\nWrite a function to calculate the product of all the numbers in the given array.\n#########\n\nWrite a python function to find the number of the longest palindromic substring in a given string.\n#########\n\nWrite a function to print the elements of the given string with the first letter capitalized.\n#########\n\n\n\nWrite a function to find the length of the longest palindromic substring in a given string.\n#########\n\nWrite a function to find the sum of all the elements of the string which are palindromes.\n#########\n\n\n",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the length of the word is odd or not.\n \ndef odd_word(word):\n  if word.split()[-1].isdigit():\n    return False\n  else:\n    return True\n\n\nWrite a function to check whether two words are alike or not.\ndef alike(word1, word2):\n  if odd_word(word1) and odd_word(word2):\n    return False\n  else:\n    return True\n\nWrite a function to check whether two words are similar or not.\ndef similar(word1, word2):\n  if len(word1)>len(word2):\n    return False\n  else:\n    return True\n\n\nWrite a function to generate anagrams.\ndef anagram(s):\n  return [word for word in map(str.lower, s) if len(word) == len(set(word))]\n\nWrite a python function to find all the pairs of words present in a list of words.\ndef pairs(words):\n  pairs =",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the length of the word is odd or not.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef is_odd_length_word(word):\n  for i in word:\n    if i.isnumeric():\n      return True\n  return False\n\n\nWrite a function to reverse a string.\ndef reverse_word(test_str):\n  return test_str[::-1]\n\n\nWrite a function to make a dictionary out of a list of words.\ndef make_dict(test_str):\n  dict = {} \n  for i in test_str:\n    dict[i] = 0\n  return dict\n\n\nWrite a function to return the sum of all digits in the given number.\ndef sum_of_digits(test_str):\n  res = 0\n  for i in test_str:\n    if i.isdigit():\n      res += int(i)\n  return res\n\n\nWrite a function to replace every occurance of a given word with another given word.\ndef replace_words(test_str,",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a python function to check whether the length of the word is odd or not.\n ##################################################################################\n\ndef odd_length(n):\n    if n % 2 == 1:\n        return (True)\n    else:\n        return (False)\n\n##################################################################################\n\ndef odd_length(n):\n    if n % 2 == 1:\n        return (True)\n    else:\n        return (False)\n\n##################################################################################\n\ndef odd_length(n):\n    if n % 2 == 1:\n        return (True)\n    else:\n        return (False)\n\n##################################################################################\n\ndef odd_length(n):\n    if n % 2 == 1:\n        return (True)\n    else:\n        return (False)\n\n##################################################################################\n\ndef odd_length(n):\n    if n % 2 == 1:\n        return (True)\n    else:\n        return (False)\n\n##################################################################################\n\ndef odd_length(n):\n    if n % 2 == 1"
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the nth tetrahedral number.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the nth tetrahedral number.\n ###############################################################################################\n# Input:  n = 2, nums = [[1,2,3],[4,5,6]]\n# Output: 12\n###############################################################################################\ndef tetra_num(n, nums):\n  bell_nums = bell_Number(n)\n  res = 0\n  for i in range(n):\n    for j in range(n):\n      if j <= i:\n        res += bell_nums[i][j] * nums[i][j] * nums[j][i]\n  return res\n\n\n###############################################################################################\n# Input:  n = 2\n# Output: [[1,2],[3,4]]\n###############################################################################################\ndef tetra_matrix(n):\n  tetra_list = []\n  for i in range(n):\n    for j in range(n):\n      for k in range(n):\n        tetra_list.append([i, j, k])",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the nth tetrahedral number.\n  def tetra_Number(n):\n    tetra = [[0 for i in range(n+1)] for j in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            tetra[i][j] = tetra[i-1][j-1] + tetra[i-1][j]\n    return tetra[n][0] \ndef tetra_Number(n):\n    tetra = [[0 for i in range(n+1)] for j in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            tetra[i][j] = tetra[i-1][j-1] + tetra[i-1][j]\n    for i in range(1,n+1):\n        for j in range",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the nth tetrahedral number.\n \uf0b7 def tetra_number(n):\n    tetra = 1\n    for i in range(2, n+1):\n      tetra = tetra * (n - i) / i \n    return tetra\n\nWrite a function to generate a random string of 6 characters.\ndef rand_str(l):\n  s = ''\n  for i in range(l):\n    s+=random.choice(string.ascii_letters)\n  return s\n\n\nWrite a python function to find the sum of all elements in an array.\ndef sum_array(nums):\n  s = 0\n  for i in nums:\n    s+=i\n  return s\n\n\nWrite a python function to print a matrix.\ndef print_mat(arr):\n  for i in range(len(arr)):\n    for j in range(len(arr[0])):\n      print(arr[i][j], end=\" \")\n    print()\n  print()",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the nth tetrahedral number.\n ######################################################################################\ndef tetra_Number(n): \n  tetra = [[0 for i in range(n+1)] for j in range(n+1)]\n  for i in range (1,n+1):\n    for j in range(1,n+1):\n      tetra[i][j] = tetra[i-1][j-1] + tetra[i-1][j] + tetra[i][j-1]\n  return tetra[n][n]\n\n\nWrite a python function to find the nth prime. \n######################################################################################\ndef prime_number(n):\n  primes = [2,3]\n  for i in range(2,n):\n    if n % primes[i-1] == 0:\n      primes.append(primes[i-1] + 2)\n  return primes[n-1]\n\n\nWrite a python function to find nth prime. \n",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the nth tetrahedral number.\n iven a number n and a list of numbers  ranging from 1 to n, find the nth tetrahedral number in the list.\ndef tetra_Number(n,nums):\n  res = 0\n  for i in range(1, n+1):\n    res += nums[i] * (4 * i ** 2 + 1)\n  return res\n\n\nWrite a python function to check if two lists have equal length.\ndef equal_length(nums1,nums2):\n  if len(nums1)!= len(nums2):\n    return False\n  return True\n\nWrite a function to find the index of a number in the given list.\ndef find_index(nums,num):\n  for index, value in enumerate(nums):\n    if value == num:\n      return index\n  return -1\n\nWrite a function to find first occurrance of a value in a list.\ndef find_first(nums"
      ]
    },
    {
      "input": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the volume of a sphere.\n ",
      "output": [
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the volume of a sphere.\n ############### \ndef volume_sphere(r): \n  return 4 / 3 * math.pi * r ** 3 \n\nWrite a function to find the volume of a cube.\n############### \ndef volume_cube(l): \n  return l ** 3\n\n\nWrite a python function to find the volume of any two sides.\n############### \ndef volume_two_sides(s1, s2): \n  return s1 * s2 \n\nWrite a function to find the volume of any three sides.\n############### \ndef volume_three_sides(s1, s2, s3): \n  return s1 * s2 * s3\n\nWrite a function to find the volume of any four sides.\n############### \ndef volume_four_sides(s1, s2, s3, s4): \n  return s1 * s2 * s3 * s4\n\nWrite a function to find the volume of any",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the volume of a sphere.\n \uf0b7 area of a sphere = pi * r^2(3/4)\n \uf0b7 surface area of sphere = pi * r^2(2/3)\ndef sphere_volume(r):\n  vol = 4 / 3 * pi * pow(r, 3)\n  return vol\n\nWrite a function to find the surface area of a cylinder.\ndef cylinder_area(r,h):\n  area = (3/2) * pi * pow(r, 2) * h\n  return area\n\nWrite a function to find the surface area of the pyramid.\ndef pyramid_area(w,h):\n  area = (w*h) / 2\n  return area\n\nWrite a function to find the volume of a cube.\ndef cube_volume(w,h,d):\n  vol = (w*h*d) / 6\n  return vol\n\nWrite a python function to",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the volume of a sphere.\n...........\ndef sphere_volume(R):\n  return pi * R * R * R\n\n\nWrite a function to find the surface area of a sphere.\n...........\ndef sphere_surface(R):\n  return pi * R * R\n\n\nWrite a python function to find the intersection of two lines.\ndef intersection(x1,y1,x2,y2,x3,y3,x4,y4):\n  a = (y2-y1) * (x3-x4) - (x2-x1) * (y3-y4)\n  b = (x1-x2) * (x3-x4) - (y1-y2) * (x3-x4)\n  c = (x1-x2) * (y1-y2) - (y1-y2) * (x1-x2)\n  d = (",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the volume of a sphere.\n #####################################################################################\ndef volume_sphere(r):\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n\n  return pi * (r **3)\n\n\nWrite a python function to find all permutations of a given list.\ndef permutations(test_list):\n  res = []\n  for i in range(len(test_list)):\n    for j in range(i):\n      temp = test_list[i]\n      test_list[i] = test_list[j]\n      test_list[",
        "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele)!= K]\n  res =''.join(res)\n  return (res) \n\n\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \n\n\nWrite a python function to find nth bell number.\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n\n\nWrite a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\nWrite a function to find the volume of a sphere.\n #############\ndef sphere_volume(radius):\n  return 4*3.14*radius**3\n\n\nWrite a function to get the nth prime number.\ndef get_nth_prime(num,n):\n  for i in range(n,0,-1):\n    if is_prime(i):\n      return i\n  return False\n\nWrite a python function to find all factors of a number.\ndef factors(num):\n  res = []\n  for i in range(1, num+1):\n    if num % i == 0:\n      res.append(i)\n  return res\n\n\nWrite a function to get all prime numbers below a given number.\ndef get_primes(num):\n  res = []\n  for i in range(2, num+1):\n    if is_prime(i):\n      res.append(i)\n  return res\n\n\nWrite a python function to get the sum of all the prime numbers between"
      ]
    }
  ]
}
