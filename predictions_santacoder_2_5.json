{
  "humaneval": [
    {
      "input": "\n\n\nWrite a Python function `find_zero(xs: list)` to solve the following problem:\nxs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns only only zero point, even if there are many.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n-0.5\n>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `int_to_mini_roman(number)` to solve the following problem:\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_mini_roman(19) == 'xix'\n>>> int_to_mini_roman(152) == 'clii'\n>>> int_to_mini_roman(426) == 'cdxxvi'\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\n\n\nWrite a Python function `fib4(n: int)` to solve the following problem:\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n\n\n\nWrite a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:\nCheck if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n ",
      "output": [
        "\n\n\nWrite a Python function `find_zero(xs: list)` to solve the following problem:\nxs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns only only zero point, even if there are many.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n-0.5\n>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `int_to_mini_roman(number)` to solve the following problem:\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_mini_roman(19) == 'xix'\n>>> int_to_mini_roman(152) == 'clii'\n>>> int_to_mini_roman(426) == 'cdxxvi'\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\n\n\nWrite a Python function `fib4(n: int)` to solve the following problem:\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n\n\n\nWrite a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:\nCheck if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nHints: Use the `math.isclose` function as shown above.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n'''\n\n# test cases\n# test_cases = [\n#     ([1.1, 2.2, 3.3], 0.1),\n#     ([1.1, 2.2, 3.3, 4.4], 0.1),\n#     ([1.1, 2.2, 3.3, 4.4, 5.5], 0.1),\n#     ([1.1, 2.2, 3.3, 4.4, 3.4], 0.1),\n#     ([1.1, 2.2, 3.3, 4.4, 3.5], 0.1),\n#     ([1.1, 2",
        "\n\n\nWrite a Python function `find_zero(xs: list)` to solve the following problem:\nxs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns only only zero point, even if there are many.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n-0.5\n>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `int_to_mini_roman(number)` to solve the following problem:\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_mini_roman(19) == 'xix'\n>>> int_to_mini_roman(152) == 'clii'\n>>> int_to_mini_roman(426) == 'cdxxvi'\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\n\n\nWrite a Python function `fib4(n: int)` to solve the following problem:\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n\n\n\nWrite a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:\nCheck if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a Python function `is_palindrome(s)` to solve the following problem:\nGiven a string, take the string and reverse the order.\nFor example:\n>>> is_palindrome(\"a\")\nTrue\n>>> is_palindrome(\"a\")\nFalse\n>>> is_palindrome(\"tacoat\")\nTrue\n>>> is_palindrome(\"tacoat\")\nFalse\n>>> is_palindrome(\"tacocat\")\nFalse\n>>> is_palindrome(\"tacocat\")\nTrue\n>>> is_palindrome(\"tacocat\")\nFalse\n>>> is_palindrome(\"tacocat\")\nFalse\n>>> is_palindrome(\"tacocat\")\nFalse\n>>> is_palindrome(\"tacocat\")\nFalse\n>>> is_palindrome(\"tacocat\")\nFalse\n>>> is_palindrome(\"tacocat\")\nFalse\n>>> is_palindrome(\"tac",
        "\n\n\nWrite a Python function `find_zero(xs: list)` to solve the following problem:\nxs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns only only zero point, even if there are many.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n-0.5\n>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `int_to_mini_roman(number)` to solve the following problem:\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_mini_roman(19) == 'xix'\n>>> int_to_mini_roman(152) == 'clii'\n>>> int_to_mini_roman(426) == 'cdxxvi'\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\n\n\nWrite a Python function `fib4(n: int)` to solve the following problem:\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n\n\n\nWrite a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:\nCheck if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n 2.8 and 3.0 are closer than 0.3\n2.8 and 3.0 are closer than 0.4\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0], 0.4)\nTrue\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0], 0.6)\nTrue\n 2.8 and 3.0 are closer than 0.5\n2.8 and 3.0 are closer than 0.6\n>>> has_close_elements([1.0, 2.8, 3",
        "\n\n\nWrite a Python function `find_zero(xs: list)` to solve the following problem:\nxs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns only only zero point, even if there are many.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n-0.5\n>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `int_to_mini_roman(number)` to solve the following problem:\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_mini_roman(19) == 'xix'\n>>> int_to_mini_roman(152) == 'clii'\n>>> int_to_mini_roman(426) == 'cdxxvi'\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\n\n\nWrite a Python function `fib4(n: int)` to solve the following problem:\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n\n\n\nWrite a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:\nCheck if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n #################################################################################\n\nWrite a Python function `has_close_elements2(numbers: List[float], threshold: float) -> bool` to solve the following problem:\nCheck if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements2([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements2([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n #################################################################################\n\nWrite a Python function `count_common_elements(numbers1: List[float], numbers2: List[float]) -> int` to solve the following problem:\nGiven two lists of numbers, return the count of common elements.\n>>> count_common_elements([1.0, 2",
        "\n\n\nWrite a Python function `find_zero(xs: list)` to solve the following problem:\nxs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns only only zero point, even if there are many.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n-0.5\n>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `int_to_mini_roman(number)` to solve the following problem:\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_mini_roman(19) == 'xix'\n>>> int_to_mini_roman(152) == 'clii'\n>>> int_to_mini_roman(426) == 'cdxxvi'\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\n\n\nWrite a Python function `fib4(n: int)` to solve the following problem:\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n\n\n\nWrite a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:\nCheck if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a Python function `is_prime(num: int) -> bool` to solve the following problem:\nCheck if the given number is prime.\n>>> is_prime(1)\nFalse\n>>> is_prime(2)\nTrue\n>>> is_prime(3)\nTrue\n>>> is_prime(4)\nFalse\n>>> is_prime(5)\nTrue\n>>> is_prime(6)\nTrue\n>>> is_prime(7)\nTrue\n>>> is_prime(8)\nFalse\n>>> is_prime(9)\nFalse\n>>> is_prime(10)\nTrue\n>>> is_prime(11)\nFalse\n>>> is_prime(12)\nFalse\n>>> is_prime(13)\nFalse\n>>> is_prime(14)\nFalse\n>>> is_prime(15)\nFalse\n>>> is_prime(1"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `count_nums(arr)` to solve the following problem:\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n\n\nWrite a Python function `even_odd_palindrome(n)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n\n\nWrite a Python function `max_element(l: list)` to solve the following problem:\nReturn maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n ",
      "output": [
        "\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `count_nums(arr)` to solve the following problem:\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n\n\nWrite a Python function `even_odd_palindrome(n)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n\n\nWrite a Python function `max_element(l: list)` to solve the following problem:\nReturn maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n #################################################################################\n\n# Write a Python function `get_first_and_last_name(full_name: str) -> Tuple[str, str]` to solve the following problem:\n# Given a full name in the format first_name last_name, return the first and last name separately, without any spaces in it.\n# If the name has more than two names, return the first name and the full name in alphabetical order.\n# The names will not contain the spaces.\n# Example:\n>>> get_first_and_last_name('John Smith')\n('John', 'Smith')\n>>> get_first_and_last_name('John Smith (Jane) Doe')\n('John', 'Smith')\n>>> get_first_and_last_name('Jane Smith (John) Doe')\n('Jane', 'Smith')\n>>> get_first_and_last_name('John",
        "\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `count_nums(arr)` to solve the following problem:\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n\n\nWrite a Python function `even_odd_palindrome(n)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n\n\nWrite a Python function `max_element(l: list)` to solve the following problem:\nReturn maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n ###############################################################################################\n\n\n\n\nWrite a Python function `is_palindrome(n: int) -> bool` to solve the following problem:\nWrite a function `is_palindrome_recursive(n: int) -> bool` which accepts an integer `n` and returns `True` if `n` is a\npalindrome number and `False` if not.\nExample 1:\nInput: 121\nOutput: True\nExample 2:\nInput: 1221\nOutput: False\nNote: The input will be an integer within the range: [\u2212231,  231 \u2212 1].\n###############################################################################################\n\n\n\n\nWrite a Python function `is_palindrome_iterative(n: int) -> bool` to solve the following problem:\nWrite a function `is_palindrome_iterative` which accepts an integer `n` and returns `True` if `n` is a\n",
        "\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `count_nums(arr)` to solve the following problem:\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n\n\nWrite a Python function `even_odd_palindrome(n)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n\n\nWrite a Python function `max_element(l: list)` to solve the following problem:\nReturn maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n ###############################################################################################\n\"\"\"\n\n# time complexity: O(n)\n# space complexity: O(n)\n\ndef separate_paren_groups(paren_string):\n    stack = []\n    stack.append(paren_string)\n    result = []\n    while len(stack) > 0:\n        string = stack.pop()\n        if string[-1] == '(':\n            stack.append(string[1:-1])\n        else:\n            result.append(string)\n    return result\n\ndef group_of_size(x, y, string):\n    if len(string) == x:\n        return True\n\n    if len(string) == y:\n        return False\n\n    return group_of_size(x, y, string[:-1]) or group_of_size(x, y, string[1:])\n\ndef is_valid_parens(string):\n    result = set()\n    i = 0\n    while i < len",
        "\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `count_nums(arr)` to solve the following problem:\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n\n\nWrite a Python function `even_odd_palindrome(n)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n\n\nWrite a Python function `max_element(l: list)` to solve the following problem:\nReturn maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n ##############################################################################################\n\nWrite a Python function `separate_brackets(bracket_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple brackets. Your goal is to\nseparate those brackets into separate strings and return the list of those.\nSeparate groups are balanced (each open bracket is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_brackets('[[ [ ] ] ]')\n[['[[[ ]]]']]\n>>> separate_brackets('[ ]')\n['']\n>>> separate_brackets('[ ]')\n['']\n>>> separate_brackets('[[( ] )]')\n[['[[( ) ]]']]\n>>> separate_brackets('[[( ] )')\n[['[[( ) ]]']]\n>>> separate_brackets('[[( ]')\n[['[[( ) ]]']]\n>>> separate_brackets('[[( )')\n[['[[( ) ]]']]",
        "\n\n\nWrite a Python function `fizz_buzz(n: int)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n\nWrite a Python function `count_nums(arr)` to solve the following problem:\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n\n\nWrite a Python function `even_odd_palindrome(n)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n\n\nWrite a Python function `max_element(l: list)` to solve the following problem:\nReturn maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n ~~~\n\"\"\"\n\n\ndef separate_paren_groups(paren_string):\n    paren_groups = []\n    par_count = 0\n    for c in paren_string:\n        if c == '(':\n            par_count += 1\n        elif c == ')':\n            par_count -= 1\n        if par_count == 0:\n            paren_groups.append(paren_string[paren_string.index(c) + 1:])\n            par_count = 0\n    return paren_groups\n\n\ndef max_element(l):\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n\ndef count_nums(arr):\n    counter = 0\n    for i in arr:\n        if (i > 0):\n            counter += 1\n    return counter\n\n\ndef even_odd_palindrome(n):\n    even_palindrome_"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `largest_smallest_integers(lst)` to solve the following problem:\nCreate a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\n\n\nWrite a Python function `unique_digits(x)` to solve the following problem:\nGiven a list of positive integers x. return a sorted list of all\nelements that hasn't any even digit.\nNote: Returned list should be sorted in increasing order.\nFor example:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n\n\n\nWrite a Python function `add(x: int, y: int)` to solve the following problem:\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n    return x + y\n\n\n\nWrite a Python function `solve(N)` to solve the following problem:\nGiven a positive integer N, return the total sum of its digits in binary.\nExample\nFor N = 1000, the sum of digits will be 1 the output should be \"1\".\nFor N = 150, the sum of digits will be 6 the output should be \"110\".\nFor N = 147, the sum of digits will be 12 the output should be \"1100\".\nVariables:\n@N integer\nConstraints: 0 \u2264 N \u2264 10000.\nOutput:\na string of binary number\n    return bin(sum(int(i) for i in str(N)))[2:]\n\n\n\nWrite a Python function `truncate_number(number: float) -> float` to solve the following problem:\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n ",
      "output": [
        "\n\n\nWrite a Python function `largest_smallest_integers(lst)` to solve the following problem:\nCreate a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\n\n\nWrite a Python function `unique_digits(x)` to solve the following problem:\nGiven a list of positive integers x. return a sorted list of all\nelements that hasn't any even digit.\nNote: Returned list should be sorted in increasing order.\nFor example:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n\n\n\nWrite a Python function `add(x: int, y: int)` to solve the following problem:\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n    return x + y\n\n\n\nWrite a Python function `solve(N)` to solve the following problem:\nGiven a positive integer N, return the total sum of its digits in binary.\nExample\nFor N = 1000, the sum of digits will be 1 the output should be \"1\".\nFor N = 150, the sum of digits will be 6 the output should be \"110\".\nFor N = 147, the sum of digits will be 12 the output should be \"1100\".\nVariables:\n@N integer\nConstraints: 0 \u2264 N \u2264 10000.\nOutput:\na string of binary number\n    return bin(sum(int(i) for i in str(N)))[2:]\n\n\n\nWrite a Python function `truncate_number(number: float) -> float` to solve the following problem:\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n  truncate_number(1.5)\n  0.5\n>>> truncate_number(100.5)\n0.5\n  truncate_number(1.55)\n  0.50\n>>> truncate_number(1.56)\n  1.56\n>>> truncate_number(2.40)\n  2.40\n>>> truncate_number(1.25)\n  1.25\n>>> truncate_number(1.26)\n  1.26\n>>> truncate_number(1.27)\n  1.27\n>>> truncate_number(1.0)\n  1.0\n>>> truncate_number(0.0)\n  0.0\n>>> truncate_number(0.00)\n  0.0\n>>> truncate_number(0.01)\n  0.01\n>>> truncate_number(0.0000001)\n  ",
        "\n\n\nWrite a Python function `largest_smallest_integers(lst)` to solve the following problem:\nCreate a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\n\n\nWrite a Python function `unique_digits(x)` to solve the following problem:\nGiven a list of positive integers x. return a sorted list of all\nelements that hasn't any even digit.\nNote: Returned list should be sorted in increasing order.\nFor example:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n\n\n\nWrite a Python function `add(x: int, y: int)` to solve the following problem:\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n    return x + y\n\n\n\nWrite a Python function `solve(N)` to solve the following problem:\nGiven a positive integer N, return the total sum of its digits in binary.\nExample\nFor N = 1000, the sum of digits will be 1 the output should be \"1\".\nFor N = 150, the sum of digits will be 6 the output should be \"110\".\nFor N = 147, the sum of digits will be 12 the output should be \"1100\".\nVariables:\n@N integer\nConstraints: 0 \u2264 N \u2264 10000.\nOutput:\na string of binary number\n    return bin(sum(int(i) for i in str(N)))[2:]\n\n\n\nWrite a Python function `truncate_number(number: float) -> float` to solve the following problem:\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n 2.0\n>>> truncate_number(1.5)\n1.0\n>>> truncate_number(0.1)\n0.1\n>>> truncate_number(0.0)\n0.0\n>>> truncate_number(-0.0)\n0.0\n>>> truncate_number(12345.678)\n12345.678\n>>> truncate_number(123456789101112.12)\n123456789101112.1\n>>> truncate_number(25.45)\n25.5\n>>> truncate_number(123456789101112.123)\n123456789101112.12\n>>> truncate_number(1234",
        "\n\n\nWrite a Python function `largest_smallest_integers(lst)` to solve the following problem:\nCreate a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\n\n\nWrite a Python function `unique_digits(x)` to solve the following problem:\nGiven a list of positive integers x. return a sorted list of all\nelements that hasn't any even digit.\nNote: Returned list should be sorted in increasing order.\nFor example:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n\n\n\nWrite a Python function `add(x: int, y: int)` to solve the following problem:\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n    return x + y\n\n\n\nWrite a Python function `solve(N)` to solve the following problem:\nGiven a positive integer N, return the total sum of its digits in binary.\nExample\nFor N = 1000, the sum of digits will be 1 the output should be \"1\".\nFor N = 150, the sum of digits will be 6 the output should be \"110\".\nFor N = 147, the sum of digits will be 12 the output should be \"1100\".\nVariables:\n@N integer\nConstraints: 0 \u2264 N \u2264 10000.\nOutput:\na string of binary number\n    return bin(sum(int(i) for i in str(N)))[2:]\n\n\n\nWrite a Python function `truncate_number(number: float) -> float` to solve the following problem:\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n  return 3.5\n>>> truncate_number(0.0)\n0.0\n>>> truncate_number(0.1)\n0.1\n>>> truncate_number(0.9)\n0.1\n>>> truncate_number(1.2)\n1.2\n>>> truncate_number(1.0)\n1.0\n>>> truncate_number(1.1)\n1.0\n>>> truncate_number(1.2)\n1.2\n>>> truncate_number(1.11)\n1.1\n>>> truncate_number(1.111)\n1.2\n>>> truncate_number(1.1111)\n1.2\n>>> truncate_number(1.11111)\n1.2\n>>> truncate_number(1.111111)\n1.2\n>>> truncate_number(1.1111",
        "\n\n\nWrite a Python function `largest_smallest_integers(lst)` to solve the following problem:\nCreate a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\n\n\nWrite a Python function `unique_digits(x)` to solve the following problem:\nGiven a list of positive integers x. return a sorted list of all\nelements that hasn't any even digit.\nNote: Returned list should be sorted in increasing order.\nFor example:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n\n\n\nWrite a Python function `add(x: int, y: int)` to solve the following problem:\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n    return x + y\n\n\n\nWrite a Python function `solve(N)` to solve the following problem:\nGiven a positive integer N, return the total sum of its digits in binary.\nExample\nFor N = 1000, the sum of digits will be 1 the output should be \"1\".\nFor N = 150, the sum of digits will be 6 the output should be \"110\".\nFor N = 147, the sum of digits will be 12 the output should be \"1100\".\nVariables:\n@N integer\nConstraints: 0 \u2264 N \u2264 10000.\nOutput:\na string of binary number\n    return bin(sum(int(i) for i in str(N)))[2:]\n\n\n\nWrite a Python function `truncate_number(number: float) -> float` to solve the following problem:\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n  the result should be 3.\n>>> truncate_number(2.5)\n0.5\n>>> truncate_number(0.0)\n0.0\n>>> truncate_number(-2.54)\n-2.5\n>>> truncate_number(-2.75)\n-2.75\n>>> truncate_number(-0.5)\n0.0\n>>> truncate_number(0)\n0.0\n>>> truncate_number(1.0)\n1.0\n>>> truncate_number(1.1)\n1.1\n>>> truncate_number(1.5)\n1.5\n>>> truncate_number(1.9)\n2.0\n>>> truncate_number(2.0)\n2.0\n>>> truncate_number(1.001)\n1.0\n>>> truncate_number(1.0001)\n1.0\n>>> truncate",
        "\n\n\nWrite a Python function `largest_smallest_integers(lst)` to solve the following problem:\nCreate a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\n\n\nWrite a Python function `unique_digits(x)` to solve the following problem:\nGiven a list of positive integers x. return a sorted list of all\nelements that hasn't any even digit.\nNote: Returned list should be sorted in increasing order.\nFor example:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n\n\n\nWrite a Python function `add(x: int, y: int)` to solve the following problem:\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n    return x + y\n\n\n\nWrite a Python function `solve(N)` to solve the following problem:\nGiven a positive integer N, return the total sum of its digits in binary.\nExample\nFor N = 1000, the sum of digits will be 1 the output should be \"1\".\nFor N = 150, the sum of digits will be 6 the output should be \"110\".\nFor N = 147, the sum of digits will be 12 the output should be \"1100\".\nVariables:\n@N integer\nConstraints: 0 \u2264 N \u2264 10000.\nOutput:\na string of binary number\n    return bin(sum(int(i) for i in str(N)))[2:]\n\n\n\nWrite a Python function `truncate_number(number: float) -> float` to solve the following problem:\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n  => return 3\n>>> truncate_number(0.6)\n0.6\n  => return 0\n>>> truncate_number(2.5)\n1.0\n  => return 2\n>>> truncate_number(-1.1)\n-0.1\n  => return -1\n>>> truncate_number(1.6)\n1.6\n  => return 1\n>>> truncate_number(1.5)\n1.5\n  => return 1\n>>> truncate_number(1.4)\n1.4\n  => return 1\n>>> truncate_number(9.8)\n9.8\n  => return 9\n>>> truncate_number(1000.9)\n1000.9\n  => return 1000\n>>> truncate_number(-1000.9)\n-1000.9\n  => return -"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `max_element(l: list)` to solve the following problem:\nReturn maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n\n\nWrite a Python function `next_smallest(lst)` to solve the following problem:\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\n\n\nWrite a Python function `is_bored(S)` to solve the following problem:\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I'for sentence in sentences)\n\n\n\nWrite a Python function `sort_even(l: list)` to solve the following problem:\nThis function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\n\n\nWrite a Python function `below_zero(operations: List[int]) -> bool` to solve the following problem:\nYou're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue\n ",
      "output": [
        "\n\n\nWrite a Python function `max_element(l: list)` to solve the following problem:\nReturn maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n\n\nWrite a Python function `next_smallest(lst)` to solve the following problem:\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\n\n\nWrite a Python function `is_bored(S)` to solve the following problem:\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I'for sentence in sentences)\n\n\n\nWrite a Python function `sort_even(l: list)` to solve the following problem:\nThis function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\n\n\nWrite a Python function `below_zero(operations: List[int]) -> bool` to solve the following problem:\nYou're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue\n \nYou can assume that all the operations are valid.\n>>> below_zero([1, 2, -4, 5, 6])\nTrue\n>>> below_zero([1, 2, 3, -4, 5])\nFalse\n>>> below_zero([1, -2, 3, -4, 5])\nFalse\n>>> below_zero([1, 2, 3, 4, -5])\nFalse\n>>> below_zero([1, 2, -3, 4, -5])\nFalse\n>>> below_zero([1, 2, 3, -4, -5])\nFalse\n>>> below_zero([1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0])\nTrue\n\n\nWrite a Python function `sort_by_two(l: list)",
        "\n\n\nWrite a Python function `max_element(l: list)` to solve the following problem:\nReturn maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n\n\nWrite a Python function `next_smallest(lst)` to solve the following problem:\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\n\n\nWrite a Python function `is_bored(S)` to solve the following problem:\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I'for sentence in sentences)\n\n\n\nWrite a Python function `sort_even(l: list)` to solve the following problem:\nThis function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\n\n\nWrite a Python function `below_zero(operations: List[int]) -> bool` to solve the following problem:\nYou're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue\n  operations = [1, 2, 3]\n>>> below_zero(operations)\nTrue\noperations = [-4, 2, -2]\n>>> below_zero(operations)\nFalse\noperations = [5, -2, 1]\n>>> below_zero(operations)\nTrue\noperations = [-1, 3, 3]\n>>> below_zero(operations)\nFalse\noperations = [7, 5, 2]\n>>> below_zero(operations)\nTrue\noperations = [6, 6, 5]\n>>> below_zero(operations)\nTrue\noperations = [-1, 5, 1]\n>>> below_zero(operations)\nFalse\n>>> below_zero([])\nFalse\n\n\nWrite a Python function `swap(l1: List[int], l2: List[int]) -> List[int]` to solve the following problem:\nYou'll be given",
        "\n\n\nWrite a Python function `max_element(l: list)` to solve the following problem:\nReturn maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n\n\nWrite a Python function `next_smallest(lst)` to solve the following problem:\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\n\n\nWrite a Python function `is_bored(S)` to solve the following problem:\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I'for sentence in sentences)\n\n\n\nWrite a Python function `sort_even(l: list)` to solve the following problem:\nThis function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\n\n\nWrite a Python function `below_zero(operations: List[int]) -> bool` to solve the following problem:\nYou're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue\n  def is_below_zero(operations: List[int]) -> bool:\n        return any(operation < 0 for operation in operations)\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n\n\nWrite a Python function `sum_of_all_elements(l: list)` to solve the following problem:\nYou are given a list of numbers.\nWrite a function sum_of_all_elements() that returns the total sum of the elements in the list.\n>>> sum_of_all_elements([1, 2, 3])\n6\n>>> sum_of_all_elements([5, 3, -5])\n15\n>>> sum_of_all_elements([])\n0\n>>> sum_of_all_elements([1, 1])\n1\n    l = sorted(set(l))\n    return sum",
        "\n\n\nWrite a Python function `max_element(l: list)` to solve the following problem:\nReturn maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n\n\nWrite a Python function `next_smallest(lst)` to solve the following problem:\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\n\n\nWrite a Python function `is_bored(S)` to solve the following problem:\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I'for sentence in sentences)\n\n\n\nWrite a Python function `sort_even(l: list)` to solve the following problem:\nThis function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\n\n\nWrite a Python function `below_zero(operations: List[int]) -> bool` to solve the following problem:\nYou're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue\n  b = 0\n    m = 0\n    for o in operations:\n        b += o\n        m = max(m, o)\n        if b < 0:\n            return True\n    return False\n\n\n\nWrite a Python function `sort_by_balance(l: list)` to solve the following problem:\nYou'll be given a list of integers.\nWrite a function sort_by_balance() that returns a list sorted according to their balance.\nReturn None if the list is empty.\n>>> sort_by_balance([123, 456, -234, -567])\n[456, -234, 123]\n>>> sort_by_balance([])\n\"\"\"\n\n\nclass Solution:\n    def next_smallest(self, lst):\n        \"\"\"\n        :type lst: List[int]\n        :rtype: int\n        \"\"\"\n        if not lst:\n            return None\n        lst",
        "\n\n\nWrite a Python function `max_element(l: list)` to solve the following problem:\nReturn maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n\n\nWrite a Python function `next_smallest(lst)` to solve the following problem:\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\n\n\nWrite a Python function `is_bored(S)` to solve the following problem:\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I'for sentence in sentences)\n\n\n\nWrite a Python function `sort_even(l: list)` to solve the following problem:\nThis function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\n\n\nWrite a Python function `below_zero(operations: List[int]) -> bool` to solve the following problem:\nYou're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue\n \n>>> below_zero([1, 2, 3, -4, 5])\nFalse\n \n>>> below_zero([1, 2, 3, -4, 5, 6, 7, 8, 9])\nFalse\n \n>>> below_zero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10])\nTrue\n \n>>> below_zero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11])\nFalse\n \n>>> below_zero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12])\nTrue\n\n\nWrite a Python function `sum_of"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `largest_prime_factor(n: int)` to solve the following problem:\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n\n\n\nWrite a Python function `count_distinct_characters(string: str) -> int` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n    return len(set(string.lower()))\n\n\n\nWrite a Python function `monotonic(l: list)` to solve the following problem:\nReturn True is list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1, 20, 4, 10])\nFalse\n>>> monotonic([4, 1, 0, -10])\nTrue\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n\n\n\nWrite a Python function `match_parens(lst)` to solve the following problem:\nYou are given a list of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string '(())()' is good, while the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\nExamples:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n\n\n\nWrite a Python function `mean_absolute_deviation(numbers: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n ",
      "output": [
        "\n\n\nWrite a Python function `largest_prime_factor(n: int)` to solve the following problem:\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n\n\n\nWrite a Python function `count_distinct_characters(string: str) -> int` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n    return len(set(string.lower()))\n\n\n\nWrite a Python function `monotonic(l: list)` to solve the following problem:\nReturn True is list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1, 20, 4, 10])\nFalse\n>>> monotonic([4, 1, 0, -10])\nTrue\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n\n\n\nWrite a Python function `match_parens(lst)` to solve the following problem:\nYou are given a list of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string '(())()' is good, while the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\nExamples:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n\n\n\nWrite a Python function `mean_absolute_deviation(numbers: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n ########\n# 4.1.1.2\n# 4.1.1.3\n# 4.1.2.1\n# 4.1.2.2\n# 4.1.2.3\n# 4.1.3.1\n# 4.1.3.2\n# 4.1.3.3\n# 4.1.4.1\n# 4.1.4.2\n# 4.1.4.3\n# 4.1.5.1\n# 4.1.5.2\n# 4.1.5.3\n# 4.1.6.1\n# 4.1.6.2\n# 4.1.6.3\n# 4.1.7.1\n# 4.1.7.2\n# 4.1.7.",
        "\n\n\nWrite a Python function `largest_prime_factor(n: int)` to solve the following problem:\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n\n\n\nWrite a Python function `count_distinct_characters(string: str) -> int` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n    return len(set(string.lower()))\n\n\n\nWrite a Python function `monotonic(l: list)` to solve the following problem:\nReturn True is list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1, 20, 4, 10])\nFalse\n>>> monotonic([4, 1, 0, -10])\nTrue\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n\n\n\nWrite a Python function `match_parens(lst)` to solve the following problem:\nYou are given a list of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string '(())()' is good, while the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\nExamples:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n\n\n\nWrite a Python function `mean_absolute_deviation(numbers: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n ##########\n\"\"\"\n\n# Exercise 001:\ndef mean_absolute_deviation(numbers):\n    if len(numbers) == 0:\n        return 0\n    sum_of_squares = 0\n    for i in range(len(numbers)):\n        sum_of_squares += pow((numbers[i] - mean(numbers)), 2)\n\n    mean_of_squares = sum_of_squares/len(numbers)\n    return pow(mean_of_squares, 0.5)\n\n# Exercise 002:\ndef mean(numbers):\n    sum = 0\n    for i in numbers:\n        sum += i\n    return sum/len(numbers)\n\n# Exercise 003:\ndef mean_absolute_deviation_using_sum_of_squares(numbers):\n    sum_of_squares = 0\n    for i in numbers:\n        sum_of_squares += pow((i - mean",
        "\n\n\nWrite a Python function `largest_prime_factor(n: int)` to solve the following problem:\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n\n\n\nWrite a Python function `count_distinct_characters(string: str) -> int` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n    return len(set(string.lower()))\n\n\n\nWrite a Python function `monotonic(l: list)` to solve the following problem:\nReturn True is list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1, 20, 4, 10])\nFalse\n>>> monotonic([4, 1, 0, -10])\nTrue\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n\n\n\nWrite a Python function `match_parens(lst)` to solve the following problem:\nYou are given a list of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string '(())()' is good, while the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\nExamples:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n\n\n\nWrite a Python function `mean_absolute_deviation(numbers: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n ##########\n# Write a Python function `mean_absolute_deviation_squared(numbers: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\nMAD^2 = average | (x - x_mean)^2 |\n>>> mean_absolute_deviation_squared([1.0, 2.0, 3.0, 4.0])\n25.0\n ##########\n# Write a Python function `mean_absolute_deviation_squared_with_weight(numbers: List[float], weights: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers and a list of weights, calculate Mean Absolute",
        "\n\n\nWrite a Python function `largest_prime_factor(n: int)` to solve the following problem:\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n\n\n\nWrite a Python function `count_distinct_characters(string: str) -> int` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n    return len(set(string.lower()))\n\n\n\nWrite a Python function `monotonic(l: list)` to solve the following problem:\nReturn True is list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1, 20, 4, 10])\nFalse\n>>> monotonic([4, 1, 0, -10])\nTrue\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n\n\n\nWrite a Python function `match_parens(lst)` to solve the following problem:\nYou are given a list of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string '(())()' is good, while the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\nExamples:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n\n\n\nWrite a Python function `mean_absolute_deviation(numbers: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n ~~~\n>>> mean_absolute_deviation([1.0, 3.0, 4.0, 6.0, 7.0])\n2.0\n>>> mean_absolute_deviation([-1.0, -3.0, -4.0, -6.0])\n1.0\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0])\n1.5\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n3.0\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n4.5\n>>> mean_absolute_deviation([0",
        "\n\n\nWrite a Python function `largest_prime_factor(n: int)` to solve the following problem:\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n\n\n\nWrite a Python function `count_distinct_characters(string: str) -> int` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n    return len(set(string.lower()))\n\n\n\nWrite a Python function `monotonic(l: list)` to solve the following problem:\nReturn True is list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1, 20, 4, 10])\nFalse\n>>> monotonic([4, 1, 0, -10])\nTrue\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n\n\n\nWrite a Python function `match_parens(lst)` to solve the following problem:\nYou are given a list of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string '(())()' is good, while the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\nExamples:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n\n\n\nWrite a Python function `mean_absolute_deviation(numbers: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n ###########\n### DO NOT REMOVE ###\n###########\n\nimport numpy as np\ndef mean_absolute_deviation(numbers):\n    mean = np.mean(numbers)\n    differences = [x-mean for x in numbers]\n    return np.mean(np.abs(differences))\n"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `search(lst)` to solve the following problem:\nYou are given a non-empty list of positive integers. Return the greatest integer that is greater than\nzero, and has a frequency greater than or equal to the value of the integer itself.\nThe frequency of an integer is the number of times it appears in the list.\nIf no such a value exist, return -1.\nExamples:\nsearch([4, 1, 2, 2, 3, 1]) == 2\nsearch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nsearch([5, 5, 4, 4, 4]) == -1\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\n\n\nWrite a Python function `skjkasdkd(lst)` to solve the following problem:\nYou are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.\nExamples:\nFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\nFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\nFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\nFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\nFor lst = [0,81,12,3,1,21] the output should be 3\nFor lst = [0,8,1,2,1,7] the output should be 7\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\n\n\nWrite a Python function `bf(planet1, planet2)` to solve the following problem:\nThere are eight planets in our solar system: the closerst to the Sun\nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2.\nThe function should return a tuple containing all planets whose orbits are\nlocated between the orbit of planet1 and the orbit of planet2, sorted by\nthe proximity to the sun.\nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names.\nExamples\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n\n\n\nWrite a Python function `is_multiply_prime(a)` to solve the following problem:\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.\nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\n\n\nWrite a Python function `intersperse(numbers: List[int], delimeter: int) -> List[int]` to solve the following problem:\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n ",
      "output": [
        "\n\n\nWrite a Python function `search(lst)` to solve the following problem:\nYou are given a non-empty list of positive integers. Return the greatest integer that is greater than\nzero, and has a frequency greater than or equal to the value of the integer itself.\nThe frequency of an integer is the number of times it appears in the list.\nIf no such a value exist, return -1.\nExamples:\nsearch([4, 1, 2, 2, 3, 1]) == 2\nsearch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nsearch([5, 5, 4, 4, 4]) == -1\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\n\n\nWrite a Python function `skjkasdkd(lst)` to solve the following problem:\nYou are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.\nExamples:\nFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\nFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\nFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\nFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\nFor lst = [0,81,12,3,1,21] the output should be 3\nFor lst = [0,8,1,2,1,7] the output should be 7\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\n\n\nWrite a Python function `bf(planet1, planet2)` to solve the following problem:\nThere are eight planets in our solar system: the closerst to the Sun\nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2.\nThe function should return a tuple containing all planets whose orbits are\nlocated between the orbit of planet1 and the orbit of planet2, sorted by\nthe proximity to the sun.\nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names.\nExamples\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n\n\n\nWrite a Python function `is_multiply_prime(a)` to solve the following problem:\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.\nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\n\n\nWrite a Python function `intersperse(numbers: List[int], delimeter: int) -> List[int]` to solve the following problem:\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a Python function `sum_elements_of_list(lst: List[int]) -> int` to solve the following problem:\nGiven a list of integers, find the sum of all the elements.\nExamples:\nsum_elements_of_list([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 103\nsum_elements_of_list([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25\nsum_elements_of_list([1,3,1,32,5107,34,8327",
        "\n\n\nWrite a Python function `search(lst)` to solve the following problem:\nYou are given a non-empty list of positive integers. Return the greatest integer that is greater than\nzero, and has a frequency greater than or equal to the value of the integer itself.\nThe frequency of an integer is the number of times it appears in the list.\nIf no such a value exist, return -1.\nExamples:\nsearch([4, 1, 2, 2, 3, 1]) == 2\nsearch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nsearch([5, 5, 4, 4, 4]) == -1\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\n\n\nWrite a Python function `skjkasdkd(lst)` to solve the following problem:\nYou are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.\nExamples:\nFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\nFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\nFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\nFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\nFor lst = [0,81,12,3,1,21] the output should be 3\nFor lst = [0,8,1,2,1,7] the output should be 7\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\n\n\nWrite a Python function `bf(planet1, planet2)` to solve the following problem:\nThere are eight planets in our solar system: the closerst to the Sun\nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2.\nThe function should return a tuple containing all planets whose orbits are\nlocated between the orbit of planet1 and the orbit of planet2, sorted by\nthe proximity to the sun.\nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names.\nExamples\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n\n\n\nWrite a Python function `is_multiply_prime(a)` to solve the following problem:\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.\nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\n\n\nWrite a Python function `intersperse(numbers: List[int], delimeter: int) -> List[int]` to solve the following problem:\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n ######################################################################################\nWrite a Python function `partition(numbers: List[int], delimeter: int) -> List[List[int]]` to solve the following problem:\nUse partition function defined above to divide input list `numbers' into two lists `part1` and `part2`\nwhere part1 has elements less than `delimeter` and part2 has elements greater than `delimeter`.\n>>> partition([], 4)\n[]\n>>> partition([1, 2, 3], 4)\n[[1, 2, 3], [4]]\n ######################################################################################\nWrite a Python function `partition_list(numbers: List[int], delimeter: int) -> List[List[int]]` to solve the following problem:\nUse partition function defined above to divide input list `numbers' into two lists `part1` and `part2`\nwhere part1 has elements less than `delimeter` and part2 has",
        "\n\n\nWrite a Python function `search(lst)` to solve the following problem:\nYou are given a non-empty list of positive integers. Return the greatest integer that is greater than\nzero, and has a frequency greater than or equal to the value of the integer itself.\nThe frequency of an integer is the number of times it appears in the list.\nIf no such a value exist, return -1.\nExamples:\nsearch([4, 1, 2, 2, 3, 1]) == 2\nsearch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nsearch([5, 5, 4, 4, 4]) == -1\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\n\n\nWrite a Python function `skjkasdkd(lst)` to solve the following problem:\nYou are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.\nExamples:\nFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\nFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\nFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\nFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\nFor lst = [0,81,12,3,1,21] the output should be 3\nFor lst = [0,8,1,2,1,7] the output should be 7\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\n\n\nWrite a Python function `bf(planet1, planet2)` to solve the following problem:\nThere are eight planets in our solar system: the closerst to the Sun\nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2.\nThe function should return a tuple containing all planets whose orbits are\nlocated between the orbit of planet1 and the orbit of planet2, sorted by\nthe proximity to the sun.\nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names.\nExamples\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n\n\n\nWrite a Python function `is_multiply_prime(a)` to solve the following problem:\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.\nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\n\n\nWrite a Python function `intersperse(numbers: List[int], delimeter: int) -> List[int]` to solve the following problem:\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n ########\ndef intersperse(lst, delimeter):\n    result = [lst[0]]\n    for j in range(1, len(lst)):\n        result.append(lst[j])\n        result.append(delimeter)\n    return result\n\n\"\"\"\n\n# Python - 3.6.0\n\ntest_cases = [\n    [[], []],\n    [[], [1]],\n    [[], [1, 2]],\n    [[], [1, 2, 3]],\n    [[1, 2, 3], 4],\n    [[1, 2, 3], 5],\n    [[1, 2, 3, 4, 5], 6],\n    [[1, 2, 3, 4, 5], 7],\n    [[1, 2, 3, 4, 5], 7],\n    [[1, 2, 3, 4, 5",
        "\n\n\nWrite a Python function `search(lst)` to solve the following problem:\nYou are given a non-empty list of positive integers. Return the greatest integer that is greater than\nzero, and has a frequency greater than or equal to the value of the integer itself.\nThe frequency of an integer is the number of times it appears in the list.\nIf no such a value exist, return -1.\nExamples:\nsearch([4, 1, 2, 2, 3, 1]) == 2\nsearch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nsearch([5, 5, 4, 4, 4]) == -1\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\n\n\nWrite a Python function `skjkasdkd(lst)` to solve the following problem:\nYou are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.\nExamples:\nFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\nFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\nFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\nFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\nFor lst = [0,81,12,3,1,21] the output should be 3\nFor lst = [0,8,1,2,1,7] the output should be 7\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\n\n\nWrite a Python function `bf(planet1, planet2)` to solve the following problem:\nThere are eight planets in our solar system: the closerst to the Sun\nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2.\nThe function should return a tuple containing all planets whose orbits are\nlocated between the orbit of planet1 and the orbit of planet2, sorted by\nthe proximity to the sun.\nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names.\nExamples\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n\n\n\nWrite a Python function `is_multiply_prime(a)` to solve the following problem:\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.\nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\n\n\nWrite a Python function `intersperse(numbers: List[int], delimeter: int) -> List[int]` to solve the following problem:\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n ##########\n\nWrite a Python function `find_first_and_last(lst: List[int]) -> Tuple[int, int]` to solve the following problem:\nGiven a sorted list of positive integers, find the first and last value that are not equal,\nand return their sum.\nExamples:\nfind_first_and_last([1, 1, 1, 5, 5]) == (4, 6)\nfind_first_and_last([1, 2, 3, 3, 4, 4, 4]) == (1, 4)\nfind_first_and_last([2, 2, 2, 5]) == (0, 2)\nfind_first_and_last([1, 2, 2, 3, 3, 3, 4, 4, 4]) == (1, 4)\n",
        "\n\n\nWrite a Python function `search(lst)` to solve the following problem:\nYou are given a non-empty list of positive integers. Return the greatest integer that is greater than\nzero, and has a frequency greater than or equal to the value of the integer itself.\nThe frequency of an integer is the number of times it appears in the list.\nIf no such a value exist, return -1.\nExamples:\nsearch([4, 1, 2, 2, 3, 1]) == 2\nsearch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nsearch([5, 5, 4, 4, 4]) == -1\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\n\n\nWrite a Python function `skjkasdkd(lst)` to solve the following problem:\nYou are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.\nExamples:\nFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\nFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\nFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\nFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\nFor lst = [0,81,12,3,1,21] the output should be 3\nFor lst = [0,8,1,2,1,7] the output should be 7\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\n\n\nWrite a Python function `bf(planet1, planet2)` to solve the following problem:\nThere are eight planets in our solar system: the closerst to the Sun\nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2.\nThe function should return a tuple containing all planets whose orbits are\nlocated between the orbit of planet1 and the orbit of planet2, sorted by\nthe proximity to the sun.\nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names.\nExamples\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n\n\n\nWrite a Python function `is_multiply_prime(a)` to solve the following problem:\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.\nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\n\n\nWrite a Python function `intersperse(numbers: List[int], delimeter: int) -> List[int]` to solve the following problem:\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n ###########\nWrite a Python function `interleave(...)` to solve the following problem:\nWrite a Python function that takes as input a list of two or more lists of integers,\nand returns a list of all the integers obtained by performing a sequence of interleaving on the elements in the lists.\n>>> interleave([[1, 2, 3], [4, 5, 6]], [7, 8, 9])\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\nThe list of lists can be any length.\nExample:\n>>> interleave([[1, 2], [4, 5]], [6, 7])\n[1, 2, 6, 7, 4, 5]\n>>> interleave([[1, 2], [3, 4], [5, 6]], [7, "
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `get_positive(l: list)` to solve the following problem:\nReturn only positive numbers in the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]\n    return [e for e in l if e > 0]\n\n\n\nWrite a Python function `words_in_sentence(sentence)` to solve the following problem:\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n\n\nWrite a Python function `eat(number, need, remaining)` to solve the following problem:\nYou're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\nthe number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\nExample:\n* eat(5, 6, 10) -> [11, 4]\n* eat(4, 8, 9) -> [12, 1]\n* eat(1, 10, 10) -> [11, 0]\n* eat(2, 11, 5) -> [7, 0]\nVariables:\n@number : integer\nthe number of carrots that you have eaten.\n@need : integer\nthe number of carrots that you need to eat.\n@remaining : integer\nthe number of remaining carrots thet exist in stock\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\nHave fun :)\n    if(need <= remaining):\n        return [ number + need, remaining-need ]\n    else:\n        return [ number + remaining, 0]\n\n\n\nWrite a Python function `common(l1: list, l2: list)` to solve the following problem:\nReturn sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\n\n\nWrite a Python function `parse_nested_parens(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n ",
      "output": [
        "\n\n\nWrite a Python function `get_positive(l: list)` to solve the following problem:\nReturn only positive numbers in the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]\n    return [e for e in l if e > 0]\n\n\n\nWrite a Python function `words_in_sentence(sentence)` to solve the following problem:\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n\n\nWrite a Python function `eat(number, need, remaining)` to solve the following problem:\nYou're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\nthe number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\nExample:\n* eat(5, 6, 10) -> [11, 4]\n* eat(4, 8, 9) -> [12, 1]\n* eat(1, 10, 10) -> [11, 0]\n* eat(2, 11, 5) -> [7, 0]\nVariables:\n@number : integer\nthe number of carrots that you have eaten.\n@need : integer\nthe number of carrots that you need to eat.\n@remaining : integer\nthe number of remaining carrots thet exist in stock\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\nHave fun :)\n    if(need <= remaining):\n        return [ number + need, remaining-need ]\n    else:\n        return [ number + remaining, 0]\n\n\n\nWrite a Python function `common(l1: list, l2: list)` to solve the following problem:\nReturn sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\n\n\nWrite a Python function `parse_nested_parens(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n ################################################################################\nWrite a Python function `parse_nested_parens_v2(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens_v2('(()()) ((())) () ((())()())')\n[3, 2, 1, 3]\n ################################################################################\nWrite a Python function `find_all_anagrams(s: str, d: str) -> List[str]` to solve the following problem:\nGiven two strings s and d, return all anagrams of s in d.\nIf there is no anagram, return an empty list [].\nE.g. ['a',",
        "\n\n\nWrite a Python function `get_positive(l: list)` to solve the following problem:\nReturn only positive numbers in the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]\n    return [e for e in l if e > 0]\n\n\n\nWrite a Python function `words_in_sentence(sentence)` to solve the following problem:\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n\n\nWrite a Python function `eat(number, need, remaining)` to solve the following problem:\nYou're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\nthe number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\nExample:\n* eat(5, 6, 10) -> [11, 4]\n* eat(4, 8, 9) -> [12, 1]\n* eat(1, 10, 10) -> [11, 0]\n* eat(2, 11, 5) -> [7, 0]\nVariables:\n@number : integer\nthe number of carrots that you have eaten.\n@need : integer\nthe number of carrots that you need to eat.\n@remaining : integer\nthe number of remaining carrots thet exist in stock\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\nHave fun :)\n    if(need <= remaining):\n        return [ number + need, remaining-need ]\n    else:\n        return [ number + remaining, 0]\n\n\n\nWrite a Python function `common(l1: list, l2: list)` to solve the following problem:\nReturn sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\n\n\nWrite a Python function `parse_nested_parens(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n ################################################################################\n\"\"\"\n__author__ = 'Danyang'\n\n\nclass Solution:\n    def parse_nested_parens(self, paren_string):\n        \"\"\"\n        :type paren_string: str\n        :rtype: List[int]\n        \"\"\"\n        ret = []\n        stack = []\n        for i in range(len(paren_string)):\n            if paren_string[i] == '(':\n                stack.append(i)\n            elif paren_string[i] == ')':\n                if len(stack) > 0:\n                    stack.pop()\n                else:\n                    ret.append(i)\n        return ret\n\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(Solution().parse_nested_parens('(()()) ((())) () ((())()())'))\n    print(Solution().parse",
        "\n\n\nWrite a Python function `get_positive(l: list)` to solve the following problem:\nReturn only positive numbers in the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]\n    return [e for e in l if e > 0]\n\n\n\nWrite a Python function `words_in_sentence(sentence)` to solve the following problem:\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n\n\nWrite a Python function `eat(number, need, remaining)` to solve the following problem:\nYou're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\nthe number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\nExample:\n* eat(5, 6, 10) -> [11, 4]\n* eat(4, 8, 9) -> [12, 1]\n* eat(1, 10, 10) -> [11, 0]\n* eat(2, 11, 5) -> [7, 0]\nVariables:\n@number : integer\nthe number of carrots that you have eaten.\n@need : integer\nthe number of carrots that you need to eat.\n@remaining : integer\nthe number of remaining carrots thet exist in stock\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\nHave fun :)\n    if(need <= remaining):\n        return [ number + need, remaining-need ]\n    else:\n        return [ number + remaining, 0]\n\n\n\nWrite a Python function `common(l1: list, l2: list)` to solve the following problem:\nReturn sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\n\n\nWrite a Python function `parse_nested_parens(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n ########################################################################################\nWrite a Python function `group_permutations(l: list, n: int) -> list` to solve the following problem:\nFor a given list of integers,\ngroup all the permutations of the integers within the range of [0, n] into n groups.\nConstraints:\n* l and n are integers within the range [1, 50].\n* l has at least one integer.\n* Each integer from l is unique.\nExample:\n>>> group_permutations([4,3,2,1], 4)\n[[4,3,2,1], [3,2,1,4], [2,1,4,3], [1,4,3,2], [4,3,1,2]]\n\n\"\"\"\n\ndef group_permutations(l, n):\n    result = []\n    def helper(l, n, result):\n        if n == 0:\n            result.",
        "\n\n\nWrite a Python function `get_positive(l: list)` to solve the following problem:\nReturn only positive numbers in the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]\n    return [e for e in l if e > 0]\n\n\n\nWrite a Python function `words_in_sentence(sentence)` to solve the following problem:\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n\n\nWrite a Python function `eat(number, need, remaining)` to solve the following problem:\nYou're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\nthe number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\nExample:\n* eat(5, 6, 10) -> [11, 4]\n* eat(4, 8, 9) -> [12, 1]\n* eat(1, 10, 10) -> [11, 0]\n* eat(2, 11, 5) -> [7, 0]\nVariables:\n@number : integer\nthe number of carrots that you have eaten.\n@need : integer\nthe number of carrots that you need to eat.\n@remaining : integer\nthe number of remaining carrots thet exist in stock\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\nHave fun :)\n    if(need <= remaining):\n        return [ number + need, remaining-need ]\n    else:\n        return [ number + remaining, 0]\n\n\n\nWrite a Python function `common(l1: list, l2: list)` to solve the following problem:\nReturn sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\n\n\nWrite a Python function `parse_nested_parens(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n  --> parse_nested_parens('((())) ((())) () ((())())')\n[2, 3, 1, 1, 3]\n  --> parse_nested_parens('(()()) (() ()) (() ()) ()')\n[2, 3, 1, 1, 1, 3]\n  --> parse_nested_parens('() (() ()) (() ()) (() ())')\n[2, 1]\n  --> parse_nested_parens('() (() ()) (() ()) ()')\n[2, 1]\n  --> parse_nested_parens('() (() ()')\n[2, 1]\n  --> parse_nested_parens('()')\n[2]\n  --> parse_nested_parens('')\n[1]\n  --> parse_nested_parens('()')\n[0]\n  --> parse_nested_parens('')\n\"\"\"\n\ndef",
        "\n\n\nWrite a Python function `get_positive(l: list)` to solve the following problem:\nReturn only positive numbers in the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]\n    return [e for e in l if e > 0]\n\n\n\nWrite a Python function `words_in_sentence(sentence)` to solve the following problem:\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n\n\nWrite a Python function `eat(number, need, remaining)` to solve the following problem:\nYou're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\nthe number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\nExample:\n* eat(5, 6, 10) -> [11, 4]\n* eat(4, 8, 9) -> [12, 1]\n* eat(1, 10, 10) -> [11, 0]\n* eat(2, 11, 5) -> [7, 0]\nVariables:\n@number : integer\nthe number of carrots that you have eaten.\n@need : integer\nthe number of carrots that you need to eat.\n@remaining : integer\nthe number of remaining carrots thet exist in stock\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\nHave fun :)\n    if(need <= remaining):\n        return [ number + need, remaining-need ]\n    else:\n        return [ number + remaining, 0]\n\n\n\nWrite a Python function `common(l1: list, l2: list)` to solve the following problem:\nReturn sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\n\n\nWrite a Python function `parse_nested_parens(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n  return [int(e) for e in str(max(parse_nested_parens(paren_string))) if e.isdigit()]\n\n\n\nWrite a Python function `get_digits_with_occurence(string: str) -> List[int]` to solve the following problem:\nGiven a string, return a list of all the digits present in the string.\nExample 1:\nInput: string = \"12345\"\nOutput: [1,2,3,4,5]\nExample 2:\nInput: string = \"123456789\"\nOutput: [1,2,3,4,5,6,7,8,9]\n\"\"\"\n\ndef get_digits_with_occurence(string):\n    ret = []\n    for e in string:\n        if e.isdigit():\n            ret.append(e)\n    return ret\n\ndef parse_nested"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `get_odd_collatz(n)` to solve the following problem:\nGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the\nprevious term as follows: if the previous term is even, the next term is one half of\nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\nNote:\n1. Collatz(1) is [1].\n2. returned list sorted in increasing order.\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n\n\n\nWrite a Python function `common(l1: list, l2: list)` to solve the following problem:\nReturn sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\n\n\nWrite a Python function `right_angle_triangle(a, b, c)` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or\n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n\n\n\nWrite a Python function `closest_integer(value)` to solve the following problem:\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n\n\n\nWrite a Python function `filter_by_substring(strings: List[str], substring: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n ",
      "output": [
        "\n\n\nWrite a Python function `get_odd_collatz(n)` to solve the following problem:\nGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the\nprevious term as follows: if the previous term is even, the next term is one half of\nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\nNote:\n1. Collatz(1) is [1].\n2. returned list sorted in increasing order.\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n\n\n\nWrite a Python function `common(l1: list, l2: list)` to solve the following problem:\nReturn sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\n\n\nWrite a Python function `right_angle_triangle(a, b, c)` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or\n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n\n\n\nWrite a Python function `closest_integer(value)` to solve the following problem:\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n\n\n\nWrite a Python function `filter_by_substring(strings: List[str], substring: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n ######################################################################################\nWrite a Python function `print_all_words_with_length_greater_than(words: List[str], n: int)\nto solve the following problem:\nGiven a list of words and a length n, print all words that are of length greater than n\nExample:\nprint_all_words_with_length_greater_than(['hello', 'goodbye', 'goodbye'], 3) = ['hello', 'goodbye']\nprint_all_words_with_length_greater_than(['goodbye', 'goodbye', 'goodbye'], 2) = ['goodbye']\nprint_all_words_with_length_greater_than(['goodbye', 'goodbye', 'goodbye'], 1) = []\n\n######################################################################################\nWrite a Python function `print_all_words_with_length_lesser_than(words: List[str], n: int)\n",
        "\n\n\nWrite a Python function `get_odd_collatz(n)` to solve the following problem:\nGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the\nprevious term as follows: if the previous term is even, the next term is one half of\nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\nNote:\n1. Collatz(1) is [1].\n2. returned list sorted in increasing order.\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n\n\n\nWrite a Python function `common(l1: list, l2: list)` to solve the following problem:\nReturn sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\n\n\nWrite a Python function `right_angle_triangle(a, b, c)` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or\n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n\n\n\nWrite a Python function `closest_integer(value)` to solve the following problem:\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n\n\n\nWrite a Python function `filter_by_substring(strings: List[str], substring: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n ####################################################################################\n\"\"\"\n\n\ndef filter_by_substring(strings: list, substring: str) -> list:\n    return [s for s in strings if substring in s]\n\n\ndef filter_by_substring_2(*, strings: list, substring: str) -> list:\n    return [s for s in strings if substring in s]\n\n\ndef filter_by_substring_3(*, strings: list, substring: str) -> list:\n    if len(strings) > 0 and len(substring) > 0:\n        return [s for s in strings if substring in s]\n\n\ndef filter_by_substring_4(*, strings: list, substring: str) -> list:\n    if len(strings) > 0:\n        return [s for s in strings if substring in s]\n    else:\n        return []\n\n\ndef filter_by_substring_5(*, strings: list, substring: str) ->",
        "\n\n\nWrite a Python function `get_odd_collatz(n)` to solve the following problem:\nGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the\nprevious term as follows: if the previous term is even, the next term is one half of\nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\nNote:\n1. Collatz(1) is [1].\n2. returned list sorted in increasing order.\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n\n\n\nWrite a Python function `common(l1: list, l2: list)` to solve the following problem:\nReturn sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\n\n\nWrite a Python function `right_angle_triangle(a, b, c)` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or\n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n\n\n\nWrite a Python function `closest_integer(value)` to solve the following problem:\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n\n\n\nWrite a Python function `filter_by_substring(strings: List[str], substring: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n['cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bcd')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'abc')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ab')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], '')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ab')\n['abc', 'bacd', 'array']\n>>> filter_by_",
        "\n\n\nWrite a Python function `get_odd_collatz(n)` to solve the following problem:\nGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the\nprevious term as follows: if the previous term is even, the next term is one half of\nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\nNote:\n1. Collatz(1) is [1].\n2. returned list sorted in increasing order.\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n\n\n\nWrite a Python function `common(l1: list, l2: list)` to solve the following problem:\nReturn sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\n\n\nWrite a Python function `right_angle_triangle(a, b, c)` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or\n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n\n\n\nWrite a Python function `closest_integer(value)` to solve the following problem:\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n\n\n\nWrite a Python function `filter_by_substring(strings: List[str], substring: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n ####################################################################################\nWrite a Python function `find_subsequences(arr: List[str]) -> List[List[str]]` to solve the following problem:\nFind all possible subsequences of given array of strings.\n>>> find_subsequences(['abc', 'bacd', 'cde', 'array'])\n[[['abc'], ['bacd'], ['cde'], ['array']], [['abc', 'bacd'], ['cde'], ['array']], [['abc', 'bacd', 'cde'], ['array']], [['abc', 'bacd', 'cde', 'array']]]\n####################################################################################\nWrite a Python function `find_subsequences(arr: List[str]) -> List[List[str]]` to solve the following problem:\nFind all possible subsequences of given array of strings.\n>>> find_subsequences(['abc', 'bacd', 'cde', 'array'])\n[[['abc'], ['bacd'], ['cde'], ['array']], [['abc",
        "\n\n\nWrite a Python function `get_odd_collatz(n)` to solve the following problem:\nGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the\nprevious term as follows: if the previous term is even, the next term is one half of\nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\nNote:\n1. Collatz(1) is [1].\n2. returned list sorted in increasing order.\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n\n\n\nWrite a Python function `common(l1: list, l2: list)` to solve the following problem:\nReturn sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\n\n\nWrite a Python function `right_angle_triangle(a, b, c)` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or\n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n\n\n\nWrite a Python function `closest_integer(value)` to solve the following problem:\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n\n\n\nWrite a Python function `filter_by_substring(strings: List[str], substring: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bc')\n['cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bcde')\n['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bcde', True)\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bcde', True)\n['abc', 'bacd', 'array', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bcde', True)\n['abc', 'bacd', 'array']\n\n\"\"\"\n\n\ndef filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `is_happy(s)` to solve the following problem:\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(a) => False\nis_happy(aa) => False\nis_happy(abcd) => True\nis_happy(aabb) => False\nis_happy(adb) => True\nis_happy(xyy) => False\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n\n\n\nWrite a Python function `anti_shuffle(s)` to solve the following problem:\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\nFor example:\nanti_shuffle('Hi') returns 'Hi'\nanti_shuffle('hello') returns 'ehllo'\nanti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    return''.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\n\n\nWrite a Python function `solve(s)` to solve the following problem:\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n\n\nWrite a Python function `filter_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n    return [x for x in values if isinstance(x, int)]\n\n\n\nWrite a Python function `sum_product(numbers: List[int]) -> Tuple[int, int]` to solve the following problem:\nFor a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n ",
      "output": [
        "\n\n\nWrite a Python function `is_happy(s)` to solve the following problem:\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(a) => False\nis_happy(aa) => False\nis_happy(abcd) => True\nis_happy(aabb) => False\nis_happy(adb) => True\nis_happy(xyy) => False\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n\n\n\nWrite a Python function `anti_shuffle(s)` to solve the following problem:\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\nFor example:\nanti_shuffle('Hi') returns 'Hi'\nanti_shuffle('hello') returns 'ehllo'\nanti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    return''.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\n\n\nWrite a Python function `solve(s)` to solve the following problem:\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n\n\nWrite a Python function `filter_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n    return [x for x in values if isinstance(x, int)]\n\n\n\nWrite a Python function `sum_product(numbers: List[int]) -> Tuple[int, int]` to solve the following problem:\nFor a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n \n>>> sum_product([1, 2, 3])\n(0, 6)\n>>> sum_product([1, 2, 3, 4, 5])\n(120, 120)\n>>> sum_product([1, 2, 3, 4, 5, 6])\n(120, 120)\n>>> sum_product([1, 2, 3, 4, 5, 6, 7])\n(120, 120)\n>>> sum_product([1, 2, 3, 4, 5, 6, 7, 8])\n(120, 120)\n>>> sum_product([-1, 2, 3, 4, 5, 6, 7, 8])\n(0, 0)\n",
        "\n\n\nWrite a Python function `is_happy(s)` to solve the following problem:\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(a) => False\nis_happy(aa) => False\nis_happy(abcd) => True\nis_happy(aabb) => False\nis_happy(adb) => True\nis_happy(xyy) => False\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n\n\n\nWrite a Python function `anti_shuffle(s)` to solve the following problem:\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\nFor example:\nanti_shuffle('Hi') returns 'Hi'\nanti_shuffle('hello') returns 'ehllo'\nanti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    return''.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\n\n\nWrite a Python function `solve(s)` to solve the following problem:\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n\n\nWrite a Python function `filter_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n    return [x for x in values if isinstance(x, int)]\n\n\n\nWrite a Python function `sum_product(numbers: List[int]) -> Tuple[int, int]` to solve the following problem:\nFor a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n  return (sum(numbers), product(numbers))\n\n\n\nWrite a Python function `is_prime(n: int) -> bool` to solve the following problem:\nGiven an integer n, return True if n is a prime number and False otherwise.\n>>> is_prime(13)\nTrue\n>>> is_prime(45)\nFalse\n>>> is_prime(9)\nTrue\n>>> is_prime(37)\nFalse\n>>> is_prime(-1)\nTrue\n>>> is_prime(0)\nFalse\n>>> is_prime(101)\nTrue\n>>> is_prime(1000)\nFalse\n>>> is_prime(-1000)\nFalse\n>>> is_prime(10000)\nFalse\n>>> is_prime(-10000)\nTrue\n>>> is_prime(0)\nFalse\n>>> is_prime(99",
        "\n\n\nWrite a Python function `is_happy(s)` to solve the following problem:\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(a) => False\nis_happy(aa) => False\nis_happy(abcd) => True\nis_happy(aabb) => False\nis_happy(adb) => True\nis_happy(xyy) => False\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n\n\n\nWrite a Python function `anti_shuffle(s)` to solve the following problem:\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\nFor example:\nanti_shuffle('Hi') returns 'Hi'\nanti_shuffle('hello') returns 'ehllo'\nanti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    return''.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\n\n\nWrite a Python function `solve(s)` to solve the following problem:\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n\n\nWrite a Python function `filter_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n    return [x for x in values if isinstance(x, int)]\n\n\n\nWrite a Python function `sum_product(numbers: List[int]) -> Tuple[int, int]` to solve the following problem:\nFor a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n  return (sum(numbers), product(numbers))\n\n\n\nWrite a Python function `is_palindrome(s)` to solve the following problem:\nGiven a string, write a function that returns True if the string is a palindrome.\nA palindrome string is a string that reads the same forward and backward.\nFor example:\nis_palindrome('a') => True\nis_palindrome('abba') => True\nis_palindrome('abcd') => True\nis_palindrome('racecar') => False\nis_palindrome('abcd') => False\nis_palindrome('abba') => False\nis_palindrome('abbbbb') => False\nis_palindrome('racecar') => True\nis_palindrome('abcd') => True\n    return s[::-1] == s\n\n\n\nWrite a Python function `all_anagrams(s1: str, s2: str) -> List",
        "\n\n\nWrite a Python function `is_happy(s)` to solve the following problem:\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(a) => False\nis_happy(aa) => False\nis_happy(abcd) => True\nis_happy(aabb) => False\nis_happy(adb) => True\nis_happy(xyy) => False\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n\n\n\nWrite a Python function `anti_shuffle(s)` to solve the following problem:\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\nFor example:\nanti_shuffle('Hi') returns 'Hi'\nanti_shuffle('hello') returns 'ehllo'\nanti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    return''.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\n\n\nWrite a Python function `solve(s)` to solve the following problem:\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n\n\nWrite a Python function `filter_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n    return [x for x in values if isinstance(x, int)]\n\n\n\nWrite a Python function `sum_product(numbers: List[int]) -> Tuple[int, int]` to solve the following problem:\nFor a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n  return (sum(numbers), product(numbers))\n>>> sum_product([1, 2, 3])\n(3, 6)\n>>> sum_product([1, 2, 3, 4, 5, 6])\n(120, 120)\n>>> sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n(120, 1200)\n>>> sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23",
        "\n\n\nWrite a Python function `is_happy(s)` to solve the following problem:\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(a) => False\nis_happy(aa) => False\nis_happy(abcd) => True\nis_happy(aabb) => False\nis_happy(adb) => True\nis_happy(xyy) => False\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n\n\n\nWrite a Python function `anti_shuffle(s)` to solve the following problem:\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\nFor example:\nanti_shuffle('Hi') returns 'Hi'\nanti_shuffle('hello') returns 'ehllo'\nanti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    return''.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\n\n\nWrite a Python function `solve(s)` to solve the following problem:\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n\n\nWrite a Python function `filter_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n    return [x for x in values if isinstance(x, int)]\n\n\n\nWrite a Python function `sum_product(numbers: List[int]) -> Tuple[int, int]` to solve the following problem:\nFor a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n  return (sum(numbers), prod(numbers))\n\"\"\"\n\n#Write a Python function `count_digits(n: int) -> int` to solve the following problem:\n\"\"\"\nCount the number of digits in an integer.\n>>> count_digits(123)\n2\n>>> count_digits(12)\n2\n>>> count_digits(1234)\n3\n>>> count_digits(12345)\n4\n>>> count_digits(1234455)\n5\n>>> count_digits(1234545)\n6\n>>> count_digits(12344455)\n7\n>>> count_digits(123444455)\n8\n>>> count_digits(1234444455)\n9\n>>> count_digits(123444444"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `even_odd_palindrome(n)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `prime_length(string)` to solve the following problem:\nWrite a function that takes a string and returns True if the string\nlength is a prime number or False otherwise\nExamples\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\nprime_length('orange') == False\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n\n\n\nWrite a Python function `exchange(lst1, lst2)` to solve the following problem:\nIn this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nIt is assumed that the input lists will be non-empty.\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n\n\n\nWrite a Python function `rolling_max(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n ",
      "output": [
        "\n\n\nWrite a Python function `even_odd_palindrome(n)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `prime_length(string)` to solve the following problem:\nWrite a function that takes a string and returns True if the string\nlength is a prime number or False otherwise\nExamples\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\nprime_length('orange') == False\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n\n\n\nWrite a Python function `exchange(lst1, lst2)` to solve the following problem:\nIn this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nIt is assumed that the input lists will be non-empty.\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n\n\n\nWrite a Python function `rolling_max(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n ~~~\n\nWrite a Python function `rolling_min(numbers: List[int]) -> List[int]` to solve the following problem:\nGiven a given list of integers, generate a list of rolling minimum element found until given moment in the sequence.\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 2, 3, 2, 3]\n ~~~\n\nWrite a Python function `rolling_sum(numbers: List[int]) -> List[int]` to solve the following problem:\nGiven a given list of integers, generate a list of rolling sum element found until given moment in the sequence.\n>>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n[1, 3, 5, 7, 11, 14",
        "\n\n\nWrite a Python function `even_odd_palindrome(n)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `prime_length(string)` to solve the following problem:\nWrite a function that takes a string and returns True if the string\nlength is a prime number or False otherwise\nExamples\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\nprime_length('orange') == False\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n\n\n\nWrite a Python function `exchange(lst1, lst2)` to solve the following problem:\nIn this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nIt is assumed that the input lists will be non-empty.\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n\n\n\nWrite a Python function `rolling_max(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n ~~~~~~\nGiven [1, 2, 3, 4, 5], generate a list of rolling maximum element found until given moment in the sequence.\n>>> rolling_max([1, 2, 3, 4, 5])\n[1, 2, 3, 4, 5]\n ~~~~~~\nGiven [1, 2, 3, 4, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 10, 11, 12],\ngenerate a list of rolling maximum element found until given moment in the sequence.\n>>> rolling_max([1, 2, 3, 4, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, ",
        "\n\n\nWrite a Python function `even_odd_palindrome(n)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `prime_length(string)` to solve the following problem:\nWrite a function that takes a string and returns True if the string\nlength is a prime number or False otherwise\nExamples\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\nprime_length('orange') == False\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n\n\n\nWrite a Python function `exchange(lst1, lst2)` to solve the following problem:\nIn this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nIt is assumed that the input lists will be non-empty.\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n\n\n\nWrite a Python function `rolling_max(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n \u7ed9\u5b9a\u4e00\u4e2a\u5217\u8868\uff0c\u8fd4\u56de\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u751f\u6210\u7684\u6700\u5927\u503c\u7684\u5217\u8868\n\"\"\"\n\n\ndef rolling_max(numbers):\n    \"\"\"\n    :param numbers: the list of numbers\n    :return: the list of maximum number\n    \"\"\"\n    result = []\n    length = len(numbers)\n    if length == 0:\n        return result\n    max_number = max(numbers)\n    for i in range(length):\n        result.append(max_number)\n        max_number = max(numbers[i:])\n    return result\n\n\nif __name__ == '__main__':\n    print(rolling_max([1, 2, 3, 2, 3, 4, 2]))\n",
        "\n\n\nWrite a Python function `even_odd_palindrome(n)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `prime_length(string)` to solve the following problem:\nWrite a function that takes a string and returns True if the string\nlength is a prime number or False otherwise\nExamples\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\nprime_length('orange') == False\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n\n\n\nWrite a Python function `exchange(lst1, lst2)` to solve the following problem:\nIn this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nIt is assumed that the input lists will be non-empty.\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n\n\n\nWrite a Python function `rolling_max(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a Python function `sum_of_all_odd_numbers(lst: List[int]) -> int` to solve the following problem:\nGiven a list of positive integers, return the sum of all odd numbers in the list.\n>>> sum_of_all_odd_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9])\n15\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a Python function `sum_of_all_even_numbers(lst: List[int]) -> int` to solve the following problem:\nGiven a list of positive integers, return the sum of all even numbers in the list.\n>>> sum_of_all_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9])\n35\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
        "\n\n\nWrite a Python function `even_odd_palindrome(n)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n\n\nWrite a Python function `words_string(s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n\n\nWrite a Python function `prime_length(string)` to solve the following problem:\nWrite a function that takes a string and returns True if the string\nlength is a prime number or False otherwise\nExamples\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\nprime_length('orange') == False\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n\n\n\nWrite a Python function `exchange(lst1, lst2)` to solve the following problem:\nIn this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nIt is assumed that the input lists will be non-empty.\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n\n\n\nWrite a Python function `rolling_max(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n ~~~\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2], 2)\n[1, 2, 3, 3, 3, 3, 4]\n ~~~\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2], 3)\n[1, 2, 3, 3, 3, 3, 4, 4]\n ~~~\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2], 4)\n[1, 2, 3, 3, 3, 3, 4, 4, 4]\n ~~~\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2], 5"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `maximum(arr, k)` to solve the following problem:\nGiven an array arr of integers and a positive integer k, return a sorted list\nof length k with the maximum k numbers in arr.\nExample 1:\nInput: arr = [-3, -4, 5], k = 3\nOutput: [-4, -3, 5]\nExample 2:\nInput: arr = [4, -4, 4], k = 2\nOutput: [4, 4]\nExample 3:\nInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\nOutput: [2]\nNote:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\n\n\nWrite a Python function `valid_date(date)` to solve the following problem:\nYou have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\nfor example:\nvalid_date('03-11-2000') => True\nvalid_date('15-01-2012') => False\nvalid_date('04-0-2040') => False\nvalid_date('06-04-2020') => True\nvalid_date('06/04/2020') => False\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\nWrite a Python function `make_palindrome(string: str) -> str` to solve the following problem:\nFind the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n ",
      "output": [
        "\n\n\nWrite a Python function `maximum(arr, k)` to solve the following problem:\nGiven an array arr of integers and a positive integer k, return a sorted list\nof length k with the maximum k numbers in arr.\nExample 1:\nInput: arr = [-3, -4, 5], k = 3\nOutput: [-4, -3, 5]\nExample 2:\nInput: arr = [4, -4, 4], k = 2\nOutput: [4, 4]\nExample 3:\nInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\nOutput: [2]\nNote:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\n\n\nWrite a Python function `valid_date(date)` to solve the following problem:\nYou have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\nfor example:\nvalid_date('03-11-2000') => True\nvalid_date('15-01-2012') => False\nvalid_date('04-0-2040') => False\nvalid_date('06-04-2020') => True\nvalid_date('06/04/2020') => False\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\nWrite a Python function `make_palindrome(string: str) -> str` to solve the following problem:\nFind the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n  palindrome = 'catac' + 't'\n>>> make_palindrome(palindrome)\n'catac'\n>>> make_palindrome('catac')\n'catac'\n>>> make_palindrome(palindrome)\n'catac'\n\n\nWrite a Python function `find_longest_palindrome(string: str) -> int` to solve the following problem:\nFind the length of the longest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Return the length of the longest palindrome.\n>>> find_longest_palindrome('')\n0\n>>> find_longest_palindrome('cat')\n1\n>>> find_longest_palindrome('cata')\n1\n>>> find_longest_palindrome('catac')\n2\n>>> find_longest_palindrome('catac')\n2\n>>> find",
        "\n\n\nWrite a Python function `maximum(arr, k)` to solve the following problem:\nGiven an array arr of integers and a positive integer k, return a sorted list\nof length k with the maximum k numbers in arr.\nExample 1:\nInput: arr = [-3, -4, 5], k = 3\nOutput: [-4, -3, 5]\nExample 2:\nInput: arr = [4, -4, 4], k = 2\nOutput: [4, 4]\nExample 3:\nInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\nOutput: [2]\nNote:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\n\n\nWrite a Python function `valid_date(date)` to solve the following problem:\nYou have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\nfor example:\nvalid_date('03-11-2000') => True\nvalid_date('15-01-2012') => False\nvalid_date('04-0-2040') => False\nvalid_date('06-04-2020') => True\nvalid_date('06/04/2020') => False\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\nWrite a Python function `make_palindrome(string: str) -> str` to solve the following problem:\nFind the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n  check = ''\n  for i in range(len(string) - len(check)):\n    if string[i:i+len(check)] == check:\n      check += string[i+len(check):]\n    if string[i+len(string)-len(check):] == check:\n      check += string[i+len(string)-len(check):]\n\n>>> make_palindrome('cata')\n'catac'\n>>> make_palindrome('1111')\n'1111'\n>>> make_palindrome('11111')\n'11111'\n>>> make_palindrome('1111111')\n'1111111'\n>>> make_palindrome('11111111')\n'11111111'\n>>> make_palindrome('111111111",
        "\n\n\nWrite a Python function `maximum(arr, k)` to solve the following problem:\nGiven an array arr of integers and a positive integer k, return a sorted list\nof length k with the maximum k numbers in arr.\nExample 1:\nInput: arr = [-3, -4, 5], k = 3\nOutput: [-4, -3, 5]\nExample 2:\nInput: arr = [4, -4, 4], k = 2\nOutput: [4, 4]\nExample 3:\nInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\nOutput: [2]\nNote:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\n\n\nWrite a Python function `valid_date(date)` to solve the following problem:\nYou have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\nfor example:\nvalid_date('03-11-2000') => True\nvalid_date('15-01-2012') => False\nvalid_date('04-0-2040') => False\nvalid_date('06-04-2020') => True\nvalid_date('06/04/2020') => False\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\nWrite a Python function `make_palindrome(string: str) -> str` to solve the following problem:\nFind the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n  while string:\n    if string[-1] == string[-2::-1]:\n        string = string[:-1]\n    else:\n        string += string[-1::-1]\n\n\"\"\"\n\n# def maximum(arr, k):\n#     arr.sort()\n#     ans = arr[-k:]\n#     return ans\n\n# TODO: complete this function\n# def valid_date(date):\n#     return True\n\n# TODO: complete this function\n\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Takes in a string and a substring, and returns how many times the\n    substring is found in the original string.\n    :param string:\n    :param substring:\n    :return:\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')",
        "\n\n\nWrite a Python function `maximum(arr, k)` to solve the following problem:\nGiven an array arr of integers and a positive integer k, return a sorted list\nof length k with the maximum k numbers in arr.\nExample 1:\nInput: arr = [-3, -4, 5], k = 3\nOutput: [-4, -3, 5]\nExample 2:\nInput: arr = [4, -4, 4], k = 2\nOutput: [4, 4]\nExample 3:\nInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\nOutput: [2]\nNote:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\n\n\nWrite a Python function `valid_date(date)` to solve the following problem:\nYou have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\nfor example:\nvalid_date('03-11-2000') => True\nvalid_date('15-01-2012') => False\nvalid_date('04-0-2040') => False\nvalid_date('06-04-2020') => True\nvalid_date('06/04/2020') => False\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\nWrite a Python function `make_palindrome(string: str) -> str` to solve the following problem:\nFind the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n  palindrome = string[0:len(string) - len(string[::-1])]\n    return palindrome\n\n\n\nWrite a Python function `replace_all(str: str, old: str, new: str) -> str` to solve the following problem:\nReplace all occurrences of a string in the original string with another string.\n>>> replace_all('I am a student', 'a', 'e')\n'I am a studente'\n>>> replace_all('abcabcabc', 'a', 'b')\n'abbcabcab'\n>>> replace_all('abcabcabc', 'a', 'z')\n'abcbabcab'\n>>> replace_all('zabcabcabc', 'a', 'z')\n'zabcabcab'\n>>> replace_all('A man, a plan, a canal: Panama', 'a', 'Z')\n'Zman, a plan, a can",
        "\n\n\nWrite a Python function `maximum(arr, k)` to solve the following problem:\nGiven an array arr of integers and a positive integer k, return a sorted list\nof length k with the maximum k numbers in arr.\nExample 1:\nInput: arr = [-3, -4, 5], k = 3\nOutput: [-4, -3, 5]\nExample 2:\nInput: arr = [4, -4, 4], k = 2\nOutput: [4, 4]\nExample 3:\nInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\nOutput: [2]\nNote:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\n\n\nWrite a Python function `valid_date(date)` to solve the following problem:\nYou have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\nfor example:\nvalid_date('03-11-2000') => True\nvalid_date('15-01-2012') => False\nvalid_date('04-0-2040') => False\nvalid_date('06-04-2020') => True\nvalid_date('06/04/2020') => False\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\nWrite a Python function `make_palindrome(string: str) -> str` to solve the following problem:\nFind the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n  string = 'cata'\n    while True:\n        if string[0] in string[1:]:\n            string = string[string.index(string[0])+1:].rstrip(string[0]) + string[:string.index(string[0])]\n        else:\n            break\n\"\"\""
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `count_nums(arr)` to solve the following problem:\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `change_base(x: int, base: int)` to solve the following problem:\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n\n\nWrite a Python function `add(x: int, y: int)` to solve the following problem:\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n    return x + y\n\n\n\nWrite a Python function `string_xor(a: str, b: str) -> str` to solve the following problem:\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n ",
      "output": [
        "\n\n\nWrite a Python function `count_nums(arr)` to solve the following problem:\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `change_base(x: int, base: int)` to solve the following problem:\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n\n\nWrite a Python function `add(x: int, y: int)` to solve the following problem:\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n    return x + y\n\n\n\nWrite a Python function `string_xor(a: str, b: str) -> str` to solve the following problem:\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n  def string_xor(a, b):\n    count = 0\n    for i in range(0, len(a)):\n        count += a[i]\n    for j in range(0, len(b)):\n        count ^= b[j]\n    return str(count)\n\n\n\nWrite a Python function `merge_two_sorted_arrays(arr1: list, arr2: list) -> list` to solve the following problem:\nMerge two sorted arrays.\n>>> merge_two_sorted_arrays([1, 2, 3], [2, 3, 4])\n[1, 2, 3, 2, 3, 4]\n>>> merge_two_sorted_arrays([1, 2, 3, 4], [4, 5, 6, 7])\n[1, 2, 3, 4, 4, 5, 6,",
        "\n\n\nWrite a Python function `count_nums(arr)` to solve the following problem:\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `change_base(x: int, base: int)` to solve the following problem:\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n\n\nWrite a Python function `add(x: int, y: int)` to solve the following problem:\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n    return x + y\n\n\n\nWrite a Python function `string_xor(a: str, b: str) -> str` to solve the following problem:\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n  return a ^ b\nExample\nFor a = '111', b = '011', the result should be '101'.\nFor a = '011', b = '111', the result should be '010'.\nFor a = '011', b = '010', the result should be '111'.\n\"\"\"\n\ndef string_xor(a, b):\n    ret = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            ret += a[i]\n        else:\n            ret += \"0\"\n    return ret\n\n\ndef reverse_delete(s, c):\n    \"\"\"\n    returns if the result of string deletion and reverse deletion is the same as the original string\n    \"\"\"\n    return s == \"\".join(c)\n\n\ndef change_base(x, base):\n    ret = \"\"\n    while x > ",
        "\n\n\nWrite a Python function `count_nums(arr)` to solve the following problem:\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `change_base(x: int, base: int)` to solve the following problem:\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n\n\nWrite a Python function `add(x: int, y: int)` to solve the following problem:\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n    return x + y\n\n\n\nWrite a Python function `string_xor(a: str, b: str) -> str` to solve the following problem:\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n  If a and b are not of same length, then they will be padded with 0s.\n>>> string_xor('010', '110', 5)\n'00001000'\n>>> string_xor('010', '', 5)\n'00000000'\n>>> string_xor('010', '110', 0)\n'00001000'\n>>> string_xor('010', '110', 3)\n'00000000'\n>>> string_xor('010', '110', -1)\n'00000000'\n>>> string_xor('010', '', 0)\n'00001000'\n>>> string_xor('010', '', 3)",
        "\n\n\nWrite a Python function `count_nums(arr)` to solve the following problem:\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `change_base(x: int, base: int)` to solve the following problem:\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n\n\nWrite a Python function `add(x: int, y: int)` to solve the following problem:\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n    return x + y\n\n\n\nWrite a Python function `string_xor(a: str, b: str) -> str` to solve the following problem:\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n  if a and b are not equal in length, add 0s.\n>>> string_xor('101', '010')\n'001'\n>>> string_xor('010001', '000100')\n'010000'\n>>> string_xor('111111', '101111')\n'000000'\n>>> string_xor('111111', '111111')\n'000000'\n>>> string_xor('111111', '111111', 2)\n'111100'\n>>> string_xor('111111', '111111', 3)\n'000000'\n>>> string_xor('11",
        "\n\n\nWrite a Python function `count_nums(arr)` to solve the following problem:\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `change_base(x: int, base: int)` to solve the following problem:\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n\n\nWrite a Python function `add(x: int, y: int)` to solve the following problem:\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n    return x + y\n\n\n\nWrite a Python function `string_xor(a: str, b: str) -> str` to solve the following problem:\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n \u00a0return ''.join([chr(ord(a) ^ ord(b)) for a, b in zip(a, b)])\n\n\n\nWrite a Python function `string_multiply(x: str, n: int) -> str` to solve the following problem:\nMultiply string x by n\n>>> string_multiply('abc', 2)\n'abcabc'\n>>> string_multiply('abc', 20)\n'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `special_factorial(n)` to solve the following problem:\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n288\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\n\n\nWrite a Python function `is_nested(string)` to solve the following problem:\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return True if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\nis_nested('[[]]') \u279e True\nis_nested('[]]]]]]][[[[[]') \u279e False\nis_nested('[][]') \u279e False\nis_nested('[]') \u279e False\nis_nested('[[][]]') \u279e True\nis_nested('[[]][[') \u279e True\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n\n\n\nWrite a Python function `select_words(s, n)` to solve the following problem:\nGiven a string s and a natural number n, you have been tasked to implement\na function that returns a list of all words from string s that contain exactly\nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `longest(strings: List[str]) -> Optional[str]` to solve the following problem:\nOut of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'\n ",
      "output": [
        "\n\n\nWrite a Python function `special_factorial(n)` to solve the following problem:\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n288\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\n\n\nWrite a Python function `is_nested(string)` to solve the following problem:\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return True if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\nis_nested('[[]]') \u279e True\nis_nested('[]]]]]]][[[[[]') \u279e False\nis_nested('[][]') \u279e False\nis_nested('[]') \u279e False\nis_nested('[[][]]') \u279e True\nis_nested('[[]][[') \u279e True\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n\n\n\nWrite a Python function `select_words(s, n)` to solve the following problem:\nGiven a string s and a natural number n, you have been tasked to implement\na function that returns a list of all words from string s that contain exactly\nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `longest(strings: List[str]) -> Optional[str]` to solve the following problem:\nOut of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'\n \tlongest(['a', 'b', 'c'])\n>>> longest(['a', 'bb', 'ccc', 'dd'])\n'ccc'\n>>> longest(['aaa', 'bbb', 'ccc', 'ddd', 'ee', 'fff', 'ggg', 'hhh', 'iii', 'jjj', 'kkk'])\n'hhh'\n>>> longest(['aaa', 'bbb', 'ccc', 'ddd', 'ee', 'fff', 'ggg', 'hhh', 'iii', 'jjj', 'kkk', 'lll','mmm', 'nnn', 'ooo', 'ppp', 'qqq', 'rrr','sss', 'ttt', 'uuu', 'vvv', 'www', 'xxx', 'yyy', 'zzz', 'aaa', 'bbb', 'ccc', 'ddd', 'ee', 'fff', 'ggg', 'hhh', 'iii', '",
        "\n\n\nWrite a Python function `special_factorial(n)` to solve the following problem:\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n288\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\n\n\nWrite a Python function `is_nested(string)` to solve the following problem:\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return True if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\nis_nested('[[]]') \u279e True\nis_nested('[]]]]]]][[[[[]') \u279e False\nis_nested('[][]') \u279e False\nis_nested('[]') \u279e False\nis_nested('[[][]]') \u279e True\nis_nested('[[]][[') \u279e True\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n\n\n\nWrite a Python function `select_words(s, n)` to solve the following problem:\nGiven a string s and a natural number n, you have been tasked to implement\na function that returns a list of all words from string s that contain exactly\nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `longest(strings: List[str]) -> Optional[str]` to solve the following problem:\nOut of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'\n  long_string = None\n    for string in strings:\n        if long_string is None or len(string) > len(long_string):\n            long_string = string\n    return long_string\n\n\n\nWrite a Python function `count_unique_letters(word: str) -> int` to solve the following problem:\nCount the number of unique letters in the given word. If the given word is empty return 0.\nNote: the function will accept only lower case letters.\n>>> count_unique_letters('abc')\n3\n>>> count_unique_letters('abcde')\n2\n>>> count_unique_letters('abcde')\n2\n>>> count_unique_letters('')\n0\n>>> count_unique_letters('abcabc')\n0\n>>> count_unique_letters('a')\n0\n>>> count_unique_letters('a')\n0\n>>> count_unique_letters('abc')\n3\n",
        "\n\n\nWrite a Python function `special_factorial(n)` to solve the following problem:\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n288\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\n\n\nWrite a Python function `is_nested(string)` to solve the following problem:\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return True if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\nis_nested('[[]]') \u279e True\nis_nested('[]]]]]]][[[[[]') \u279e False\nis_nested('[][]') \u279e False\nis_nested('[]') \u279e False\nis_nested('[[][]]') \u279e True\nis_nested('[[]][[') \u279e True\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n\n\n\nWrite a Python function `select_words(s, n)` to solve the following problem:\nGiven a string s and a natural number n, you have been tasked to implement\na function that returns a list of all words from string s that contain exactly\nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `longest(strings: List[str]) -> Optional[str]` to solve the following problem:\nOut of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'\n ################################################################################\n'''\n\n################################################################################\n\ndef is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n################################################################################\n\ndef select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].",
        "\n\n\nWrite a Python function `special_factorial(n)` to solve the following problem:\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n288\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\n\n\nWrite a Python function `is_nested(string)` to solve the following problem:\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return True if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\nis_nested('[[]]') \u279e True\nis_nested('[]]]]]]][[[[[]') \u279e False\nis_nested('[][]') \u279e False\nis_nested('[]') \u279e False\nis_nested('[[][]]') \u279e True\nis_nested('[[]][[') \u279e True\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n\n\n\nWrite a Python function `select_words(s, n)` to solve the following problem:\nGiven a string s and a natural number n, you have been tasked to implement\na function that returns a list of all words from string s that contain exactly\nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `longest(strings: List[str]) -> Optional[str]` to solve the following problem:\nOut of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'\n  the_longest_string = longest(['aaa', 'aab', 'aab'])\n  if len(the_longest_string) == 5:\n     print(the_longest_string)\n\n\"\"\"\n\n\ndef is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n\ndef select_words(s, n):\n    result = []\n    for",
        "\n\n\nWrite a Python function `special_factorial(n)` to solve the following problem:\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n288\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\n\n\nWrite a Python function `is_nested(string)` to solve the following problem:\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return True if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\nis_nested('[[]]') \u279e True\nis_nested('[]]]]]]][[[[[]') \u279e False\nis_nested('[][]') \u279e False\nis_nested('[]') \u279e False\nis_nested('[[][]]') \u279e True\nis_nested('[[]][[') \u279e True\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n\n\n\nWrite a Python function `select_words(s, n)` to solve the following problem:\nGiven a string s and a natural number n, you have been tasked to implement\na function that returns a list of all words from string s that contain exactly\nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `longest(strings: List[str]) -> Optional[str]` to solve the following problem:\nOut of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'\n  longest(['a', 'b', 'c', 'd'])\n'a'\n>>> longest(['aa', 'bb', 'cc', 'dd', 'ee', 'ff'])\n'dd'\n>>> longest(['aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'gg', 'hh', 'iii'])\n'hh'\n>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])\n'j'\n>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'])\n'k'\n>>> longest(['abc', 'abd', 'acd', 'abb', 'ad', 'ab'])\n'abc'\n>>> longest(['abc', 'abd', 'acd', 'abb', 'ad', 'ab', '"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `next_smallest(lst)` to solve the following problem:\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\n\n\nWrite a Python function `largest_smallest_integers(lst)` to solve the following problem:\nCreate a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\n\n\nWrite a Python function `rescale_to_unit(numbers: List[float]) -> List[float]` to solve the following problem:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\n\n\nWrite a Python function `triangle_area(a, b, c)` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle.\nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater\nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n ",
      "output": [
        "\n\n\nWrite a Python function `next_smallest(lst)` to solve the following problem:\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\n\n\nWrite a Python function `largest_smallest_integers(lst)` to solve the following problem:\nCreate a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\n\n\nWrite a Python function `rescale_to_unit(numbers: List[float]) -> List[float]` to solve the following problem:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\n\n\nWrite a Python function `triangle_area(a, b, c)` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle.\nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater\nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n  If a divides b, then a must be the greatest common divisor of b and a.\n>>> greatest_common_divisor(25, 16)\n6\n  If a and b are coprime, then a must be the greatest common divisor of b and a.\n>>> greatest_common_divisor(6, 20)\n6\n  If a is not coprime to b, then return -1\n>>> greatest_common_divisor(22, 4)\n22\n>>> greatest_common_divisor(4, 2)\n2\n>>> greatest_common_divisor(1, 2)\n1\n>>> greatest_common_divisor(1, 1)\n1\n>>> greatest_common_divisor(0, 0)\n0\n>>> greatest_common_divisor(1, 0)\n0\n>>> greatest_common",
        "\n\n\nWrite a Python function `next_smallest(lst)` to solve the following problem:\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\n\n\nWrite a Python function `largest_smallest_integers(lst)` to solve the following problem:\nCreate a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\n\n\nWrite a Python function `rescale_to_unit(numbers: List[float]) -> List[float]` to solve the following problem:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\n\n\nWrite a Python function `triangle_area(a, b, c)` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle.\nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater\nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n  The greatest common divisor of 2 numbers x and y is the greatest number that\n divides both x and y without leaving any remainder.\nExample:\ngreatest_common_divisor(10, 5)\n2\n>>> greatest_common_divisor(17, 58)\n9\n>>> greatest_common_divisor(13, 10)\n10\n>>> greatest_common_divisor(16, 7)\n1\n\n\nWrite a Python function `fraction_to_int(fraction: str) -> int` to solve the following problem:\nConvert a decimal fraction (represented as a string) to a integer.\nGiven a string that represents a decimal fraction, return the integer that represents it.\nIf the fraction's integer part is greater than 255, return -1.\nExamples:\nfraction_to_int('1/2') == 5\nfraction",
        "\n\n\nWrite a Python function `next_smallest(lst)` to solve the following problem:\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\n\n\nWrite a Python function `largest_smallest_integers(lst)` to solve the following problem:\nCreate a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\n\n\nWrite a Python function `rescale_to_unit(numbers: List[float]) -> List[float]` to solve the following problem:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\n\n\nWrite a Python function `triangle_area(a, b, c)` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle.\nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater\nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n  return None if either of the arguments is zero.\nExamples:\ngreatest_common_divisor(13, 6) == 6\ngreatest_common_divisor(3, 8) == 2\ngreatest_common_divisor(4, 16) == 2\ngreatest_common_divisor(0, 0) == None\n>>> greatest_common_divisor(1, 2) == 1\n>>> greatest_common_divisor(1, 5) == 5\n>>> greatest_common_divisor(83, 82) == 8\n>>> greatest_common_divisor(90, 75) == 7\n>>> greatest_common_divisor(112345, 112347) == 112347\n>>> greatest_common_divisor(11234567,",
        "\n\n\nWrite a Python function `next_smallest(lst)` to solve the following problem:\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\n\n\nWrite a Python function `largest_smallest_integers(lst)` to solve the following problem:\nCreate a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\n\n\nWrite a Python function `rescale_to_unit(numbers: List[float]) -> List[float]` to solve the following problem:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\n\n\nWrite a Python function `triangle_area(a, b, c)` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle.\nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater\nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n 2 * 3 * 5 = 25\n>>> greatest_common_divisor(2, 8)\n4\n>>> greatest_common_divisor(17, 3)\n2\n>>> greatest_common_divisor(3, 1)\n3\n>>> greatest_common_divisor(0, 0)\n0\n>>> greatest_common_divisor(4, 2)\n2\n>>> greatest_common_divisor(10, 4)\n1\n>>> greatest_common_divisor(40, 100)\n10\n>>> greatest_common_divisor(2, 3)\n2\n>>> greatest_common_divisor(100, 10)\n50\n>>> greatest_common_divisor(10, 9)\n10\n>>> greatest_common_divisor(100, 35)",
        "\n\n\nWrite a Python function `next_smallest(lst)` to solve the following problem:\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\n\n\nWrite a Python function `largest_smallest_integers(lst)` to solve the following problem:\nCreate a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\n\n\nWrite a Python function `rescale_to_unit(numbers: List[float]) -> List[float]` to solve the following problem:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\n\n\nWrite a Python function `triangle_area(a, b, c)` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle.\nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater\nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n \ndef greatest_common_divisor(a: int, b: int) -> int:\n    if a < b:\n        a, b = b, a\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nWrite a Python function `square_root(x: int) -> int` to solve the following problem:\nReturn the square root of a number\n>>> square_root(4)\n2\n>>> square_root(25)\n5\n>>> square_root(0)\n0\n>>> square_root(1)\n1\n>>> square_root(-1)\n1\n>>> square_root(-10)\n5\n>>> square_root(10)\n2\n>>> square_root(50)\n12.5\n>>> square_root(100)\n50\n>>> square_root(999)\n100"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `sort_even(l: list)` to solve the following problem:\nThis function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `median(l: list)` to solve the following problem:\nReturn median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n3\n>>> median([-10, 4, 6, 1000, 10, 20])\n15.0\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\n\n\nWrite a Python function `sort_numbers(numbers: str) -> str` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n       'six': 6,\n       'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return''.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n\n\n\nWrite a Python function `all_prefixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n ",
      "output": [
        "\n\n\nWrite a Python function `sort_even(l: list)` to solve the following problem:\nThis function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `median(l: list)` to solve the following problem:\nReturn median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n3\n>>> median([-10, 4, 6, 1000, 10, 20])\n15.0\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\n\n\nWrite a Python function `sort_numbers(numbers: str) -> str` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n       'six': 6,\n       'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return''.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n\n\n\nWrite a Python function `all_prefixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n  >>> all_prefixes('ab')\n['ab']\n>>> all_prefixes('ab10')\n['ab1', 'ab10']\n>>> all_prefixes('10abc')\n['10ab', '10abc']\n>>> all_prefixes('a1b2c3')\n['ac', 'ac1', 'ac10']\n>>> all_prefixes('100010001000101011')\n['10001000100010101101', '1000100010001010110']\n>>> all_prefixes('0010001011010101101')\n['00100010110101011010']\n>>> all_",
        "\n\n\nWrite a Python function `sort_even(l: list)` to solve the following problem:\nThis function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `median(l: list)` to solve the following problem:\nReturn median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n3\n>>> median([-10, 4, 6, 1000, 10, 20])\n15.0\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\n\n\nWrite a Python function `sort_numbers(numbers: str) -> str` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n       'six': 6,\n       'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return''.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n\n\n\nWrite a Python function `all_prefixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a Python function `all_suffixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all suffixes from shortest to longest of the input string\n>>> all_suffixes('abc')\n['', 'b', 'c', 'cab', 'cba']\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a Python function `all_prefixes_and_suffixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all prefixes and suffixes from shortest to longest of the input string\n>>> all_prefixes_and_suffixes('abc')\n['', 'a', 'aba', 'ababc', 'abcba']\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a Python function `all_substrings(string: str) -> List[str]` to solve the following problem:\nReturn list of all substrings from shortest to longest of the",
        "\n\n\nWrite a Python function `sort_even(l: list)` to solve the following problem:\nThis function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `median(l: list)` to solve the following problem:\nReturn median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n3\n>>> median([-10, 4, 6, 1000, 10, 20])\n15.0\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\n\n\nWrite a Python function `sort_numbers(numbers: str) -> str` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n       'six': 6,\n       'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return''.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n\n\n\nWrite a Python function `all_prefixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n  prefix = 'a'\n    length = 1\n    while i < len(string):\n        if string[i:i + length] == prefix:\n            return [prefix]\n        i += 1\n    return []\n",
        "\n\n\nWrite a Python function `sort_even(l: list)` to solve the following problem:\nThis function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `median(l: list)` to solve the following problem:\nReturn median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n3\n>>> median([-10, 4, 6, 1000, 10, 20])\n15.0\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\n\n\nWrite a Python function `sort_numbers(numbers: str) -> str` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n       'six': 6,\n       'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return''.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n\n\n\nWrite a Python function `all_prefixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n  s = 'a b c'\n    return [s[i:len(s)] for i in range(len(s)) if s[i:len(s)] == s[:len(s) - i] + s[len(s) - i:]]\n\n\n\nWrite a Python function `all_suffixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all suffixes from shortest to longest of the input string\n>>> all_suffixes('abc')\n['c', 'bc', 'abc']\n  s = 'a b c'\n    return [s[i:len(s)] for i in range(len(s)) if s[i:len(s)] == s[:len(s) - i] + s[len(s) - i:]]\n",
        "\n\n\nWrite a Python function `sort_even(l: list)` to solve the following problem:\nThis function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\n\n\nWrite a Python function `sum_squares(lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n\n\nWrite a Python function `median(l: list)` to solve the following problem:\nReturn median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n3\n>>> median([-10, 4, 6, 1000, 10, 20])\n15.0\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\n\n\nWrite a Python function `sort_numbers(numbers: str) -> str` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n       'six': 6,\n       'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return''.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n\n\n\nWrite a Python function `all_prefixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n ###############################################################################################\n\nWrite a Python function `longest_common_prefix(a: str, b: str) -> str` to solve the following problem:\nReturn the longest common prefix of a and b\n>>> longest_common_prefix('abc', 'abd')\n'ab'\n>>> longest_common_prefix('abcdef', 'fedcba')\n'fed'\n>>> longest_common_prefix('abcdef', 'fedcba')\n'fed'\n>>> longest_common_prefix('abcdef', 'fedcba')\n'fed'\n>>> longest_common_prefix('abcdef', 'fedcba')\n'fed'\n>>> longest_common_prefix('abcdef', 'fedcba')\n'fed'\n\n###############################################################################################\n\nWrite a Python function `longest_common_subsequence(a: str, b: str) -> List[str]` to solve the following problem:\nReturn the longest common subsequence of a and b\n>>> longest"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `decimal_to_binary(decimal)` to solve the following problem:\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n\n\nWrite a Python function `can_arrange(arr)` to solve the following problem:\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\n\n\nWrite a Python function `even_odd_palindrome(n)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n\n\nWrite a Python function `words_in_sentence(sentence)` to solve the following problem:\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n\n\nWrite a Python function `string_sequence(n: int) -> str` to solve the following problem:\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n ",
      "output": [
        "\n\n\nWrite a Python function `decimal_to_binary(decimal)` to solve the following problem:\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n\n\nWrite a Python function `can_arrange(arr)` to solve the following problem:\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\n\n\nWrite a Python function `even_odd_palindrome(n)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n\n\nWrite a Python function `words_in_sentence(sentence)` to solve the following problem:\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n\n\nWrite a Python function `string_sequence(n: int) -> str` to solve the following problem:\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nThe sequence of numbers is 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,",
        "\n\n\nWrite a Python function `decimal_to_binary(decimal)` to solve the following problem:\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n\n\nWrite a Python function `can_arrange(arr)` to solve the following problem:\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\n\n\nWrite a Python function `even_odd_palindrome(n)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n\n\nWrite a Python function `words_in_sentence(sentence)` to solve the following problem:\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n\n\nWrite a Python function `string_sequence(n: int) -> str` to solve the following problem:\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n ################################################################################\nWrite a Python function to count the number of prime numbers below a given number.\n\nExamples\ncount_primes(10) # returns 5\ncount_primes(1)   # returns 0\ncount_primes(2)   # returns 2\ncount_primes(3)   # returns 3\ncount_primes(14)  # returns 3\ncount_primes(23)  # returns 2\ncount_primes(20)  # returns 1\ncount_primes(65)  # returns 1\n################################################################################\nWrite a Python function to count the number of prime numbers below a given number.\n\nExamples\ncount_primes(10) # returns 5\ncount_primes(1)   # returns 0\ncount_primes(2)   # returns 2\ncount_primes(3)   # returns 3\ncount_primes(14) ",
        "\n\n\nWrite a Python function `decimal_to_binary(decimal)` to solve the following problem:\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n\n\nWrite a Python function `can_arrange(arr)` to solve the following problem:\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\n\n\nWrite a Python function `even_odd_palindrome(n)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n\n\nWrite a Python function `words_in_sentence(sentence)` to solve the following problem:\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n\n\nWrite a Python function `string_sequence(n: int) -> str` to solve the following problem:\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n ################################################################################\n################################################################################\n\n\"\"\"\n\n\ndef string_sequence(n):\n    new_lst = []\n    for i in range(n):\n        new_lst.append(str(i))\n    return \" \".join(new_lst)\n\n\ndef is_prime(num):\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    i = 3\n    while i * i <= num:\n        if num % i == 0:\n            return False\n        i += 2\n    return True\n\ndef string_sequence_prime(n):\n    new_lst = [str(i) for i in range(n) if is_prime(i)]\n    return \" \".join(new_lst)\n\n\ndef is_palindrome(n):\n    x = 0\n    y = n\n    while x < n/2:  # Find the middle element\n        if not (x == n",
        "\n\n\nWrite a Python function `decimal_to_binary(decimal)` to solve the following problem:\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n\n\nWrite a Python function `can_arrange(arr)` to solve the following problem:\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\n\n\nWrite a Python function `even_odd_palindrome(n)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n\n\nWrite a Python function `words_in_sentence(sentence)` to solve the following problem:\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n\n\nWrite a Python function `string_sequence(n: int) -> str` to solve the following problem:\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n #############\n#  #  #  #  #  #  #  #  #  #  #  #  #  #\n#  #  #  #  #  #  #  #  #  #  #  #  #  #\n#  #  #  #  #  #  #  #  #  #  #  #  #  #  #\n#  #  #  #  #  #  #  #  #  #  #  #  #  #  #\n\nWrite a Python function `square_root(n)` to solve the following problem:\nGiven an integer n, return the square root of n.\nThe square root of a negative integer n is represented by the reciprocal of the positive integer n.\nThe square root of n is calculated using the following formula:\nsqrt(x) = (x +- 1) / 2",
        "\n\n\nWrite a Python function `decimal_to_binary(decimal)` to solve the following problem:\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n\n\nWrite a Python function `can_arrange(arr)` to solve the following problem:\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\n\n\nWrite a Python function `even_odd_palindrome(n)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n\n\nWrite a Python function `words_in_sentence(sentence)` to solve the following problem:\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n\n\nWrite a Python function `string_sequence(n: int) -> str` to solve the following problem:\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n ###########################################################################################\n\nWrite a Python function `find_missing_number(seq)` to solve the following problem:\nGiven an unsorted array of integers, find the missing number.\nExamples:\nfind_missing_number([2,3,4,1,5]) = 6\nfind_missing_number([1,3,4,2,5]) = 0\nfind_missing_number([1,2,3,4,5]) = 6\nfind_missing_number([1,2,3,4,5,6,7,8,9]) = 10\nfind_missing_number([1,2,3,4,5,6,7,8,9,10]) = 11\nfind_missing_number([1,2,3,4,5,6,7,8,9,10,11,12]) = 13\n"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `double_the_difference(lst)` to solve the following problem:\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\nIf the input list is empty, return 0.\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n\n\nWrite a Python function `mean_absolute_deviation(numbers: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n\n\nWrite a Python function `correct_bracketing(brackets: str)` to solve the following problem:\nbrackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n\n\nWrite a Python function `count_distinct_characters(string: str) -> int` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n ",
      "output": [
        "\n\n\nWrite a Python function `double_the_difference(lst)` to solve the following problem:\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\nIf the input list is empty, return 0.\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n\n\nWrite a Python function `mean_absolute_deviation(numbers: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n\n\nWrite a Python function `correct_bracketing(brackets: str)` to solve the following problem:\nbrackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n\n\nWrite a Python function `count_distinct_characters(string: str) -> int` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n ####################################################################################\n\n####################################################################################\n# 3. Practice:\n# 1. Write a Python program to calculate the number of prime numbers that are less than 1000.\n# 2. Write a Python program to calculate the number of prime numbers that are less than 1000\n# and return the result as a string.\n#    Example:\n#    >>> print(prime_numbers_less_than_1000())\n#    500 prime numbers less than 1000: 24, 36, 58, 72, 84, 100\n#    >>> print(prime_numbers_less_than_1000(1000))\n#    500 prime numbers less than 1000: 24, 36, 58, 72, 84, ",
        "\n\n\nWrite a Python function `double_the_difference(lst)` to solve the following problem:\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\nIf the input list is empty, return 0.\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n\n\nWrite a Python function `mean_absolute_deviation(numbers: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n\n\nWrite a Python function `correct_bracketing(brackets: str)` to solve the following problem:\nbrackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n\n\nWrite a Python function `count_distinct_characters(string: str) -> int` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n #############################################################################################\ndef count_distinct_characters(string):\n    count = 0\n    for letter in string:\n        if letter not in string.casefold():\n            count += 1\n    return count\n",
        "\n\n\nWrite a Python function `double_the_difference(lst)` to solve the following problem:\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\nIf the input list is empty, return 0.\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n\n\nWrite a Python function `mean_absolute_deviation(numbers: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n\n\nWrite a Python function `correct_bracketing(brackets: str)` to solve the following problem:\nbrackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n\n\nWrite a Python function `count_distinct_characters(string: str) -> int` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n #########################################################################################\nWrite a Python function `count_unique_characters(string: str) -> int` to solve the following problem:\nGiven a string, find out how many unique characters are in the string.\n>>> count_unique_characters('xyzXYZ')\n3\n>>> count_unique_characters('Jerry')\n2\n #########################################################################################\nWrite a Python function `count_vowels(string: str) -> int` to solve the following problem:\nGiven a string, find out how many vowels are in the string.\n>>> count_vowels('xyzXYZ')\n2\n>>> count_vowels('Jerry')\n1\n #########################################################################################",
        "\n\n\nWrite a Python function `double_the_difference(lst)` to solve the following problem:\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\nIf the input list is empty, return 0.\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n\n\nWrite a Python function `mean_absolute_deviation(numbers: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n\n\nWrite a Python function `correct_bracketing(brackets: str)` to solve the following problem:\nbrackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n\n\nWrite a Python function `count_distinct_characters(string: str) -> int` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n ich eis \n>>> count_distinct_characters('jerry')\n5\n >>> count_distinct_characters('jERRY')\n4\n>>> count_distinct_characters('jERRY')\n5\n>>> count_distinct_characters('jErry')\n5\n>>> count_distinct_characters('jErry')\n5\n>>> count_distinct_characters('jErry')\n5\n>>> count_distinct_characters('jErry')\n5\n>>> count_distinct_characters('jErry')\n5\n>>> count_distinct_characters('jErry')\n5\n>>> count_distinct_characters('jErry')\n5\n>>> count_distinct_characters('jErry')\n5\n>>> count_distinct_characters('jErry')\n5\n>>> count_distinct_characters('jErry')\n5\n>>> count_distinct_characters('jErry')\n5\n",
        "\n\n\nWrite a Python function `double_the_difference(lst)` to solve the following problem:\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\nIf the input list is empty, return 0.\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n\n\nWrite a Python function `mean_absolute_deviation(numbers: List[float]) -> float` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n\n\nWrite a Python function `correct_bracketing(brackets: str)` to solve the following problem:\nbrackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n\n\nWrite a Python function `count_distinct_characters(string: str) -> int` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n ################################################################################\n\n\nWrite a Python function `count_occurrences(string: str, sub_string: str) -> int` to solve the following problem:\nGiven a string and a substring, count the number of times that substring occurs in the string.\n>>> count_occurrences('abcde', 'de')\n2\n>>> count_occurrences('abcde', 'c')\n1\n ################################################################################\n\n\nWrite a Python function `find_longest_palindrome(string: str) -> str` to solve the following problem:\nGiven a string, find the longest palindrome substring in it.\n>>> longest_palindrome = 'abcde'\n>>> longest_palindrome = 'babad'\n>>> longest_palindrome = 'abbcde'\n>>> longest_palindrome = 'a'\n>>> longest_palindrome = ''\n>>> find_longest_palindrome(longest_palindrome)\n'babad'\n>>> find_longest_"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `solve(s)` to solve the following problem:\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `f(n)` to solve the following problem:\nImplement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == [1, 2, 6, 24, 15]\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n\n\n\nWrite a Python function `is_multiply_prime(a)` to solve the following problem:\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.\nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\n\n\nWrite a Python function `parse_music(music_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music('o o|.| o| o|.|.|.|.| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n ",
      "output": [
        "\n\n\nWrite a Python function `solve(s)` to solve the following problem:\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `f(n)` to solve the following problem:\nImplement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == [1, 2, 6, 24, 15]\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n\n\n\nWrite a Python function `is_multiply_prime(a)` to solve the following problem:\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.\nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\n\n\nWrite a Python function `parse_music(music_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music('o o|.| o| o|.|.|.|.| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a Python function `is_valid_duration(d)` to solve the following problem:\nYou are given a string representing a duration.\nThe duration is given in the form of a lowercase string, such as H, H:M, H:M:S.\nReturn True if the duration is a valid duration, and False otherwise.\nExamples\nis_valid_duration('H') = True\nis_valid_duration('12') = False\nis_valid_duration('123') = True\nis_valid_duration('H1') = False\nis_valid_duration('H:M') = False\nis_valid_duration('H:M:S') = True\nis_valid_duration('H:M:S1') = False\nis_valid_duration('123:456') = True\nis_valid_duration('9:1:12",
        "\n\n\nWrite a Python function `solve(s)` to solve the following problem:\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `f(n)` to solve the following problem:\nImplement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == [1, 2, 6, 24, 15]\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n\n\n\nWrite a Python function `is_multiply_prime(a)` to solve the following problem:\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.\nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\n\n\nWrite a Python function `parse_music(music_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music('o o|.| o| o|.|.|.|.| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWrite a Python function `parse_music(music_string: str) -> Tuple[List[int], List[int]]` to solve the following problem:\nInput to this function is a string representing musical notes in a special ASCII format with the first\nnote followed by 4 spaces and the last note separated by a space.\nYour task is to parse this string and return a tuple of two lists, where the first list of integers is\nthe list of integers corresponding to how many beats does each note last. The second list is the list of\nintegers corresponding to how many beats does each note last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music('o o|.| o| o|.|.|.|",
        "\n\n\nWrite a Python function `solve(s)` to solve the following problem:\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `f(n)` to solve the following problem:\nImplement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == [1, 2, 6, 24, 15]\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n\n\n\nWrite a Python function `is_multiply_prime(a)` to solve the following problem:\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.\nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\n\n\nWrite a Python function `parse_music(music_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music('o o|.| o| o|.|.|.|.| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a Python function `parse_music(music_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music('o o|.| o| o|.|.|.|.| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a Python function `parse_",
        "\n\n\nWrite a Python function `solve(s)` to solve the following problem:\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `f(n)` to solve the following problem:\nImplement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == [1, 2, 6, 24, 15]\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n\n\n\nWrite a Python function `is_multiply_prime(a)` to solve the following problem:\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.\nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\n\n\nWrite a Python function `parse_music(music_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music('o o|.| o| o|.|.|.|.| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWrite a Python program to solve the following problem:\nWrite a function `solve(s)` to solve the following problem:\nGiven a string s, a positive integer n, perform the following conditional actions:\nIf s consists of at least n 'o', reverse the string,\nIf s consists of at least n '.|', reverse the string,\nIf s consists of at least n '|', reverse the string,\nIf s consists of at least n '>|', reverse the string,\nIf s consists of at least n '>', reverse the string.\nThe function should return the reversed string.\nExamples\nsolve(\"o o|.| o| o|.|.|.|.| o o\") = \"o o|.| o| o|.|.|.|.| o o\"\nsolve(\"o o|.|.|.|.|.|.|.| o o\")",
        "\n\n\nWrite a Python function `solve(s)` to solve the following problem:\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `f(n)` to solve the following problem:\nImplement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == [1, 2, 6, 24, 15]\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n\n\n\nWrite a Python function `is_multiply_prime(a)` to solve the following problem:\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.\nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\n\n\nWrite a Python function `parse_music(music_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music('o o|.| o| o|.|.|.|.| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nFor this challenge, I have added a new method to the `parse_music` function.\nThis method returns a list of integers, one for each note that is in the string, such that the total\nnumber of beats that the note represents is equal to the number of beats that the string represents.\nThe method should return an empty list if the input string is empty.\nExamples:\nparse_music('o o|.| o| o|.|.|.|.| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nparse_music('o|.| o| o|.|.|.|.|.| o o')\n[]\n>>> parse_music('o|.| o| o|.|.|.|.|.| o o')\n"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `vowels_count(s)` to solve the following problem:\nWrite a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\nExample:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n\n\n\nWrite a Python function `flip_case(string: str) -> str` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n    return string.swapcase()\n\n\n\nWrite a Python function `starts_one_ends(n)` to solve the following problem:\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n\n\n\nWrite a Python function `parse_nested_parens(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n ",
      "output": [
        "\n\n\nWrite a Python function `vowels_count(s)` to solve the following problem:\nWrite a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\nExample:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n\n\n\nWrite a Python function `flip_case(string: str) -> str` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n    return string.swapcase()\n\n\n\nWrite a Python function `starts_one_ends(n)` to solve the following problem:\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n\n\n\nWrite a Python function `parse_nested_parens(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n  aaa = 2\n>>> how_many_times('aaaa', 'aaaa')\n6\n\n\nWrite a Python function `how_many_strings_match(string: str, pattern: str) -> int` to solve the following problem:\nGiven a string and a pattern, return the number of occurrences of the pattern in the string.\n\n\nWrite a Python function `is_anagram(string1, string2) -> bool` to solve the following problem:\nGiven two strings, return true if the strings are anagrams, and false otherwise.\n\n>>> is_anagram('Ana', 'naa')\nFalse\n>>> is_anagram('Ana', 'ana')\nTrue\n\n\nWrite a Python function `is_palindrome(string: str) -> bool` to solve the following problem:\nGiven a string, return true if the string is a palindrome, and false otherwise. For a palindrome, consider",
        "\n\n\nWrite a Python function `vowels_count(s)` to solve the following problem:\nWrite a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\nExample:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n\n\n\nWrite a Python function `flip_case(string: str) -> str` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n    return string.swapcase()\n\n\n\nWrite a Python function `starts_one_ends(n)` to solve the following problem:\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n\n\n\nWrite a Python function `parse_nested_parens(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n  Case 1: aaaa -> a -> 3\n>>> how_many_times('aaaa', 'aa')\n2\n  Case 2: aaaaa -> aaa -> 2\n>>> how_many_times('aaaa', 'aaa')\n1\n  Case 3: aaaaa -> aa -> 1\n>>> how_many_times('aaaa', 'aaa')\n0\n\n\nWrite a Python function `is_palindrome(s)` to solve the following problem:\nFind the longest palindromic substring within a given string.\nA palindromic substring is a substring that reads the same backward as forward.\n>>> is_palindrome('ba')\n'ba'\n>>> is_palindrome('a')\n''\n>>> is_palindrome('ab')\n'ba'\n>>> is_palindrome('madam')\n'a'\n>>> is_palindrome('abba')\n'aba'",
        "\n\n\nWrite a Python function `vowels_count(s)` to solve the following problem:\nWrite a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\nExample:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n\n\n\nWrite a Python function `flip_case(string: str) -> str` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n    return string.swapcase()\n\n\n\nWrite a Python function `starts_one_ends(n)` to solve the following problem:\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n\n\n\nWrite a Python function `parse_nested_parens(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n ########\ndef count_overlap_cases(s1, s2):\n    # your code here\n    return sum(1 for i in range(len(s1)) if s1[i] == s2[i])\n\n#print(count_overlap_cases('a', 'b'))\n\n\nWrite a Python function `is_digit(char: str) -> bool` to solve the following problem:\nGiven a string, return true if all characters are digits, otherwise, return false.\n>>> is_digit('123')\nTrue\n>>> is_digit('a')\nFalse\n>>> is_digit('1234')\nFalse\n>>> is_digit('123a')\nFalse\n>>> is_digit('1234.123')\nTrue\n>>> is_digit('1234.1234')\nTrue\n>>> is_digit('1234.1",
        "\n\n\nWrite a Python function `vowels_count(s)` to solve the following problem:\nWrite a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\nExample:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n\n\n\nWrite a Python function `flip_case(string: str) -> str` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n    return string.swapcase()\n\n\n\nWrite a Python function `starts_one_ends(n)` to solve the following problem:\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n\n\n\nWrite a Python function `parse_nested_parens(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n ~~~~\n>>> how_many_times('aab', 'a')\n2\n>>> how_many_times('ab', 'b')\n1\n>>> how_many_times('abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "\n\n\nWrite a Python function `vowels_count(s)` to solve the following problem:\nWrite a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\nExample:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n\n\n\nWrite a Python function `flip_case(string: str) -> str` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n    return string.swapcase()\n\n\n\nWrite a Python function `starts_one_ends(n)` to solve the following problem:\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n\n\n\nWrite a Python function `parse_nested_parens(paren_string: str) -> List[int]` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n.......................\n "
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `get_max_triples(n)` to solve the following problem:\nYou are given a positive integer n. You have to create an integer array a of length n.\nFor each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k,\nand a[i] + a[j] + a[k] is a multiple of 3.\nExample :\nInput: n = 5\nOutput: 1\nExplanation:\na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n\n\n\nWrite a Python function `circular_shift(x, shift)` to solve the following problem:\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\n\n\nWrite a Python function `sort_numbers(numbers: str) -> str` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n ",
      "output": [
        "\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `get_max_triples(n)` to solve the following problem:\nYou are given a positive integer n. You have to create an integer array a of length n.\nFor each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k,\nand a[i] + a[j] + a[k] is a multiple of 3.\nExample :\nInput: n = 5\nOutput: 1\nExplanation:\na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n\n\n\nWrite a Python function `circular_shift(x, shift)` to solve the following problem:\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\n\n\nWrite a Python function `sort_numbers(numbers: str) -> str` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n  s = [int(x) for x in numbers.split(' ')]\n  s.sort(reverse=True)\n  return''.join([str(x) for x in s])\n",
        "\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `get_max_triples(n)` to solve the following problem:\nYou are given a positive integer n. You have to create an integer array a of length n.\nFor each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k,\nand a[i] + a[j] + a[k] is a multiple of 3.\nExample :\nInput: n = 5\nOutput: 1\nExplanation:\na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n\n\n\nWrite a Python function `circular_shift(x, shift)` to solve the following problem:\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\n\n\nWrite a Python function `sort_numbers(numbers: str) -> str` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n.................................................\n....................................................\n....................................................\n....................................................\n................................................\n................................................\n................................................\n....................................................\n....................................................\n....................................................\n....................................................\n....................................................\n....................................................\n....................................................\n....................................................\n.......................................",
        "\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `get_max_triples(n)` to solve the following problem:\nYou are given a positive integer n. You have to create an integer array a of length n.\nFor each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k,\nand a[i] + a[j] + a[k] is a multiple of 3.\nExample :\nInput: n = 5\nOutput: 1\nExplanation:\na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n\n\n\nWrite a Python function `circular_shift(x, shift)` to solve the following problem:\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\n\n\nWrite a Python function `sort_numbers(numbers: str) -> str` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n  Sorting numbers is easy to do if you know the order of the characters in the string.\n    if 'zero' <= char <= 'nine':\n        return char\n    else:\n        return '-' * len(char)\n\n\n\nWrite a Python function `count_and_say(n: int) -> str` to solve the following problem:\nThe count-and-say sequence is a sequence of integers with the first five terms as following:\n1, 11, 21, 1211, 111221, 312211, 15132221,...\n\nGiven an integer n, return the nth term of the count-and-say sequence.\nExample:\n    >>> count_and_say(1)\n    '1'\n    >>> count_and_say(4)\n    '1211'\n    >>> count_and_say(5)",
        "\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `get_max_triples(n)` to solve the following problem:\nYou are given a positive integer n. You have to create an integer array a of length n.\nFor each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k,\nand a[i] + a[j] + a[k] is a multiple of 3.\nExample :\nInput: n = 5\nOutput: 1\nExplanation:\na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n\n\n\nWrite a Python function `circular_shift(x, shift)` to solve the following problem:\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\n\n\nWrite a Python function `sort_numbers(numbers: str) -> str` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n  s = '321'\n    for i in range(len(s)):\n        if s[i] == '3':\n            s = s[:i] + '2' + s[i+1:]\n        elif s[i] == '2':\n            s = s[:i] + '1' + s[i+1:]\n    return s\nExamples:\n>>> sort_numbers('zero two four three five six seven eight nine')\n'nine eight seven seven six five four three two zero'\n>>> sort_numbers('zero one two three four five six seven eight nine')\n'nine eight seven seven six five four three two zero'\n>>> sort_numbers('zero two four three five six seven eight nine five four four three two zero')\n'nine eight seven seven six five four three two zero four four five three five six seven eight nine'\n>>> sort_numbers('zero two four three five six seven eight",
        "\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `get_max_triples(n)` to solve the following problem:\nYou are given a positive integer n. You have to create an integer array a of length n.\nFor each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k,\nand a[i] + a[j] + a[k] is a multiple of 3.\nExample :\nInput: n = 5\nOutput: 1\nExplanation:\na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n\n\n\nWrite a Python function `circular_shift(x, shift)` to solve the following problem:\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\n\n\nWrite a Python function `sort_numbers(numbers: str) -> str` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n #################################################################################\n\nimport operator\n\n\nWrite a Python function `find_all_anagrams(s: str) -> list of strings` to solve the following problem:\nInput: a space-delimited string of words.\nValid choices are 'blue','red', 'yellow', 'green' and 'orange'.\nReturn a list of all words with all anagrams from s.\n>>> find_all_anagrams('blue orange yellow blue green orange')\n['blue', 'orange', 'yellow']\n>>> find_all_anagrams('blue orange yellow blue green')\n[]\n>>> find_all_anagrams('blue green orange blue')\n[]\n>>> find_all_anagrams('blue green orange blue green')\n[]\n>>> find_all_anagrams('blue orange yellow blue green green')\n[]\n>>> find_all_anagrams('blue')\n[]\n>>> find_"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `strlen(string: str) -> int` to solve the following problem:\nReturn length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n    return len(string)\n\n\n\nWrite a Python function `add(lst)` to solve the following problem:\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\nExamples:\nadd([4, 2, 6, 7]) ==> 2\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n\n\n\nWrite a Python function `count_nums(arr)` to solve the following problem:\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n\n\nWrite a Python function `triangle_area(a, h)` to solve the following problem:\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n    return a * h / 2.0\n\n\n\nWrite a Python function `find_closest_elements(numbers: List[float]) -> Tuple[float, float]` to solve the following problem:\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n ",
      "output": [
        "\n\n\nWrite a Python function `strlen(string: str) -> int` to solve the following problem:\nReturn length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n    return len(string)\n\n\n\nWrite a Python function `add(lst)` to solve the following problem:\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\nExamples:\nadd([4, 2, 6, 7]) ==> 2\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n\n\n\nWrite a Python function `count_nums(arr)` to solve the following problem:\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n\n\nWrite a Python function `triangle_area(a, h)` to solve the following problem:\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n    return a * h / 2.0\n\n\n\nWrite a Python function `find_closest_elements(numbers: List[float]) -> Tuple[float, float]` to solve the following problem:\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n  def find_closest(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    return numbers[0], numbers[-1]\n  return find_closest(numbers)\n\n\n\nWrite a Python function `sum_of_fives(arr)` to solve the following problem:\nGiven an array arr of 5 numbers, return the sum of all the numbers in the same order as\nin the original array.\n>>> sum_of_fives([1, 2, 3, 4, 5])\n21\n>>> sum_of_fives([1, 0, 0, 5])\n60\n>>> sum_of_fives([1, 1, 1, 1, 1])\n21\n\n\nWrite a Python function `find_closest_number(numbers: List[float]) -> float` to solve the following problem:\nGiven a list of",
        "\n\n\nWrite a Python function `strlen(string: str) -> int` to solve the following problem:\nReturn length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n    return len(string)\n\n\n\nWrite a Python function `add(lst)` to solve the following problem:\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\nExamples:\nadd([4, 2, 6, 7]) ==> 2\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n\n\n\nWrite a Python function `count_nums(arr)` to solve the following problem:\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n\n\nWrite a Python function `triangle_area(a, h)` to solve the following problem:\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n    return a * h / 2.0\n\n\n\nWrite a Python function `find_closest_elements(numbers: List[float]) -> Tuple[float, float]` to solve the following problem:\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n  def closest_pair(numbers):\n    min_distance = 1e200\n    return min(numbers, key=lambda x: abs(x - min_distance)), min_distance\n>>> find_closest_elements([-1.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n(3.0, 4.0)\n>>> find_closest_elements([4.0, 6.0, 8.0, 10.0, 12.0, 14.0])\n(10.0, 12.0)\n>>> find_closest_elements([-1.0, 5.0, 6.0, 10.0, 15.0, 20.0])\n(-1.0, 6.0)\n>>> find",
        "\n\n\nWrite a Python function `strlen(string: str) -> int` to solve the following problem:\nReturn length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n    return len(string)\n\n\n\nWrite a Python function `add(lst)` to solve the following problem:\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\nExamples:\nadd([4, 2, 6, 7]) ==> 2\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n\n\n\nWrite a Python function `count_nums(arr)` to solve the following problem:\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n\n\nWrite a Python function `triangle_area(a, h)` to solve the following problem:\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n    return a * h / 2.0\n\n\n\nWrite a Python function `find_closest_elements(numbers: List[float]) -> Tuple[float, float]` to solve the following problem:\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n #############\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_index = 0\n    closest_number = numbers[closest_index]\n    for i in range(len(numbers)):\n        diff = abs(numbers[closest_index] - numbers[i])\n        if diff > closest_number:\n            closest_number = numbers[i]\n            closest_index = i\n    return closest_number, numbers[closest_index]\n\n\nWrite a Python function `find_closest_element(numbers: List[float]) -> float` to solve the following problem:\nGiven a list of numbers, find the closest number in the list.\n>>> find_closest_element([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n2.2\n>>> find_closest_element([1.0, 2.",
        "\n\n\nWrite a Python function `strlen(string: str) -> int` to solve the following problem:\nReturn length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n    return len(string)\n\n\n\nWrite a Python function `add(lst)` to solve the following problem:\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\nExamples:\nadd([4, 2, 6, 7]) ==> 2\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n\n\n\nWrite a Python function `count_nums(arr)` to solve the following problem:\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n\n\nWrite a Python function `triangle_area(a, h)` to solve the following problem:\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n    return a * h / 2.0\n\n\n\nWrite a Python function `find_closest_elements(numbers: List[float]) -> Tuple[float, float]` to solve the following problem:\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n  def find_closest_elements(numbers: List[float]):\n    numbers.sort()\n    return numbers[0], numbers[-1]\n\n\"\"\"\n\nimport math\nimport random\nimport time\n\n# 2.1\ndef add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2)])\n\n# 2.2\ndef count_nums(arr):\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n# 2.3\ndef triangle_area(a, h):\n    return a * h / 2.0\n\n# 2.4\ndef find_closest_elements(numbers):\n    numbers.sort()\n    return numbers[0], numbers[-1]\n\n# 3.1\ndef print_time(name, t):\n    print(name +",
        "\n\n\nWrite a Python function `strlen(string: str) -> int` to solve the following problem:\nReturn length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n    return len(string)\n\n\n\nWrite a Python function `add(lst)` to solve the following problem:\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\nExamples:\nadd([4, 2, 6, 7]) ==> 2\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n\n\n\nWrite a Python function `count_nums(arr)` to solve the following problem:\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n\n\nWrite a Python function `triangle_area(a, h)` to solve the following problem:\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n    return a * h / 2.0\n\n\n\nWrite a Python function `find_closest_elements(numbers: List[float]) -> Tuple[float, float]` to solve the following problem:\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n  def get_closest(num1, num2, num3):\n    return min(abs(num2-num1), abs(num3-num1))\n  def get_closest(num1, num2, num3):\n      return min(abs(num2-num1), abs(num3-num1))\n>>> find_closest_elements([-5, 1, 5, 7, 0])\n(-5, 1)\n>>> find_closest_elements([2, 2, 2, 2, 2])\n(2, 2)\n>>> numbers = [-5, 1, 5, 7, 0]\n>>> find_closest_elements(numbers)\n(2.0, 2.2)\n>>> find_closest_elements([-5, 1, 5, 7, 0], [1, -1, -1, 1"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `all_prefixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n\n\n\nWrite a Python function `intersperse(numbers: List[int], delimeter: int) -> List[int]` to solve the following problem:\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n\n\nWrite a Python function `rounded_avg(n, m)` to solve the following problem:\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m).\nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\n\n\nWrite a Python function `solve(s)` to solve the following problem:\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n\n\nWrite a Python function `rescale_to_unit(numbers: List[float]) -> List[float]` to solve the following problem:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n ",
      "output": [
        "\n\n\nWrite a Python function `all_prefixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n\n\n\nWrite a Python function `intersperse(numbers: List[int], delimeter: int) -> List[int]` to solve the following problem:\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n\n\nWrite a Python function `rounded_avg(n, m)` to solve the following problem:\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m).\nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\n\n\nWrite a Python function `solve(s)` to solve the following problem:\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n\n\nWrite a Python function `rescale_to_unit(numbers: List[float]) -> List[float]` to solve the following problem:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n  result = []\n\n    for i in range(len(numbers)):\n        result.append((numbers[i] - numbers[0])/(numbers[-1] - numbers[0]));\n    return result\n\n\n\nWrite a Python function `get_letter_count(string: str) -> int` to solve the following problem:\nGiven a string s, count the number of letters in s.\n>>> get_letter_count(\"a\")\n3\n>>> get_letter_count(\"aba\")\n3\n>>> get_letter_count(\"111\")\n2\n>>> get_letter_count(\"hello\")\n5\n>>> get_letter_count(\"123456789123456789123\")\n5\n    num_letter = 0\n    for i in range(len(string)):\n        if string[i].isalpha() == True:\n            num_letter += 1",
        "\n\n\nWrite a Python function `all_prefixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n\n\n\nWrite a Python function `intersperse(numbers: List[int], delimeter: int) -> List[int]` to solve the following problem:\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n\n\nWrite a Python function `rounded_avg(n, m)` to solve the following problem:\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m).\nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\n\n\nWrite a Python function `solve(s)` to solve the following problem:\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n\n\nWrite a Python function `rescale_to_unit(numbers: List[float]) -> List[float]` to solve the following problem:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n  Use the math.isclose() method to compare the two numbers.\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\nTrue\n>>> rescale_to_unit([0.0, 1.0, 2.0, 3.0, 4.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\nTrue\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\nTrue\n>>> rescale_to_",
        "\n\n\nWrite a Python function `all_prefixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n\n\n\nWrite a Python function `intersperse(numbers: List[int], delimeter: int) -> List[int]` to solve the following problem:\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n\n\nWrite a Python function `rounded_avg(n, m)` to solve the following problem:\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m).\nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\n\n\nWrite a Python function `solve(s)` to solve the following problem:\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n\n\nWrite a Python function `rescale_to_unit(numbers: List[float]) -> List[float]` to solve the following problem:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n  if len(numbers) < 2:\n    return numbers\n    if numbers[0] > numbers[1]:\n        numbers = numbers[::-1]\n    if numbers[len(numbers) - 1] < numbers[len(numbers) - 2]:\n        numbers.append(numbers.pop())\n    return numbers\n\n\n\nWrite a Python function `is_palindrome(string: str) -> bool` to solve the following problem:\nGiven a string, determine if it is a palindrome.\n>>> is_palindrome('Madam')\nTrue\n>>> is_palindrome('racecar')\nFalse\n>>> is_palindrome('racecar1')\nFalse\n>>> is_palindrome('A man, a plan, a canal: Panama')\nTrue\n>>> is_palindrome('racecar')\nTrue\n>>> is_palindrome('racecar1')\nTrue\n>>> is_palindrome('racecar11')",
        "\n\n\nWrite a Python function `all_prefixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n\n\n\nWrite a Python function `intersperse(numbers: List[int], delimeter: int) -> List[int]` to solve the following problem:\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n\n\nWrite a Python function `rounded_avg(n, m)` to solve the following problem:\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m).\nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\n\n\nWrite a Python function `solve(s)` to solve the following problem:\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n\n\nWrite a Python function `rescale_to_unit(numbers: List[float]) -> List[float]` to solve the following problem:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n  result = []\n\n    for n in numbers:\n        result.append((n - min(numbers)) / (max(numbers) - min(numbers)))\n    return result\n\n\n\nWrite a Python function `get_max_and_min(numbers: List[float]) -> (float, float)` to solve the following problem:\nGet the maximum and minimum of the list of numbers, return the smallest and largest.\n>>> get_max_and_min([1.0, 2.0, 3.0, 4.0, 5.0])\n(4.0, 5.0)\n  result = []\n\n    max_num = max(numbers)\n    min_num = min(numbers)\n    for n in numbers:\n        if n!= max_num and n!= min_num:\n            result.append(n)\n    return result\n\n\n\nWrite a Python function `sum_of_digits(n:",
        "\n\n\nWrite a Python function `all_prefixes(string: str) -> List[str]` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n\n\n\nWrite a Python function `intersperse(numbers: List[int], delimeter: int) -> List[int]` to solve the following problem:\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n\n\nWrite a Python function `rounded_avg(n, m)` to solve the following problem:\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m).\nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\n\n\nWrite a Python function `solve(s)` to solve the following problem:\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n\n\nWrite a Python function `rescale_to_unit(numbers: List[float]) -> List[float]` to solve the following problem:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n  the input list cannot be empty\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n[0.0, 0.25, 0.5, 0.75, 1.0, 1.25]\n  the input list cannot contain repeated elements\n>>> rescale_to_unit([0.0, 0.25, 0.5, 0.75, 1.0, 1.25])\n[0.0, 0.25, 0.5, 0.75, 1.0, 1.25]\n  the input list cannot contain negative numbers\n\n\nWrite a Python function `sum_of_digits(num: int) -> int` to solve the following problem:\nCompute the sum of"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `intersection(interval1, interval2)` to solve the following problem:\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two\nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\nWrite a Python function `special_factorial(n)` to solve the following problem:\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n288\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\n\n\nWrite a Python function `digits(n)` to solve the following problem:\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\n\n\nWrite a Python function `filter_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n ",
      "output": [
        "\n\n\nWrite a Python function `intersection(interval1, interval2)` to solve the following problem:\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two\nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\nWrite a Python function `special_factorial(n)` to solve the following problem:\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n288\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\n\n\nWrite a Python function `digits(n)` to solve the following problem:\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\n\n\nWrite a Python function `filter_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n  def filter_int(x):\n    try:\n      int_value = int(x)\n      if int_value == int_value:\n        return int_value\n    except:\n      return 0\n  return list(filter(filter_int, values))\n\n\nWrite a Python function `filter_non_negative_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for integers\n>>> filter_non_negative_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n>>> filter_non_negative_integers([-4.5, 0, 2, 10, 10])\n[-4.5, 0, 2, 10]\n>>> filter_non_negative_integers([10, -10, -1])\n[10, -",
        "\n\n\nWrite a Python function `intersection(interval1, interval2)` to solve the following problem:\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two\nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\nWrite a Python function `special_factorial(n)` to solve the following problem:\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n288\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\n\n\nWrite a Python function `digits(n)` to solve the following problem:\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\n\n\nWrite a Python function `filter_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n  >>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n  >>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n  >>> filter_",
        "\n\n\nWrite a Python function `intersection(interval1, interval2)` to solve the following problem:\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two\nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\nWrite a Python function `special_factorial(n)` to solve the following problem:\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n288\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\n\n\nWrite a Python function `digits(n)` to solve the following problem:\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\n\n\nWrite a Python function `filter_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n  >>> filter_integers([1.0, 2.0, 3.0, 'abc', {}, []])\n[1.0, 2.0, 3.0]\n    def is_integer(num):\n        try:\n            int(num)\n            return True\n        except:\n            return False\n\n\n\nWrite a Python function `filter_non_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for non-integers\n>>> filter_non_integers([1, 2, 3, True, 'abc', {}, []])\n[1, 2, 3]\n>>> filter_non_integers(['a', 3.14, 5])\n[]\n>>> filter_non_integers([1, 2, 3, 'abc', {}, []])\n[]\n    def is_integer(num):\n        try:",
        "\n\n\nWrite a Python function `intersection(interval1, interval2)` to solve the following problem:\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two\nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\nWrite a Python function `special_factorial(n)` to solve the following problem:\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n288\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\n\n\nWrite a Python function `digits(n)` to solve the following problem:\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\n\n\nWrite a Python function `filter_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n  def filter_integers(values):\n    odd_numbers = []\n    for value in values:\n        if not isinstance(value, int):\n            return values\n        else:\n            if value % 2 == 1:\n                odd_numbers.append(value)\n    return odd_numbers\n\n\n\nWrite a Python function `find_sum_of_all_fibonacci_numbers_except(n: int) -> int` to solve the following problem:\nFind the sum of all fibonacci numbers less than or equal to n\n>>> find_sum_of_all_fibonacci_numbers_except(7)\n13\n>>> find_sum_of_all_fibonacci_numbers_except(12)\n48\n>>> find_sum_of_all_fibonacci_numbers_except(678)\n2144\n>>> find_sum_of_all_fibonacci_numbers_except(1)\n",
        "\n\n\nWrite a Python function `intersection(interval1, interval2)` to solve the following problem:\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two\nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\n\n\nWrite a Python function `greatest_common_divisor(a: int, b: int) -> int` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\nWrite a Python function `special_factorial(n)` to solve the following problem:\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n288\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\n\n\nWrite a Python function `digits(n)` to solve the following problem:\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\n\n\nWrite a Python function `filter_integers(values: List[Any]) -> List[int]` to solve the following problem:\nFilter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n  This function will receive a list of any python values and should return a\nfiltered list of only the integers.\n\"\"\"\n"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n\n\nWrite a Python function `incr_list(l: list)` to solve the following problem:\nReturn list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n    return [(e + 1) for e in l]\n\n\n\nWrite a Python function `tri(n)` to solve the following problem:\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in\nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n= 2 + 3 + 3 = 8\nYou are given a non-negative integer number n, you have to a return a list of the\nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = [1, 3, 2, 8]\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\n\n\nWrite a Python function `digits(n)` to solve the following problem:\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\n\n\nWrite a Python function `strlen(string: str) -> int` to solve the following problem:\nReturn length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n ",
      "output": [
        "\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n\n\nWrite a Python function `incr_list(l: list)` to solve the following problem:\nReturn list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n    return [(e + 1) for e in l]\n\n\n\nWrite a Python function `tri(n)` to solve the following problem:\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in\nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n= 2 + 3 + 3 = 8\nYou are given a non-negative integer number n, you have to a return a list of the\nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = [1, 3, 2, 8]\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\n\n\nWrite a Python function `digits(n)` to solve the following problem:\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\n\n\nWrite a Python function `strlen(string: str) -> int` to solve the following problem:\nReturn length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n american_word = 'american' * (len(american_word) + 1)\n>>> strlen(american_word)\n13\n>>> strlen(123)\n3\n>>> strlen(1234)\n5\n>>> strlen(12345)\n8\n>>> strlen('123')\n3\n>>> strlen('1234')\n5\n>>> strlen('12345')\n8\n>>> strlen('1')\n1\n>>> strlen('12')\n2\n>>> strlen('123456789')\n14\n>>> strlen(123456789)\n14\n'''\n\ndef separate_paren_groups(paren_string):\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren",
        "\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n\n\nWrite a Python function `incr_list(l: list)` to solve the following problem:\nReturn list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n    return [(e + 1) for e in l]\n\n\n\nWrite a Python function `tri(n)` to solve the following problem:\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in\nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n= 2 + 3 + 3 = 8\nYou are given a non-negative integer number n, you have to a return a list of the\nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = [1, 3, 2, 8]\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\n\n\nWrite a Python function `digits(n)` to solve the following problem:\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\n\n\nWrite a Python function `strlen(string: str) -> int` to solve the following problem:\nReturn length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n.................\n1. abc = 'abc'\n2. abc = 'abc' + 'def'\n3. abc = 'abc' + 'def' + 'ghi'\n4. abc = 'abc' + 'def' + 'ghi' + 'jkl'\n5. abc = 'abc' + 'def' + 'ghi' + 'jkl' +'mno' + 'pqrs'\n6. abc = 'abc' + 'def' + 'ghi' + 'jkl' +'mno' + 'pqrs' + 'tuv' + 'wxyz'\n7. abc = 'abc' + 'def' + 'ghi' + 'jkl' +'mno' + 'pqrs' + 'tuv' + 'wxyz' + '123'\n8. abc = 'abc' + 'def' + 'ghi",
        "\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n\n\nWrite a Python function `incr_list(l: list)` to solve the following problem:\nReturn list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n    return [(e + 1) for e in l]\n\n\n\nWrite a Python function `tri(n)` to solve the following problem:\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in\nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n= 2 + 3 + 3 = 8\nYou are given a non-negative integer number n, you have to a return a list of the\nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = [1, 3, 2, 8]\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\n\n\nWrite a Python function `digits(n)` to solve the following problem:\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\n\n\nWrite a Python function `strlen(string: str) -> int` to solve the following problem:\nReturn length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n ###################################################################################\n\nWrite a Python function `sum_digits(num: int) -> int` to solve the following problem:\nReturn sum of all digits in a given number\n>>> sum_digits(123456789)\n213\n    sum_digits = 0\n    for digit in str(num):\n        sum_digits += int(digit)\n    return sum_digits\n\n###################################################################################\n\nWrite a Python function `is_palindrome(string: str) -> bool` to solve the following problem:\nReturn True if given string is a palindrome, else return False\nPalindrome is a palindromic string that reads the same backward and forward.\n>>> is_palindrome('racecar')\nFalse\n>>> is_palindrome('madam')\nTrue\n>>> is_palindrome('abba')\nTrue\n>>> is_palindrome('Madam')\nTrue\n>>> is_palindrome",
        "\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n\n\nWrite a Python function `incr_list(l: list)` to solve the following problem:\nReturn list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n    return [(e + 1) for e in l]\n\n\n\nWrite a Python function `tri(n)` to solve the following problem:\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in\nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n= 2 + 3 + 3 = 8\nYou are given a non-negative integer number n, you have to a return a list of the\nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = [1, 3, 2, 8]\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\n\n\nWrite a Python function `digits(n)` to solve the following problem:\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\n\n\nWrite a Python function `strlen(string: str) -> int` to solve the following problem:\nReturn length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n...............\n>>> strlen('abcdef')\n6\n...............\n>>> strlen('abcdefghijkl')\n18\n...............\n>>> strlen('abc')\n3\n>>> strlen('abc\\ndef')\n6\n>>> strlen('abcdef\\n123\\n456')\n18\n>>> strlen('abc 123 def')\n6\n>>> strlen('abc 123 def \\n\\n')\n10\n>>> strlen('abc 123 def \\n\\n  \\t')\n10\n>>> strlen('abc 123 def \\n\\n  \\t\\t')\n13\n>>> strlen('abc 123 def \\n\\n  \\t\\t\\t')\n13\n>>> strlen('abc 123 def \\n\\n  \\t\\t",
        "\n\n\nWrite a Python function `separate_paren_groups(paren_string: str) -> List[str]` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n\n\nWrite a Python function `incr_list(l: list)` to solve the following problem:\nReturn list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n    return [(e + 1) for e in l]\n\n\n\nWrite a Python function `tri(n)` to solve the following problem:\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in\nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n= 2 + 3 + 3 = 8\nYou are given a non-negative integer number n, you have to a return a list of the\nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = [1, 3, 2, 8]\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\n\n\nWrite a Python function `digits(n)` to solve the following problem:\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\n\n\nWrite a Python function `strlen(string: str) -> int` to solve the following problem:\nReturn length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n ~~~\nWrite a Python function `get_even(l: list) -> int` to solve the following problem:\nGet the even numbers in given list\n>>> get_even(range(10))\n0\n>>> get_even([1, 3, 5, 7, 9, 11])\n3\n>>> get_even([1, 2, 3, 6, 8, 10, 10, 10])\n6\n>>> get_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n21\n>>> get_even([1, 2, "
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `unique(l: list)` to solve the following problem:\nReturn sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n    return sorted(list(set(l)))\n\n\n\nWrite a Python function `fix_spaces(text)` to solve the following problem:\nGiven a string text, replace all spaces in it with underscores,\nand if a string has more than 2 consecutive spaces,\nthen replace all consecutive spaces with -\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\n\n\nWrite a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `simplify(x, n)` to solve the following problem:\nYour task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n\n\n\nWrite a Python function `largest_divisor(n: int) -> int` to solve the following problem:\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n ",
      "output": [
        "\n\n\nWrite a Python function `unique(l: list)` to solve the following problem:\nReturn sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n    return sorted(list(set(l)))\n\n\n\nWrite a Python function `fix_spaces(text)` to solve the following problem:\nGiven a string text, replace all spaces in it with underscores,\nand if a string has more than 2 consecutive spaces,\nthen replace all consecutive spaces with -\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\n\n\nWrite a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `simplify(x, n)` to solve the following problem:\nYour task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n\n\n\nWrite a Python function `largest_divisor(n: int) -> int` to solve the following problem:\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n..........\n..........\n..........\n123456789012345678901234567890123456789012345678901234567890\n123456789012345678901234567890123456789012345678901234567890\n123456789012345678901234567890123456789012345678901234567890\n123456",
        "\n\n\nWrite a Python function `unique(l: list)` to solve the following problem:\nReturn sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n    return sorted(list(set(l)))\n\n\n\nWrite a Python function `fix_spaces(text)` to solve the following problem:\nGiven a string text, replace all spaces in it with underscores,\nand if a string has more than 2 consecutive spaces,\nthen replace all consecutive spaces with -\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\n\n\nWrite a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `simplify(x, n)` to solve the following problem:\nYour task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n\n\n\nWrite a Python function `largest_divisor(n: int) -> int` to solve the following problem:\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n ~~~~~~~\n>>> largest_divisor(32)\n2\n ~~~~~~~\n>>> largest_divisor(12)\n2\n ~~~~~~~\n>>> largest_divisor(10)\n1\n ~~~~~~~\n>>> largest_divisor(6)\n2\n ~~~~~~~\n>>> largest_divisor(125)\n25\n ~~~~~~~\n>>> largest_divisor(729)\n28\n ~~~~~~~\n>>> largest_divisor(12)\n2\n ~~~~~~~\n>>> largest_divisor(12345)\n2345\n ~~~~~~~\n>>> largest_divisor(999999999999999999999999999999999999999999999999999999999999999",
        "\n\n\nWrite a Python function `unique(l: list)` to solve the following problem:\nReturn sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n    return sorted(list(set(l)))\n\n\n\nWrite a Python function `fix_spaces(text)` to solve the following problem:\nGiven a string text, replace all spaces in it with underscores,\nand if a string has more than 2 consecutive spaces,\nthen replace all consecutive spaces with -\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\n\n\nWrite a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `simplify(x, n)` to solve the following problem:\nYour task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n\n\n\nWrite a Python function `largest_divisor(n: int) -> int` to solve the following problem:\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n ###########\n'''\n\ndef largest_divisor(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n%2==1:\n        return n\n    for i in range(3, n, 2):\n        if n % i == 0:\n            m = n / i\n            if m * i == n:\n                return i\n    return n\n\ndef largest_divisor1(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n%2==1:\n        return n\n    for i in range(3, n, 2):\n        if n % i == 0:\n            m = n / i\n            if m * i == n:\n                return i\n    return n\n\ndef largest_divisor2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n%2==1:\n        return n\n    i, m = n",
        "\n\n\nWrite a Python function `unique(l: list)` to solve the following problem:\nReturn sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n    return sorted(list(set(l)))\n\n\n\nWrite a Python function `fix_spaces(text)` to solve the following problem:\nGiven a string text, replace all spaces in it with underscores,\nand if a string has more than 2 consecutive spaces,\nthen replace all consecutive spaces with -\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\n\n\nWrite a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `simplify(x, n)` to solve the following problem:\nYour task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n\n\n\nWrite a Python function `largest_divisor(n: int) -> int` to solve the following problem:\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n \u4e8c\u5206\u67e5\u627e\u6cd5\u7b97\u6cd5\n\u65f6\u95f4\u590d\u6742\u5ea6O(logn)\uff0c\u8fd9\u91cc\u7684logn\u662fn\u7684\u4e8c\u6b21\u5e42\uff0c\u5982\u679c\u6709\u5176\u4ed6\u6570\u7684\u4e8c\u6b21\u5e42\uff0c\u90a3\u4e48logn\u4f1a\u8d85\u8fc7O(n)\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u6cd5\n'''\n\nimport math\nimport bisect\n\ndef largest_divisor(n: int) -> int:\n    low, high = 1, math.ceil(math.log(n, 2))\n    while low < high:\n        mid = (low + high) // 2\n        if n % mid == 0:\n            high = mid\n        else:\n            low = mid + 1\n    return low - 1\n\n# print(largest_divisor(15))\n",
        "\n\n\nWrite a Python function `unique(l: list)` to solve the following problem:\nReturn sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n    return sorted(list(set(l)))\n\n\n\nWrite a Python function `fix_spaces(text)` to solve the following problem:\nGiven a string text, replace all spaces in it with underscores,\nand if a string has more than 2 consecutive spaces,\nthen replace all consecutive spaces with -\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\n\n\nWrite a Python function `do_algebra(operator, operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n\n\nWrite a Python function `simplify(x, n)` to solve the following problem:\nYour task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n\n\n\nWrite a Python function `largest_divisor(n: int) -> int` to solve the following problem:\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n ~~~\nWrite a Python function `is_palindrome(s: str) -> bool` to solve the following problem:\nGiven a string, check if it is a palindrome.\n>>> is_palindrome(\"racecar\")\nTrue\n>>> is_palindrome(\"racecar1\")\nFalse\n>>> is_palindrome(\"racecar123\")\nTrue\n>>> is_palindrome(\"racecar1234\")\nFalse\n    s = \"\"\n    for ch in s:\n        if ch not in \"abcdefghijklmnopqrstuvwxyz\":\n            s = s.replace(ch, \"\")\n    return s == \"\"\n\n\n\nWrite a Python function `longest_palindrome(n: int) -> int` to solve the following problem:\nFor a given number n, find the longest palindrome that divides n evenly, smaller than n\n>>> longest_palindrome(15)\n5\n ~~~\nWrite a Python function `is_nice"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `is_equal_to_sum_even(n)` to solve the following problem:\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n    return n%2 == 0 and n >= 8\n\n\n\nWrite a Python function `multiply(a, b)` to solve the following problem:\nComplete the function that takes two integers and returns\nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n    return abs(a % 10) * abs(b % 10)\n\n\n\nWrite a Python function `intersection(interval1, interval2)` to solve the following problem:\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two\nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\n\n\nWrite a Python function `factorize(n: int) -> List[int]` to solve the following problem:\nReturn list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\n ",
      "output": [
        "\n\n\nWrite a Python function `is_equal_to_sum_even(n)` to solve the following problem:\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n    return n%2 == 0 and n >= 8\n\n\n\nWrite a Python function `multiply(a, b)` to solve the following problem:\nComplete the function that takes two integers and returns\nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n    return abs(a % 10) * abs(b % 10)\n\n\n\nWrite a Python function `intersection(interval1, interval2)` to solve the following problem:\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two\nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\n\n\nWrite a Python function `factorize(n: int) -> List[int]` to solve the following problem:\nReturn list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\n  factors = [2, 1, 5, 7]\n\n    for i in range(len(factors)):\n        for j in range(i+1, len(factors)):\n            if factors[i] * factors[j] == n:\n                factors[i] *= 1\n                factors[j] *= 1\n\n    return factors\n",
        "\n\n\nWrite a Python function `is_equal_to_sum_even(n)` to solve the following problem:\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n    return n%2 == 0 and n >= 8\n\n\n\nWrite a Python function `multiply(a, b)` to solve the following problem:\nComplete the function that takes two integers and returns\nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n    return abs(a % 10) * abs(b % 10)\n\n\n\nWrite a Python function `intersection(interval1, interval2)` to solve the following problem:\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two\nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\n\n\nWrite a Python function `factorize(n: int) -> List[int]` to solve the following problem:\nReturn list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\n  factors = [2, 2, 2, 5, 5, 7]\n\n    for i in range(len(factors)):\n        if factors[-i-1] > factors[i]:\n            factors.pop(-i-1)\n\n    return factors\n\n\n\nWrite a Python function `get_all_permutations_in_a_list(lst)` to solve the following problem:\nGiven a list of integers, return all possible permutations of the given list.\nExample: get_all_permutations_in_a_list([0, 1, 2]) == [[0, 1, 2], [0, 2, 1], [1, 0, 2], [1, 2, 0], [2, 0, 1], [2, 1, 0]]\n>>> get_all_permutations_in_a_list([3, 2, 1]) ==",
        "\n\n\nWrite a Python function `is_equal_to_sum_even(n)` to solve the following problem:\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n    return n%2 == 0 and n >= 8\n\n\n\nWrite a Python function `multiply(a, b)` to solve the following problem:\nComplete the function that takes two integers and returns\nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n    return abs(a % 10) * abs(b % 10)\n\n\n\nWrite a Python function `intersection(interval1, interval2)` to solve the following problem:\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two\nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\n\n\nWrite a Python function `factorize(n: int) -> List[int]` to solve the following problem:\nReturn list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\n  factors = list(factorize(n))\n>>> factors.sort()\n>>> factors\n[2, 2, 2, 7, 5]\n>>> factorize(143)\n[1, 2, 4, 3]\n>>> factorize(987)\n[1, 2, 3, 5, 7]\n>>> factorize(1234)\n[1, 2, 3, 4]\n>>> factorize(1430)\n[3, 4, 1]\n>>> factorize(12)\n[2, 1]\n>>> factorize(1)\n[1]\n\n    \n\n\nWrite a Python function `is_palindrome(num: int) -> bool` to solve the following problem:\nAssume the input is valid.\nIf the number is a palindrome\n'''\n\nimport unittest\nfrom utils",
        "\n\n\nWrite a Python function `is_equal_to_sum_even(n)` to solve the following problem:\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n    return n%2 == 0 and n >= 8\n\n\n\nWrite a Python function `multiply(a, b)` to solve the following problem:\nComplete the function that takes two integers and returns\nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n    return abs(a % 10) * abs(b % 10)\n\n\n\nWrite a Python function `intersection(interval1, interval2)` to solve the following problem:\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two\nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\n\n\nWrite a Python function `factorize(n: int) -> List[int]` to solve the following problem:\nReturn list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\n  return [factor for factor in factorize(70) if factor%2 == 0]\n\n\n\nWrite a Python function `is_power_of_2(n: int) -> bool` to solve the following problem:\nReturn whether the given integer is a power of 2.\n>>> is_power_of_2(1)\nTrue\n>>> is_power_of_2(2)\nTrue\n>>> is_power_of_2(4)\nFalse\n>>> is_power_of_2(12)\nFalse\n>>> is_power_of_2(13)\nTrue\n>>> is_power_of_2(23)\nTrue\n>>> is_power_of_2(24)\nFalse\n>>> is_power_of_2(25)\nFalse\n>>> is_power_of_2(26)\nFalse\n>>> is_power_",
        "\n\n\nWrite a Python function `is_equal_to_sum_even(n)` to solve the following problem:\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n    return n%2 == 0 and n >= 8\n\n\n\nWrite a Python function `multiply(a, b)` to solve the following problem:\nComplete the function that takes two integers and returns\nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n    return abs(a % 10) * abs(b % 10)\n\n\n\nWrite a Python function `intersection(interval1, interval2)` to solve the following problem:\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two\nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\n\n\nWrite a Python function `how_many_times(string: str, substring: str) -> int` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\n\n\nWrite a Python function `factorize(n: int) -> List[int]` to solve the following problem:\nReturn list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\n  return [i for i in range(1, 20) if n % i == 0]\n\nWrite a Python function `is_anagram(a: str, b: str) -> bool` to solve the following problem:\nDetermine if two strings a and b are anagrams of each other.\nExamples:\nis_anagram('abc', 'abc')\nTrue\n>>> is_anagram('abc', 'abd')\nFalse\n>>> is_anagram('abc', 'def')\nFalse\n>>> is_anagram('abc', 'acb')\nTrue\n>>> is_anagram('abc', 'aabc')\nTrue\n>>> is_anagram('abc', 'abab')\nFalse\n    return a == b\n\n>>> is_anagram('abc', 'cdef')\nFalse\n>>> is_anagram('abcdefgh', 'abcdefgh')\nTrue\n>>> is_anagram('abc"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `double_the_difference(lst)` to solve the following problem:\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\nIf the input list is empty, return 0.\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n\n\nWrite a Python function `is_palindrome(text: str)` to solve the following problem:\nChecks if given string is a palindrome\n>>> is_palindrome('')\nTrue\n>>> is_palindrome('aba')\nTrue\n>>> is_palindrome('aaaaa')\nTrue\n>>> is_palindrome('zbcd')\nFalse\n    for i in range(len(text)):\n        if text[i]!= text[len(text) - 1 - i]:\n            return False\n    return True\n\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `is_equal_to_sum_even(n)` to solve the following problem:\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n    return n%2 == 0 and n >= 8\n\n\n\nWrite a Python function `remove_duplicates(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n ",
      "output": [
        "\n\n\nWrite a Python function `double_the_difference(lst)` to solve the following problem:\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\nIf the input list is empty, return 0.\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n\n\nWrite a Python function `is_palindrome(text: str)` to solve the following problem:\nChecks if given string is a palindrome\n>>> is_palindrome('')\nTrue\n>>> is_palindrome('aba')\nTrue\n>>> is_palindrome('aaaaa')\nTrue\n>>> is_palindrome('zbcd')\nFalse\n    for i in range(len(text)):\n        if text[i]!= text[len(text) - 1 - i]:\n            return False\n    return True\n\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `is_equal_to_sum_even(n)` to solve the following problem:\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n    return n%2 == 0 and n >= 8\n\n\n\nWrite a Python function `remove_duplicates(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n  def count_occurrences(l, e):\n    c = 0\n    for i in l:\n        if i == e:\n            c += 1\n    return c\n>>> count_occurrences([1, 2, 3, 2, 4], 2)\n1\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n  def count_occurrences(l, e):\n    c = 0\n    for i in l:\n        if i == e:\n            c += 1\n    return c\n>>> count_occurrences([1, 2, 3, 2, 4], 2)\n1\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n  def count_occurrences(l, e):\n    c = 0\n    for i in",
        "\n\n\nWrite a Python function `double_the_difference(lst)` to solve the following problem:\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\nIf the input list is empty, return 0.\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n\n\nWrite a Python function `is_palindrome(text: str)` to solve the following problem:\nChecks if given string is a palindrome\n>>> is_palindrome('')\nTrue\n>>> is_palindrome('aba')\nTrue\n>>> is_palindrome('aaaaa')\nTrue\n>>> is_palindrome('zbcd')\nFalse\n    for i in range(len(text)):\n        if text[i]!= text[len(text) - 1 - i]:\n            return False\n    return True\n\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `is_equal_to_sum_even(n)` to solve the following problem:\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n    return n%2 == 0 and n >= 8\n\n\n\nWrite a Python function `remove_duplicates(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n ~~~\nExample\nnumbers = [7, 8, 9, 1, 1, 2, 3, 4, 5, 6, 6]\n>>> remove_duplicates(numbers)\n[7, 8, 9, 1, 2, 3, 4, 5, 6]\n ~~~\nExample\nnumbers = [1,2,2,1,1]\n>>> remove_duplicates(numbers)\n[1, 1, 1]\n ~~~\nExample\nnumbers = [1, 1]\n>>> remove_duplicates(numbers)\n[1]\n ~~~\nExample\nnumber = 1\n>>> remove_duplicates(number)\n[1]\n ~~~\nExample\nnumber = 3\n>>> remove_duplicates(number)\n[1, 2, 3]\n ~~~\nExample\nnumber = 5\n>>>",
        "\n\n\nWrite a Python function `double_the_difference(lst)` to solve the following problem:\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\nIf the input list is empty, return 0.\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n\n\nWrite a Python function `is_palindrome(text: str)` to solve the following problem:\nChecks if given string is a palindrome\n>>> is_palindrome('')\nTrue\n>>> is_palindrome('aba')\nTrue\n>>> is_palindrome('aaaaa')\nTrue\n>>> is_palindrome('zbcd')\nFalse\n    for i in range(len(text)):\n        if text[i]!= text[len(text) - 1 - i]:\n            return False\n    return True\n\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `is_equal_to_sum_even(n)` to solve the following problem:\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n    return n%2 == 0 and n >= 8\n\n\n\nWrite a Python function `remove_duplicates(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n  if the input list contains duplicates, return a list of unique elements\n>>> remove_duplicates([1, 1, 1, 2, 3, 4])\n[1, 2, 3, 4]\n>>> remove_duplicates([])\n[]\n\n\nWrite a Python function `is_sorted(arr)` to solve the following problem:\nEvaluate whether the given array is sorted in ascending order.\n>>> is_sorted([5, 3, 2, 1])\nTrue\n>>> is_sorted([5, 3, 2, 4])\nFalse\n>>> is_sorted([1, 2, 3])\nFalse\n>>> is_sorted([])\nTrue\n\n\nWrite a Python function `find_max_sub_array(arr)` to solve the following problem:\nFind maximum sub-array with equal length.\n>>> find_max_sub_array([4, 2, 1",
        "\n\n\nWrite a Python function `double_the_difference(lst)` to solve the following problem:\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\nIf the input list is empty, return 0.\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n\n\nWrite a Python function `is_palindrome(text: str)` to solve the following problem:\nChecks if given string is a palindrome\n>>> is_palindrome('')\nTrue\n>>> is_palindrome('aba')\nTrue\n>>> is_palindrome('aaaaa')\nTrue\n>>> is_palindrome('zbcd')\nFalse\n    for i in range(len(text)):\n        if text[i]!= text[len(text) - 1 - i]:\n            return False\n    return True\n\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `is_equal_to_sum_even(n)` to solve the following problem:\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n    return n%2 == 0 and n >= 8\n\n\n\nWrite a Python function `remove_duplicates(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n  return [i for i in numbers if i not in numbers[1:]]\n    return [i for i in numbers if i not in numbers]\n    return numbers\n\n\n\nWrite a Python function `is_palindrome(text: str)` to solve the following problem:\nChecks if given string is a palindrome\n>>> is_palindrome('')\nTrue\n>>> is_palindrome('aba')\nTrue\n>>> is_palindrome('aaaaa')\nTrue\n>>> is_palindrome('zbcd')\nFalse\n    for i in range(len(text)):\n        if text[i]!= text[len(text) - 1 - i]:\n            return False\n    return True\n\n\n\nWrite a Python function `remove_duplicates(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the",
        "\n\n\nWrite a Python function `double_the_difference(lst)` to solve the following problem:\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\nIf the input list is empty, return 0.\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n\n\nWrite a Python function `is_palindrome(text: str)` to solve the following problem:\nChecks if given string is a palindrome\n>>> is_palindrome('')\nTrue\n>>> is_palindrome('aba')\nTrue\n>>> is_palindrome('aaaaa')\nTrue\n>>> is_palindrome('zbcd')\nFalse\n    for i in range(len(text)):\n        if text[i]!= text[len(text) - 1 - i]:\n            return False\n    return True\n\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `is_equal_to_sum_even(n)` to solve the following problem:\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n    return n%2 == 0 and n >= 8\n\n\n\nWrite a Python function `remove_duplicates(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a Python function `remove_duplicates(numbers: List[int]) -> List[int]` to solve the following problem:\nFrom a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\nExample\nnumbers = [1, 3, 5, 7, 2, 4, 6, 1]\n>>> remove_duplicates(numbers)\n[1, 2, 3, 4, 6, 7]\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a Python function `find_pairs(numbers: List[int], target: int) -> List[int]` to solve the following problem:\nFrom a list of integers, find all pairs of successive elements whose sum is equal to the given target.\nExample\nnumbers = [1, 3, 5, 7, 2, 4"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `count_up_to(n)` to solve the following problem:\nImplement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => [2,3]\ncount_up_to(11) => [2,3,5,7]\ncount_up_to(0) => []\ncount_up_to(20) => [2,3,5,7,11,13,17,19]\ncount_up_to(1) => []\ncount_up_to(18) => [2,3,5,7,11,13,17]\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\n\n\nWrite a Python function `compare(game,guess)` to solve the following problem:\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match.\nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    return [abs(x-y) for x,y in zip(game,guess)]\n\n\n\nWrite a Python function `double_the_difference(lst)` to solve the following problem:\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\nIf the input list is empty, return 0.\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n\n\nWrite a Python function `total_match(lst1, lst2)` to solve the following problem:\nWrite a function that accepts two lists of strings and returns the list that has\ntotal number of chars in the all strings of the list less than the other list.\nif the two lists have the same number of chars, return the first list.\nExamples\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\n\n\nWrite a Python function `flip_case(string: str) -> str` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n ",
      "output": [
        "\n\n\nWrite a Python function `count_up_to(n)` to solve the following problem:\nImplement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => [2,3]\ncount_up_to(11) => [2,3,5,7]\ncount_up_to(0) => []\ncount_up_to(20) => [2,3,5,7,11,13,17,19]\ncount_up_to(1) => []\ncount_up_to(18) => [2,3,5,7,11,13,17]\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\n\n\nWrite a Python function `compare(game,guess)` to solve the following problem:\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match.\nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    return [abs(x-y) for x,y in zip(game,guess)]\n\n\n\nWrite a Python function `double_the_difference(lst)` to solve the following problem:\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\nIf the input list is empty, return 0.\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n\n\nWrite a Python function `total_match(lst1, lst2)` to solve the following problem:\nWrite a function that accepts two lists of strings and returns the list that has\ntotal number of chars in the all strings of the list less than the other list.\nif the two lists have the same number of chars, return the first list.\nExamples\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\n\n\nWrite a Python function `flip_case(string: str) -> str` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n \ud83d\udca5\n>>> flip_case('HellO')\n'hELLO'\n \ud83d\udca5\n>>> flip_case('HeLlO')\n'hELLO'\n \ud83d\udca5\n>>> flip_case('HeLlO')\n'hELLO'\n \ud83d\udca5\n>>> def flip_case(string):\n...     return string.lower().replace('a', 'e').replace('A', 'E').upper().replace('A', 'E').lower()\n>>> flip_case('hello')\n'heLlo'\n>>> flip_case('Hello')\n'HEllO'\n>>> flip_case('hEllO')\n'HEllO'\n>>> flip_case('heLLO')\n'HEllO'\n>>> flip_case('HeLlO')\n'HeLlO'\n>>> flip_case('HeLlO')\n'HeLlO'\n>>> flip",
        "\n\n\nWrite a Python function `count_up_to(n)` to solve the following problem:\nImplement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => [2,3]\ncount_up_to(11) => [2,3,5,7]\ncount_up_to(0) => []\ncount_up_to(20) => [2,3,5,7,11,13,17,19]\ncount_up_to(1) => []\ncount_up_to(18) => [2,3,5,7,11,13,17]\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\n\n\nWrite a Python function `compare(game,guess)` to solve the following problem:\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match.\nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    return [abs(x-y) for x,y in zip(game,guess)]\n\n\n\nWrite a Python function `double_the_difference(lst)` to solve the following problem:\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\nIf the input list is empty, return 0.\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n\n\nWrite a Python function `total_match(lst1, lst2)` to solve the following problem:\nWrite a function that accepts two lists of strings and returns the list that has\ntotal number of chars in the all strings of the list less than the other list.\nif the two lists have the same number of chars, return the first list.\nExamples\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\n\n\nWrite a Python function `flip_case(string: str) -> str` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n ############################################################################\n\nWrite a Python function `get_primes_up_to(n)` to solve the following problem:\nGiven an integer `n`, find all the primes less than or equal to `n`.\n>>> get_primes_up_to(10)\n[2, 3, 5, 7, 11, 13, 17, 19]\n>>> get_primes_up_to(100)\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n>>> get_",
        "\n\n\nWrite a Python function `count_up_to(n)` to solve the following problem:\nImplement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => [2,3]\ncount_up_to(11) => [2,3,5,7]\ncount_up_to(0) => []\ncount_up_to(20) => [2,3,5,7,11,13,17,19]\ncount_up_to(1) => []\ncount_up_to(18) => [2,3,5,7,11,13,17]\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\n\n\nWrite a Python function `compare(game,guess)` to solve the following problem:\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match.\nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    return [abs(x-y) for x,y in zip(game,guess)]\n\n\n\nWrite a Python function `double_the_difference(lst)` to solve the following problem:\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\nIf the input list is empty, return 0.\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n\n\nWrite a Python function `total_match(lst1, lst2)` to solve the following problem:\nWrite a function that accepts two lists of strings and returns the list that has\ntotal number of chars in the all strings of the list less than the other list.\nif the two lists have the same number of chars, return the first list.\nExamples\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\n\n\nWrite a Python function `flip_case(string: str) -> str` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n..........\n>>> flip_case('hello')\n'HELLO'\n..........\n>>> flip_case('Hi')\n'hi'\n..........\n>>> flip_case('Hello world!')\n'hELLO WORLD!'\n..........\n>>> flip_case('i love you')\n'I LOVE YOU'\n..........\n>>> flip_case('I LOVE YOU!')\n'I LOVE YOU!'\n..........\n>>> flip_case('I love you!')\n'I LOVE YOU!'\n..........\n>>> flip_case('i Love you')\n'i LOVE YOU'\n..........\n>>> flip_case('')\n''\n..........\n>>> flip_case('  i Love you  ')\n'  I LOVE YOU  '\n..........\n>>> flip_case('1 2 3 4 5')\n'2 3",
        "\n\n\nWrite a Python function `count_up_to(n)` to solve the following problem:\nImplement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => [2,3]\ncount_up_to(11) => [2,3,5,7]\ncount_up_to(0) => []\ncount_up_to(20) => [2,3,5,7,11,13,17,19]\ncount_up_to(1) => []\ncount_up_to(18) => [2,3,5,7,11,13,17]\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\n\n\nWrite a Python function `compare(game,guess)` to solve the following problem:\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match.\nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    return [abs(x-y) for x,y in zip(game,guess)]\n\n\n\nWrite a Python function `double_the_difference(lst)` to solve the following problem:\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\nIf the input list is empty, return 0.\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n\n\nWrite a Python function `total_match(lst1, lst2)` to solve the following problem:\nWrite a function that accepts two lists of strings and returns the list that has\ntotal number of chars in the all strings of the list less than the other list.\nif the two lists have the same number of chars, return the first list.\nExamples\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\n\n\nWrite a Python function `flip_case(string: str) -> str` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n  >>> flip_case('hello')\n'hELLO'\n  >>> flip_case('helLO')\n'hELLO'\n  >>> flip_case('lOtH')\n'lOtH'\n  >>> flip_case('lOtH!')\n'lOtH!'\n  >>> flip_case('hello world')\n'hello world'\n  >>> flip_case('hello world!')\n'hello world!'\n  >>> flip_case('hello world!')\n'hello world!'\n\n# Write a Python function `even_numbers(n: int) -> list` to solve the following problem:\n# Write a Python function that accepts an integer and returns a list of odd integers in the range [0, n].\n# If `n` is odd, the first element in the returned list is 0.\n# If `n` is even, the first element in the returned list is ",
        "\n\n\nWrite a Python function `count_up_to(n)` to solve the following problem:\nImplement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => [2,3]\ncount_up_to(11) => [2,3,5,7]\ncount_up_to(0) => []\ncount_up_to(20) => [2,3,5,7,11,13,17,19]\ncount_up_to(1) => []\ncount_up_to(18) => [2,3,5,7,11,13,17]\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\n\n\nWrite a Python function `compare(game,guess)` to solve the following problem:\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match.\nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    return [abs(x-y) for x,y in zip(game,guess)]\n\n\n\nWrite a Python function `double_the_difference(lst)` to solve the following problem:\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\nIf the input list is empty, return 0.\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n\n\nWrite a Python function `total_match(lst1, lst2)` to solve the following problem:\nWrite a function that accepts two lists of strings and returns the list that has\ntotal number of chars in the all strings of the list less than the other list.\nif the two lists have the same number of chars, return the first list.\nExamples\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\n\n\nWrite a Python function `flip_case(string: str) -> str` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n ##########\n>>> flip_case('hello')\n'Hello'\n##########\n>>> flip_case('Hello World!')\n'hELO WOrLD!'\n\n\nWrite a Python function `reverse(string: str) -> str` to solve the following problem:\nWrite a function that takes in a string and returns the string reversed.\n>>> reverse('hello')\n'olleH'\n>>> reverse('python')\n'thon'\n>>> reverse('hello world')\n'drowH lloW'\n\n\nWrite a Python function `is_palindrome(string: str) -> bool` to solve the following problem:\nWrite a function that takes in a string and returns True if the string is pallindrome\nand False if it is not.\n>>> is_palindrome('hello')\nTrue\n>>> is_palindrome('hello world')\nFalse\n>>> is_palindrome('hello hello')\nFalse\n>>> is_pal"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `correct_bracketing(brackets: str)` to solve the following problem:\nbrackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n\n\nWrite a Python function `max_fill(grid, capacity):\n    import math` to solve the following problem:\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it,\nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\nExample 1:\nInput:\ngrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nbucket_capacity : 1\nOutput: 6\nExample 2:\nInput:\ngrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\nbucket_capacity : 2\nOutput: 5\nExample 3:\nInput:\ngrid : [[0,0,0], [0,0,0]]\nbucket_capacity : 5\nOutput: 0\nConstraints:\n* all wells have the same length\n* 1 <= grid.length <= 10^2\n* 1 <= grid[:,1].length <= 10^2\n* grid[i][j] -> 0 | 1\n* 1 <= capacity <= 10\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n\n\n\nWrite a Python function `select_words(s, n)` to solve the following problem:\nGiven a string s and a natural number n, you have been tasked to implement\na function that returns a list of all words from string s that contain exactly\nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\n\n\nWrite a Python function `concatenate(strings: List[str]) -> str` to solve the following problem:\nConcatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n ",
      "output": [
        "\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `correct_bracketing(brackets: str)` to solve the following problem:\nbrackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n\n\nWrite a Python function `max_fill(grid, capacity):\n    import math` to solve the following problem:\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it,\nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\nExample 1:\nInput:\ngrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nbucket_capacity : 1\nOutput: 6\nExample 2:\nInput:\ngrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\nbucket_capacity : 2\nOutput: 5\nExample 3:\nInput:\ngrid : [[0,0,0], [0,0,0]]\nbucket_capacity : 5\nOutput: 0\nConstraints:\n* all wells have the same length\n* 1 <= grid.length <= 10^2\n* 1 <= grid[:,1].length <= 10^2\n* grid[i][j] -> 0 | 1\n* 1 <= capacity <= 10\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n\n\n\nWrite a Python function `select_words(s, n)` to solve the following problem:\nGiven a string s and a natural number n, you have been tasked to implement\na function that returns a list of all words from string s that contain exactly\nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\n\n\nWrite a Python function `concatenate(strings: List[str]) -> str` to solve the following problem:\nConcatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n ~~~\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n\"\"\"\n# Python 3.8.2 (v3.8.2:6c0df9, Sep 13 2019, 19:38:21) [MSC v.1916 32 bit (Intel)] on win32\n\"\"\"\nimport math\n\ndef pairs_sum_to_zero(l):\n    for i in range(0, len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\ndef correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False",
        "\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `correct_bracketing(brackets: str)` to solve the following problem:\nbrackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n\n\nWrite a Python function `max_fill(grid, capacity):\n    import math` to solve the following problem:\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it,\nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\nExample 1:\nInput:\ngrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nbucket_capacity : 1\nOutput: 6\nExample 2:\nInput:\ngrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\nbucket_capacity : 2\nOutput: 5\nExample 3:\nInput:\ngrid : [[0,0,0], [0,0,0]]\nbucket_capacity : 5\nOutput: 0\nConstraints:\n* all wells have the same length\n* 1 <= grid.length <= 10^2\n* 1 <= grid[:,1].length <= 10^2\n* grid[i][j] -> 0 | 1\n* 1 <= capacity <= 10\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n\n\n\nWrite a Python function `select_words(s, n)` to solve the following problem:\nGiven a string s and a natural number n, you have been tasked to implement\na function that returns a list of all words from string s that contain exactly\nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\n\n\nWrite a Python function `concatenate(strings: List[str]) -> str` to solve the following problem:\nConcatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n #############################################################################\nWrite a Python function `rotate_list(l, k: int): List[Any]` to solve the following problem:\nRotate a list of `l` by `k` elements. Return the rotated list.\nIf the list is of length 0, you should return an empty list.\nIf the value of k is negative, you should return an empty list.\nTo rotate an array of length `n`, `n` should be even.\nExample:\nrotate_list([1, 2, 3], 1) ==> [2, 3, 1]\nrotate_list([1, 2, 3], 2) ==> [3, 1, 2]\nrotate_list([1, 2, 3], 3) ==> [1, 2, 3]\nrotate_list([1, 2, 3], -1) ==> []\nrotate_list",
        "\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `correct_bracketing(brackets: str)` to solve the following problem:\nbrackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n\n\nWrite a Python function `max_fill(grid, capacity):\n    import math` to solve the following problem:\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it,\nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\nExample 1:\nInput:\ngrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nbucket_capacity : 1\nOutput: 6\nExample 2:\nInput:\ngrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\nbucket_capacity : 2\nOutput: 5\nExample 3:\nInput:\ngrid : [[0,0,0], [0,0,0]]\nbucket_capacity : 5\nOutput: 0\nConstraints:\n* all wells have the same length\n* 1 <= grid.length <= 10^2\n* 1 <= grid[:,1].length <= 10^2\n* grid[i][j] -> 0 | 1\n* 1 <= capacity <= 10\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n\n\n\nWrite a Python function `select_words(s, n)` to solve the following problem:\nGiven a string s and a natural number n, you have been tasked to implement\na function that returns a list of all words from string s that contain exactly\nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\n\n\nWrite a Python function `concatenate(strings: List[str]) -> str` to solve the following problem:\nConcatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n ###############################################################################################\n\nWrite a Python function `find_index_of_substring(s: str, sub: str) -> int` to solve the following problem:\nGiven a string s and a substring sub, return the first index of the substring in s if it exists,\notherwise return -1.\nIf there is no such substring in the string, return -1.\nExamples:\nfind_index_of_substring('I have a dog', 'a') ==> 1\nfind_index_of_substring('I have a dog', 'b') ==> 2\nfind_index_of_substring('I have a dog', 'dog') ==> -1\nfind_index_of_substring('I have a dog', 'i') ==> -1\nfind_index_of_substring('I have a dog', 'z') ==> -1\nfind_index_of_substring('Hello', 'o') ==> 0\nfind",
        "\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `correct_bracketing(brackets: str)` to solve the following problem:\nbrackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n\n\nWrite a Python function `max_fill(grid, capacity):\n    import math` to solve the following problem:\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it,\nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\nExample 1:\nInput:\ngrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nbucket_capacity : 1\nOutput: 6\nExample 2:\nInput:\ngrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\nbucket_capacity : 2\nOutput: 5\nExample 3:\nInput:\ngrid : [[0,0,0], [0,0,0]]\nbucket_capacity : 5\nOutput: 0\nConstraints:\n* all wells have the same length\n* 1 <= grid.length <= 10^2\n* 1 <= grid[:,1].length <= 10^2\n* grid[i][j] -> 0 | 1\n* 1 <= capacity <= 10\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n\n\n\nWrite a Python function `select_words(s, n)` to solve the following problem:\nGiven a string s and a natural number n, you have been tasked to implement\na function that returns a list of all words from string s that contain exactly\nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\n\n\nWrite a Python function `concatenate(strings: List[str]) -> str` to solve the following problem:\nConcatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n ###############################################################################################\n\nWrite a Python function `split_string(string: str, s: str) -> List[str]` to solve the following problem:\nSplit string by separator s into a list of strings.\n>>> split_string(\"a cat, a dog, a fish\", \", \")\n['a', 'cat', 'a', 'dog', 'a', 'fish']\n>>> split_string(\"a cat, a dog, a fish\", \"- \")\n['a cat', 'a dog', 'a fish']\n>>> split_string(\"a cat, a dog, a fish\", \"  \")\n['a', 'cat', 'a dog', 'a fish']\n>>> split_string(\"a cat, a dog, a fish\", \" a \")\n['a cat, a dog, a fish']\n>>> split_string(\"a cat, a dog, a fish\", \"b\")\n['a cat, a dog, a fish",
        "\n\n\nWrite a Python function `pairs_sum_to_zero(l)` to solve the following problem:\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n\n\nWrite a Python function `correct_bracketing(brackets: str)` to solve the following problem:\nbrackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n\n\nWrite a Python function `max_fill(grid, capacity):\n    import math` to solve the following problem:\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it,\nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\nExample 1:\nInput:\ngrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nbucket_capacity : 1\nOutput: 6\nExample 2:\nInput:\ngrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\nbucket_capacity : 2\nOutput: 5\nExample 3:\nInput:\ngrid : [[0,0,0], [0,0,0]]\nbucket_capacity : 5\nOutput: 0\nConstraints:\n* all wells have the same length\n* 1 <= grid.length <= 10^2\n* 1 <= grid[:,1].length <= 10^2\n* grid[i][j] -> 0 | 1\n* 1 <= capacity <= 10\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n\n\n\nWrite a Python function `select_words(s, n)` to solve the following problem:\nGiven a string s and a natural number n, you have been tasked to implement\na function that returns a list of all words from string s that contain exactly\nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\n\n\nWrite a Python function `concatenate(strings: List[str]) -> str` to solve the following problem:\nConcatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n #########\nWrite a Python function `is_palindrome(word: str) -> bool` to solve the following problem:\nis_palindrome takes a string as an input and returns True if it reads the same forwards and backwards.\nExamples:\nis_palindrome(\"abca\") ==> True\nis_palindrome(\"race a car\") ==> False\nis_palindrome(\"abcba\") ==> True\nis_palindrome(\"abcbaa\") ==> False\nis_palindrome(\"abcba\") ==> True\nis_palindrome(\"abcbaa\") ==> False\nis_palindrome(\"race a car\") ==> False\nis_palindrome(\"race a car\") ==> False\nis_palindrome(\"race a car\") ==> False\nis_palindrome(\"race a car\") ==> False\nis_palindrome(\"race a car\") ==> False\nis_palindrome(\"race a car\") ==> False\nis_palindrome(\"race a"
      ]
    },
    {
      "input": "\n\n\nWrite a Python function `can_arrange(arr)` to solve the following problem:\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\n\n\nWrite a Python function `numerical_letter_grade(grades)` to solve the following problem:\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write\na function that can output a list of letter grades using the following table:\nGPA       |    Letter grade\n4.0                A+\n> 3.7                A\n> 3.3                A-\n> 3.0                B+\n> 2.7                B\n> 2.3                B-\n> 2.0                C+\n> 1.7                C\n> 1.3                C-\n> 1.0                D+\n> 0.7                D\n> 0.0                D-\n0.0                E\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\n\n\nWrite a Python function `right_angle_triangle(a, b, c)` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or\n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `filter_by_prefix(strings: List[str], prefix: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n ",
      "output": [
        "\n\n\nWrite a Python function `can_arrange(arr)` to solve the following problem:\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\n\n\nWrite a Python function `numerical_letter_grade(grades)` to solve the following problem:\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write\na function that can output a list of letter grades using the following table:\nGPA       |    Letter grade\n4.0                A+\n> 3.7                A\n> 3.3                A-\n> 3.0                B+\n> 2.7                B\n> 2.3                B-\n> 2.0                C+\n> 1.7                C\n> 1.3                C-\n> 1.0                D+\n> 0.7                D\n> 0.0                D-\n0.0                E\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\n\n\nWrite a Python function `right_angle_triangle(a, b, c)` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or\n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `filter_by_prefix(strings: List[str], prefix: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n \n\"\"\"\n",
        "\n\n\nWrite a Python function `can_arrange(arr)` to solve the following problem:\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\n\n\nWrite a Python function `numerical_letter_grade(grades)` to solve the following problem:\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write\na function that can output a list of letter grades using the following table:\nGPA       |    Letter grade\n4.0                A+\n> 3.7                A\n> 3.3                A-\n> 3.0                B+\n> 2.7                B\n> 2.3                B-\n> 2.0                C+\n> 1.7                C\n> 1.3                C-\n> 1.0                D+\n> 0.7                D\n> 0.0                D-\n0.0                E\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\n\n\nWrite a Python function `right_angle_triangle(a, b, c)` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or\n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `filter_by_prefix(strings: List[str], prefix: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n ######################################################################################\nWrite a Python function `sort_by_length(strings) -> List[str]` to solve the following problem:\nSort the given list of strings by length.\n>>> sort_by_length(['abc', 'cde', 'cde', 'bcda'])\n['abc', 'bcda', 'cde', 'cde']\n######################################################################################\nWrite a Python function `filter_by_suffix(strings: List[str], suffix: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n['array']\n ######################################################################################\nWrite a Python function `is_palindrome(s: str) -> bool` to solve the following problem:\nCheck if the given string is a Pal",
        "\n\n\nWrite a Python function `can_arrange(arr)` to solve the following problem:\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\n\n\nWrite a Python function `numerical_letter_grade(grades)` to solve the following problem:\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write\na function that can output a list of letter grades using the following table:\nGPA       |    Letter grade\n4.0                A+\n> 3.7                A\n> 3.3                A-\n> 3.0                B+\n> 2.7                B\n> 2.3                B-\n> 2.0                C+\n> 1.7                C\n> 1.3                C-\n> 1.0                D+\n> 0.7                D\n> 0.0                D-\n0.0                E\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\n\n\nWrite a Python function `right_angle_triangle(a, b, c)` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or\n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `filter_by_prefix(strings: List[str], prefix: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n #############################################################################################\nThe given Python code can be made more complex as you iterate through the elements in\nthe input list and check if the element is equal to the given prefix. This can be easily\ndone using a boolean variable and a variable to store the index of the first occurrence of\nthe prefix in the list.\n\nIf the prefix is found, the index of the first occurrence of the prefix is stored in 'first'.\nIf the prefix is not found, the index of the first occurrence of the prefix is the current index.\n\nIf prefix is the first element of the list, the variable 'first' is not used.\n#############################################################################################\n\nWrite a Python function `filter_by_suffix(strings: List[str], suffix: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter",
        "\n\n\nWrite a Python function `can_arrange(arr)` to solve the following problem:\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\n\n\nWrite a Python function `numerical_letter_grade(grades)` to solve the following problem:\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write\na function that can output a list of letter grades using the following table:\nGPA       |    Letter grade\n4.0                A+\n> 3.7                A\n> 3.3                A-\n> 3.0                B+\n> 2.7                B\n> 2.3                B-\n> 2.0                C+\n> 1.7                C\n> 1.3                C-\n> 1.0                D+\n> 0.7                D\n> 0.0                D-\n0.0                E\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\n\n\nWrite a Python function `right_angle_triangle(a, b, c)` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or\n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `filter_by_prefix(strings: List[str], prefix: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n #################################################################################\ndef filter_by_prefix(strings, prefix):\n    filtered_strings = []\n    for i in strings:\n        if i.startswith(prefix):\n            filtered_strings.append(i)\n    return filtered_strings\n\n\"\"\"\n\nimport doctest\n\ndef can_arrange(arr):\n    \"\"\"\n    :param arr: list of ints\n    :return: int\n    \"\"\"\n    index = -1\n    i = 0\n    while i < len(arr):\n        if arr[i] >= arr[i - 1]:\n            index = i\n            i += 1\n        else:\n            i += 1\n    return index\n\ndef numerical_letter_grade(grades):\n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa",
        "\n\n\nWrite a Python function `can_arrange(arr)` to solve the following problem:\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\n\n\nWrite a Python function `numerical_letter_grade(grades)` to solve the following problem:\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write\na function that can output a list of letter grades using the following table:\nGPA       |    Letter grade\n4.0                A+\n> 3.7                A\n> 3.3                A-\n> 3.0                B+\n> 2.7                B\n> 2.3                B-\n> 2.0                C+\n> 1.7                C\n> 1.3                C-\n> 1.0                D+\n> 0.7                D\n> 0.0                D-\n0.0                E\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\n\n\nWrite a Python function `right_angle_triangle(a, b, c)` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or\n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n\n\n\nWrite a Python function `reverse_delete(s,c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n\nWrite a Python function `filter_by_prefix(strings: List[str], prefix: str) -> List[str]` to solve the following problem:\nFilter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n ################################################################################\n\n    filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\n################################################################################\n\n    def filter_by_prefix(self, strings: List[str], prefix: str) -> List[str]:\n        \"\"\"\n        >>> filter_by_prefix([], 'a')\n        []\n        >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n        ['abc', 'array']\n        >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n        ['abc', 'array']\n        >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'z')\n        []\n        >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n        []\n        >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'abc')"
      ]
    }
  ],
  "mbbp": [
    {
      "input": "\n\n\nWrite a function to find the median length of a trapezium.\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\n\n\nWrite a function to get the angle of a complex number.\nimport cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\n\n\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\ndef is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\n\n\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef find(n,m):  \n    q = n//m \n    return (q)\n\n\nWrite a python function to remove first and last occurrence of a given character from the string.\n ",
      "output": [
        "\n\n\nWrite a function to find the median length of a trapezium.\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\n\n\nWrite a function to get the angle of a complex number.\nimport cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\n\n\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\ndef is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\n\n\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef find(n,m):  \n    q = n//m \n    return (q)\n\n\nWrite a python function to remove first and last occurrence of a given character from the string.\n ################################################################################\n#\n# 1.\tWrite a function to find the count of a particular character in a string.\n#\n# 2.\tWrite a function to find the index of the first occurrence of a particular character in a string.\n#\n# 3.\tWrite a function to find the index of the last occurrence of a particular character in a string.\n#\n# 4.\tWrite a function to check whether a string contains a particular character.\n#\n# 5.\tWrite a function to remove all occurrences of a given character from a string.\n#\n# 6.\tWrite a function to reverse a string.\n#\n# 7.\tWrite a function to rotate a string by a given number of steps.\n################################################################################\n#\n# 1.\tWrite a function to find the count of a particular character in a string.\n#\n# 2.\tWrite a function to find the index",
        "\n\n\nWrite a function to find the median length of a trapezium.\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\n\n\nWrite a function to get the angle of a complex number.\nimport cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\n\n\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\ndef is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\n\n\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef find(n,m):  \n    q = n//m \n    return (q)\n\n\nWrite a python function to remove first and last occurrence of a given character from the string.\n ################################################################################\n\nWrite a python function to find the length of the longest common prefix of 2 strings.\ndef longest_common_prefix(s1, s2):\n    # Write your code here.\n    lcp = 0\n    for i in range(min(len(s1), len(s2))):\n        if s1[i]!= s2[i]:\n            lcp = lcp + 1\n    return lcp\n\n\nWrite a function that takes in a string and a character and returns the first index of the character in the string.\ndef find_index(s, c):\n    # Write your code here.\n    for i in range(len(s)):\n        if s[i] == c:\n            return i\n    return -1\n\n\nWrite a python function to remove the last character from a given string.\ndef remove_last(s):\n    # Write your code here.\n    return s[:-1]\n\n\nWrite",
        "\n\n\nWrite a function to find the median length of a trapezium.\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\n\n\nWrite a function to get the angle of a complex number.\nimport cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\n\n\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\ndef is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\n\n\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef find(n,m):  \n    q = n//m \n    return (q)\n\n\nWrite a python function to remove first and last occurrence of a given character from the string.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef remove_first(s,ch):\n    if s[0] == ch:\n        return s[1:]\n    return s\n\ndef remove_last(s,ch):\n    return s[:-1] if s[-1] == ch else s\n\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\nWrite a python function to convert a string from upper case to lower case.\ndef upper_case(s):\n    s = s.lower()\n    return s\n\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\nWrite a python function to convert a string from lower case to upper case.\ndef lower_case(s):\n    return s.upper()\n\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\nWrite a python function to reverse a string.\ndef reverse_str(s):\n    return s[::-1]\n\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\nWrite a python function to find the last occurrence of a substring in a given string.\ndef find",
        "\n\n\nWrite a function to find the median length of a trapezium.\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\n\n\nWrite a function to get the angle of a complex number.\nimport cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\n\n\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\ndef is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\n\n\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef find(n,m):  \n    q = n//m \n    return (q)\n\n\nWrite a python function to remove first and last occurrence of a given character from the string.\n #############################################################################################\ndef remove_first_and_last_occurrence(s, c):\n    s = s.strip()\n    return s[1:len(s)-1]\n\n\nWrite a python function to find first and last occurrence of a given character from the string.\n #############################################################################################\ndef remove_first_and_last_occurrence_with_regex(s, c):\n    s = s.strip()\n    return re.sub(c,\"\",s)\n\n\nWrite a python function to remove all occurrences of a given character from the string.\n #############################################################################################\ndef remove_all_occurrences(s, c):\n    s = s.strip()\n    return re.sub(c,\"\",s)\n\n\nWrite a python function to reverse a given string.\n #############################################################################################\ndef reverse(s):\n    return s[::-1]\n\n\nWrite a python function to check if a given string is palindrome.\n #############################################################################################\ndef is",
        "\n\n\nWrite a function to find the median length of a trapezium.\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\n\n\nWrite a function to get the angle of a complex number.\nimport cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\n\n\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\ndef is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\n\n\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef find(n,m):  \n    q = n//m \n    return (q)\n\n\nWrite a python function to remove first and last occurrence of a given character from the string.\n  >>> remove_first_last('abc', 'c')\n 'ab'\n\n'''"
      ]
    },
    {
      "input": "\n\n\nWrite a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \n\n\nWrite a function to convert a tuple to a string.\ndef tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\n\n\nWrite a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\n\n\nWrite a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n ",
      "output": [
        "\n\n\nWrite a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \n\n\nWrite a function to convert a tuple to a string.\ndef tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\n\n\nWrite a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\n\n\nWrite a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n ###############################################################################################\ndef matrix_sort(matrix):\n  m = len(matrix)\n  n = len(matrix[0])\n  res = []\n  for i in range(m):\n    for j in range(n):\n      res.append(sum(matrix[i][j]))\n  return res\n\n\nWrite a python function to find the first non-repeating character in a given string.\ndef first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\n\n\nWrite a function to sort the list of tuples in ascending order according to their first elements.\ndef tup_sort(tup1):",
        "\n\n\nWrite a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \n\n\nWrite a function to convert a tuple to a string.\ndef tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\n\n\nWrite a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\n\n\nWrite a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n ############################################################################################\ndef ascending_order(test_matrix):\n  sum_rows = [sum(row) for row in test_matrix]\n  index = 0\n  for row in sum_rows:\n    sum_rows[index] = row\n    index += 1\n  return sum_rows\n\n\nWrite a function to find out the number of strings in a list of strings that start with 'x'.\ndef x_start_count(test_list):\n  return [test_string for test_string in test_list if test_string.startswith('x')]\n\n\nWrite a function to replace all occurrences of a substring in a string.\ndef replace_all(test_string, sub_string, new_string):\n  if not sub_string in test_string:\n    return test_string\n  else:\n    index = 0\n    res = ''\n    while True:\n      if test_string[index]!= sub_string:\n        res",
        "\n\n\nWrite a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \n\n\nWrite a function to convert a tuple to a string.\ndef tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\n\n\nWrite a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\n\n\nWrite a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n ##########\ndef matrix_sum_sorted(matrix):\n  row_sum = []\n  for row in matrix:\n    row_sum.append(sum(row))\n  row_sum.sort()\n  return row_sum\n\n\nWrite a function to sort a given matrix in descending order according to the sum of its rows.\ndef matrix_sum_sorted(matrix):\n  row_sum = []\n  for row in matrix:\n    row_sum.append(sum(row))\n  row_sum.sort(reverse=True)\n  return row_sum\n\n\nWrite a function to find the index of first occurrence of a given value in a given list.\ndef index_of_first_occurrence(arr, val):\n  return arr.index(val)\n\n\nWrite a function to find the last index of a given value in a given list.\ndef last_index_of_value(arr, val):\n  i = 0\n  for i",
        "\n\n\nWrite a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \n\n\nWrite a function to convert a tuple to a string.\ndef tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\n\n\nWrite a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\n\n\nWrite a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef matrix_sum(matrix): #takes in a list of lists\n  for line in range(len(matrix)):\n    for col in range(len(matrix[line])):\n      for row in range(line+1, len(matrix)):\n        matrix[row][col] += matrix[line][col]\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef matrix_sum(test_list):\n  res = []\n  for line in range(len(test_list)):\n    for col in range(len(test_list[line])):\n      for row in range(line+1, len(test_list)):\n        res.append(test_list[row][col])\n  return res\n\n\nWrite a function to find the first repeated character in a given string.\ndef first_repeated_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += ",
        "\n\n\nWrite a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \n\n\nWrite a function to convert a tuple to a string.\ndef tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\n\n\nWrite a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\n\n\nWrite a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n ################################################################################\ndef matrix_sort(mat1):\n  res_list = []\n  for i in range(len(mat1)):\n    temp = []\n    for j in range(len(mat1[i])):\n      temp.append(mat1[i][j])\n    res_list.append(temp)\n\n  for i in range(len(res_list)):\n    for j in range(len(res_list[i])):\n      if res_list[i][j] > 0:\n        res_list[i][j] = 0\n      else:\n        res_list[i][j] = 1\n\n  for i in range(len(res_list)):\n    for j in range(len(res_list[i])):\n      if res_list[i][j] > 0:\n        res_list[i][j] -= 1\n        break\n\n  for i in range(len(res_list)):\n    for"
      ]
    },
    {
      "input": "\n\n\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\n\n\nWrite a function to check whether the given string starts and ends with the same character or not.\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \n\n\nWrite a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\n\n\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\n\n\nWrite a python function to find the volume of a triangular prism.\n ",
      "output": [
        "\n\n\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\n\n\nWrite a function to check whether the given string starts and ends with the same character or not.\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \n\n\nWrite a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\n\n\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\n\n\nWrite a python function to find the volume of a triangular prism.\n \ndef volume_of_prism(m,n,l): \n    if m*n*l!=0: \n       return (m*n*l)/6.0 \n    else: \n       return \"Not a valid triangle\" \n\n\nWrite a function to check whether n is divisible by 17 and 23.\ndef is_divisible(n):\n  if (n%17==0 and n%23==0): \n    return \"valid\"\n  else: \n    return \"invalid\" \n\n\nWrite a python function to find the power of n to the power of k.\ndef power_to_power(n,k):\n  if k==0:\n    return 1\n  else:\n    return n*power_to_power(n,k-1)\n\n\nWrite a python function to find all the numbers divisible by 17 and 23 from 1 to 100.\n\ndef divisors",
        "\n\n\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\n\n\nWrite a function to check whether the given string starts and ends with the same character or not.\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \n\n\nWrite a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\n\n\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\n\n\nWrite a python function to find the volume of a triangular prism.\n 1. Find the length of the longest side of the prism.\n 2. Determine the number of sides.\n 3. Calculate the volume of the prism.\n\nWrite a function to find the area of a triangle.\n\nWrite a python function to find the area of a 12-sided triangle.\n\ndef area_of_triangle(s): \n  return s/2.0\n\n\nWrite a function to find the area of a 24-sided triangle.\n\ndef area_of_triangle_24(s): \n  return s/2.0\n\n\nWrite a python function to calculate the volume of a 24-sided triangle.\n\ndef volume_of_triangle_24(s): \n  return s/2.0\n\n\nWrite a python function to find the area of a regular equilateral triangle.\n\ndef area_of_rectangle(s): \n  return s",
        "\n\n\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\n\n\nWrite a function to check whether the given string starts and ends with the same character or not.\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \n\n\nWrite a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\n\n\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\n\n\nWrite a python function to find the volume of a triangular prism.\n #############################################################################\n# Problem 4\n#\n# The four adjacent digits in the 1000-digit number that have the greatest product are 9 \u00d7 9 \u00d7 8 \u00d7 9 = 5832.\n# Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?\n# #############################################################################\n\ndef get_product(num):\n\tm, n, p = 0, 0, 1\n\tfor i in range(13):\n\t\tm, n, p = m+num[i]*p, n+num[i]*p, p*num[i]\n\treturn p\n\ndef get_max_product(num):\n\tmax_prod = 0\n\tfor p in range(11):\n\t\tmax_prod = max(max_",
        "\n\n\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\n\n\nWrite a function to check whether the given string starts and ends with the same character or not.\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \n\n\nWrite a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\n\n\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\n\n\nWrite a python function to find the volume of a triangular prism.\n \u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba\u25ba",
        "\n\n\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\n\n\nWrite a function to check whether the given string starts and ends with the same character or not.\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \n\n\nWrite a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\n\n\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\n\n\nWrite a python function to find the volume of a triangular prism.\n \uf0b7x\uf0b7y\uf0b7z\uf0b7 represents the coordinates of a triangle prism.\n \uf0b7x = (x1 + x2 + x3) / 3\n \uf0b7y = (y1 + y2 + y3) / 3\n \uf0b7z = (z1 + z2 + z3) / 3\n \uf0b7The volume of a triangle prism is the product of the lengths of the sides.\n\"\"\"\n\nimport math\ndef get_volume(x,y,z):\n\treturn math.sqrt(x*x + y*y + z*z)\n\ndef get_volume_2(x1,y1,z1,x2,y2,z2,x3,y3,z3):\n\treturn math.sqrt(x1*x1 + y1*y1 + z1"
      ]
    },
    {
      "input": "\n\n\nWrite a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\n\n\nWrite a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n    if len(colors)!= len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset)!= len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i]!= values[i+1]:\n                return False\n\n    return True\n\n\nWrite a function to flatten a list and sum all of its elements.\ndef recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\n\n\nWrite a function to count the number of occurrences of a number in a given list.\ndef frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \n\n\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n ",
      "output": [
        "\n\n\nWrite a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\n\n\nWrite a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n    if len(colors)!= len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset)!= len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i]!= values[i+1]:\n                return False\n\n    return True\n\n\nWrite a function to flatten a list and sum all of its elements.\ndef recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\n\n\nWrite a function to count the number of occurrences of a number in a given list.\ndef frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \n\n\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n \ndef is_special(s):\n    if len(s) % 2 == 0:\n        return False\n\n    c = 2\n    while c < len(s):\n        if s[c] == '_' and s[c - 1]!= '_':\n            return False\n        c += 1\n    return True\n\n\nWrite a function to convert a string of alphabets into a string of numbers.\ndef word_to_numbers(s):\n    numbers = ''\n    for i in range(len(s)):\n        if s[i] in string.digits:\n            numbers += s[i]\n        else:\n            numbers += '0'\n    return numbers\n\n\nWrite a function to convert a string to a string of alphabets.\ndef numbers_to_word(a):\n    if len(a) < 1:\n        return ''\n\n    if a[0] == '0':\n        return numbers_to_word(a[",
        "\n\n\nWrite a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\n\n\nWrite a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n    if len(colors)!= len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset)!= len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i]!= values[i+1]:\n                return False\n\n    return True\n\n\nWrite a function to flatten a list and sum all of its elements.\ndef recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\n\n\nWrite a function to count the number of occurrences of a number in a given list.\ndef frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \n\n\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n \ndef lowercase_join(text):\n    if text.count('_') > 0 and text.count('_') < len(text):\n        return True\n    return False\n\n\nWrite a function to count the number of occurrences of a word in a given sentence.\ndef word_count(sentence, word):\n    word_count = 0\n    for words in sentence.split(' '):\n        if word == words: \n            word_count += 1\n    return word_count\n\n\nWrite a function that takes a string and returns the reverse of the string. For example, if the input string is \"hello\", the function should retun \"olleh\".\ndef reverse(str):\n    return str[::-1]\n\n\nWrite a function to get the sum of the absolute difference between two numbers. \ndef abs_diff(num1, num2):\n    return abs(num1 - num2)\n\n\nWrite a function to check if a string has all the characters",
        "\n\n\nWrite a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\n\n\nWrite a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n    if len(colors)!= len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset)!= len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i]!= values[i+1]:\n                return False\n\n    return True\n\n\nWrite a function to flatten a list and sum all of its elements.\ndef recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\n\n\nWrite a function to count the number of occurrences of a number in a given list.\ndef frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \n\n\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n \ndef is_valid_name(name):\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in name:\n        if i in letters: count += 1\n    if count % 2 == 0: return True\n    return False\n\n\nWrite a function to check whether it is possible to assign a particular character to a character sequence in a string.\ndef is_palindrome(s):\n    left = 0\n    right = len(s) - 1\n    \n    while left < right:\n        if s[left]!= s[right]: return False\n        left += 1\n        right -= 1\n    return True\n",
        "\n\n\nWrite a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\n\n\nWrite a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n    if len(colors)!= len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset)!= len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i]!= values[i+1]:\n                return False\n\n    return True\n\n\nWrite a function to flatten a list and sum all of its elements.\ndef recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\n\n\nWrite a function to count the number of occurrences of a number in a given list.\ndef frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \n\n\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n ##########\n\nWrite a function that returns the longest string in a list.\ndef long_str(a):\n    if not len(a): return \"\"\n    if len(a) == 1: return a[0]\n    if len(a) == 2: return max(a[0], a[1])\n    if len(a) == 3: \n        return max(a[0], max(a[1], a[2]))\n\n    a.sort()\n    return a[-1]\n\n\nWrite a function that returns the longest substring in a given string.\ndef longest_substring(s):\n    if not len(s): return \"\"\n    if len(s) == 1: return s\n    if len(s) == 2: return max(s[0], s[1])\n\n    s.sort(reverse=True)\n    return s[0]\n\nWrite a function that returns the maximum number of consecutive ",
        "\n\n\nWrite a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\n\n\nWrite a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n    if len(colors)!= len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset)!= len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i]!= values[i+1]:\n                return False\n\n    return True\n\n\nWrite a function to flatten a list and sum all of its elements.\ndef recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\n\n\nWrite a function to count the number of occurrences of a number in a given list.\ndef frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \n\n\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n ##################################################################################\ndef is_lower_joined(string):\n\tcount = 0\n\tfor i in string:\n\t\tif i >= 'a' and i <= 'z':\n\t\t\tcount += 1\n\treturn count == len(string) and string.count('_') == 1 and string.count('_') == string.count('z')\n\n##################################################################################\nWrite a function to print the number of permutations of a given string.\ndef permutations(str):\n\tif len(str) == 1:\n\t\tprint(str)\n\t\treturn\n\n\tfor i in range(len(str)):\n\t\tpermutations(str[:i] + str[i+1:])\n\n\nWrite a function to check whether a given string is a palindrome.\ndef is_palindrome(str):\n    return str == str[::-1]\n\n\nWrite a function to reverse a given string.\ndef reverse(str):\n    return list(reversed"
      ]
    },
    {
      "input": "\n\n\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nfrom array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\n\n\nWrite a function to find the volume of a cone.\nimport math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\n\n\nWrite a function to flatten a list and sum all of its elements.\ndef recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\n\n\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\ndef count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \n\n\nWrite a function that returns the perimeter of a square given its side length as input.\n ",
      "output": [
        "\n\n\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nfrom array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\n\n\nWrite a function to find the volume of a cone.\nimport math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\n\n\nWrite a function to flatten a list and sum all of its elements.\ndef recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\n\n\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\ndef count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \n\n\nWrite a function that returns the perimeter of a square given its side length as input.\n \u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5e73\u65b9\u662f\u6b63\u65b9\u5f62\uff0c\u4e0d\u662f\u6b63\u65b9\u5f62\u7684\u5e73\u65b9\uff0c\u800c\u662f\u5e73\u65b9\u7684\u56db\u5206\u4e4b\u4e00\u3002\ndef perimeter_of_square(size):\n  side = size\n  perimeter = side * ( side + side)\n  return perimeter\n\n\nwrite a function to find the area of a triangular.\ndef area_tri(base, height):\n  perimeter = (base * height) / 2\n  area = math.sqrt(perimeter * (perimeter - base) * (perimeter - height) * (perimeter + height) * (perimeter + base))\n  return area\n\n\nWrite a function to find the volume of a pyramid.\nimport math\ndef volume_pyramid(base, height):\n  volume = (base * height) / 2\n  volume = math.sqrt(volume)\n  return volume\n\n\nWrite a function that returns the length of the longest common subsequence",
        "\n\n\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nfrom array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\n\n\nWrite a function to find the volume of a cone.\nimport math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\n\n\nWrite a function to flatten a list and sum all of its elements.\ndef recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\n\n\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\ndef count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \n\n\nWrite a function that returns the perimeter of a square given its side length as input.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef perimeter_square(side):\n\treturn 4 * side\n\nWrite a function that returns the area of a rectangle given its length and breadth as input.\ndef area_rectangle(length,breadth):\n\treturn length * breadth\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWrite a function that returns the length of the longest side of a triangle given the side lengths of the three sides.\ndef longest_side(a,b,c):\n  if a > b and a > c:\n    return a\n  elif b > a and b > c:\n    return b\n  elif c > a and c > b:\n    return c\n  else:\n    return -1\n\nWrite a function that returns the area of a triangle given the side lengths of its three sides.\ndef area_triangle(a,b,c):\n  if a > b + c and a > b and a > c:\n   ",
        "\n\n\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nfrom array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\n\n\nWrite a function to find the volume of a cone.\nimport math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\n\n\nWrite a function to flatten a list and sum all of its elements.\ndef recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\n\n\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\ndef count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \n\n\nWrite a function that returns the perimeter of a square given its side length as input.\n perimeter = side length ** 2\ndef square_perimeter(side_length):\n  perimeter = side_length ** 2\n  return perimeter\n\nWrite a function that returns the area of a triangle given its base and height as input.\narea = (base * height) / 2\ndef triangle_area(base, height):\n  area = (base * height) / 2\n  return area\n\n\nWrite a function that returns the area of a circle given its radius as input.\narea = radius ** 2 * math.pi\ndef circle_area(radius):\n  area = radius ** 2 * math.pi\n  return area\n\n\nWrite a function that returns the circumference of a circle given its radius as input.\ncircumference = (2 * math.pi) * radius\ndef circle_circumference(radius):\n  circumference = (2 * math.pi) * radius\n  return circumference\n\n",
        "\n\n\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nfrom array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\n\n\nWrite a function to find the volume of a cone.\nimport math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\n\n\nWrite a function to flatten a list and sum all of its elements.\ndef recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\n\n\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\ndef count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \n\n\nWrite a function that returns the perimeter of a square given its side length as input.\n \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551         P.S.                                 \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\ndef square_perimeter(length):\n\treturn (4 * length**2)\n\n\nWrite a function that returns a tuple containing the length and the area of a triangle given its base and height as input.\n\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551   P.S.   |   Note: area is in square-inches!    \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\ndef triangle_area(base, height):\n\treturn ((base**2) * (height**2))\n\n\nWrite a function that returns the area of a circle given its radius as input.\n\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551   P.S.   |   Note: area is in square-inches!    \u2551\n\u255a",
        "\n\n\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nfrom array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\n\n\nWrite a function to find the volume of a cone.\nimport math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\n\n\nWrite a function to flatten a list and sum all of its elements.\ndef recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\n\n\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\ndef count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \n\n\nWrite a function that returns the perimeter of a square given its side length as input.\n ###############################################################################################\ndef perimeter_square(side_length):\n  perimeter = side_length*4\n  return perimeter\n\n\nWrite a function to return the area (round to two decimals) of a triangle given its side lengths.\ndef area_triangle(side_length, side_length2):\n  area = (side_length*side_length)/2\n  return round(area,2)\n\n\n\nWrite a function that returns the surface area of a triangle given its perimeter and base.\ndef surface_triangle(perimeter, base):\n  surface = (perimeter*base)/2\n  return surface\n\nWrite a function that returns the volume of a cylinder given its height and radius.\ndef volume_cylinder(height, radius):\n  volume = (math.pi)*(radius**2)*height\n  return volume\n\nWrite a function that returns the surface area of a cylinder given its height and radius.\ndef surface_cylinder(height,"
      ]
    },
    {
      "input": "\n\n\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\n\n\nWrite a function to count the number of occurrences of a number in a given list.\ndef frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \n\n\nWrite a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple)!= k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\n\n\nWrite a function to determine if the sum of the divisors of two integers are the same.\nimport math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \n\n\nWrite a function to remove characters from the first string which are present in the second string.\n ",
      "output": [
        "\n\n\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\n\n\nWrite a function to count the number of occurrences of a number in a given list.\ndef frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \n\n\nWrite a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple)!= k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\n\n\nWrite a function to determine if the sum of the divisors of two integers are the same.\nimport math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \n\n\nWrite a function to remove characters from the first string which are present in the second string.\n #################################################################################\ndef remove_from_string(a, b): \n    return a.replace(b,\"\") \n\n\nWrite a function that takes a string and returns the number of vowels in the string.\ndef count_vowels(s): \n    return sum([1 if c in \"aeiou\" else 0 for c in s])\n\n\nWrite a function that takes two non-negative integers and returns True if the sum is evenly divisible by both of the numbers.\ndef is_divisible(a, b): \n    return a % 2 == 0 and b % 2 == 0 or a % 2!= 0 and b % 2!= 0 and a + b % 2 == 0\n\n\nWrite a function to find the nth prime number.\ndef get_nth_prime(n): \n    prime = [2,3,5,7,11,13,17,19,",
        "\n\n\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\n\n\nWrite a function to count the number of occurrences of a number in a given list.\ndef frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \n\n\nWrite a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple)!= k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\n\n\nWrite a function to determine if the sum of the divisors of two integers are the same.\nimport math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \n\n\nWrite a function to remove characters from the first string which are present in the second string.\n ##############################################################################################\n\nWrite a function to find the longest common substring of two strings.\ndef longest_common_substring(a,b):\n  i,j = 0,0\n  n = len(a)\n  m = len(b)\n  s = \"\"\n  while i < n and j < m:\n    if a[i] == b[j]:\n      s += a[i]\n      i += 1\n      j += 1\n    elif j < m and i < n and a[i]!= b[j]:\n      j += 1\n    else:\n      i += 1\n\n  return s\n\ndef longest_common_substring_v1(a,b):\n  i,j = 0,0\n  n = len(a)\n  m = len(b)\n  if n > m:\n    a,b = b,a\n\n  while i < n and j < m:\n    if a[i] == b",
        "\n\n\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\n\n\nWrite a function to count the number of occurrences of a number in a given list.\ndef frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \n\n\nWrite a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple)!= k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\n\n\nWrite a function to determine if the sum of the divisors of two integers are the same.\nimport math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \n\n\nWrite a function to remove characters from the first string which are present in the second string.\n ########\n# Note: It is not possible to use the built-in \"in\" operator to check if a character is present in a string.\ndef remove_characters(a,b): \n    return a.replace(b,\"\") \n\n\nWrite a function to find the number of times an element is repeated in a list.\ndef get_repeat_count(a, x): \n    return a.count(x)\n\n\nWrite a function to return a sorted list from a given list.\ndef get_sorted_list(a): \n    return sorted(a)\n\n\nWrite a function to return a list of all the unique elements in a given list.\ndef get_unique_list(a): \n    return list(set(a))\n\n\nWrite a function which returns the number of occurrences of a string in a list.\ndef get_string_count(a, s): \n    return a.count(s)\n\n\nWrite a function to",
        "\n\n\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\n\n\nWrite a function to count the number of occurrences of a number in a given list.\ndef frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \n\n\nWrite a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple)!= k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\n\n\nWrite a function to determine if the sum of the divisors of two integers are the same.\nimport math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \n\n\nWrite a function to remove characters from the first string which are present in the second string.\n ################################################################################\n\n# Time complexity -- O(N)\n# Space complexity -- O(1)\n\ndef remove_substr(str1, str2):\n\tstr1 = str1.lower()\n\tstr2 = str2.lower()\n\tfor i in range(len(str2)):\n\t\tif str2[i] in str1:\n\t\t\tstr1 = str1.replace(str2[i], \"\")\n\treturn str1\n\n\ndef remove_substr2(str1, str2):\n\tstr1 = str1.lower()\n\tstr2 = str2.lower()\n\ti = 0\n\tfor letter in str2:\n\t\twhile i < len(str1) and str1[i]!= letter:\n\t\t\ti += 1\n\t\tif i < len(str1) and str1[i] == letter:\n\t\t\tstr1 = str1[:i]",
        "\n\n\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\n\n\nWrite a function to count the number of occurrences of a number in a given list.\ndef frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \n\n\nWrite a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple)!= k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\n\n\nWrite a function to determine if the sum of the divisors of two integers are the same.\nimport math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \n\n\nWrite a function to remove characters from the first string which are present in the second string.\n ############################################################################################\n\nWrite a function to remove characters from a string while maintaining their order.\n\ndef remove_order(s1, s2): \n  res = []\n  for i in s2:\n    if i not in s1:\n      res.append(i)\n  return \"\".join(res)\n\nWrite a function to remove characters from a string.\ndef remove_chars(s, chars): \n  res = []\n  for i in s:\n    if i not in chars:\n      res.append(i)\n  return \"\".join(res)\n\n\nWrite a function to remove all characters from a string of all lowercase letters.\ndef remove_lower(s): \n  return \"\".join(c for c in s if c.islower()) \n\nWrite a function to remove all characters from a string of all uppercase letters.\ndef remove_upper(s): \n  return \"\".join(c for c in s if c.isupper())"
      ]
    },
    {
      "input": "\n\n\nWrite a function to check whether the given string starts and ends with the same character or not.\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \n\n\nWrite a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \n\n\nWrite a python function to find the length of the smallest list in a list of lists.\ndef Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \n\n\nWrite a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n  area=l*b\n  return area\n\n\nWrite a function to find whether a given array of integers contains any duplicate element.\n ",
      "output": [
        "\n\n\nWrite a function to check whether the given string starts and ends with the same character or not.\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \n\n\nWrite a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \n\n\nWrite a python function to find the length of the smallest list in a list of lists.\ndef Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \n\n\nWrite a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n  area=l*b\n  return area\n\n\nWrite a function to find whether a given array of integers contains any duplicate element.\n \ndef Check_for_Duplicate(lst):  \n  if len(lst) > 0:  \n    for i in range(len(lst)):  \n      for j in range(i+1,len(lst)):  \n        if lst[i]==lst[j]:  \n            return True  \n  return False\n\n\nWrite a python function to sort a given list of strings in ascending order.\ndef sort_strings_Ascending(lst):  \n  for i in range(len(lst)):  \n    for j in range(i+1,len(lst)):  \n      if lst[i]>lst[j]:  \n        temp=lst[i]\n        lst[i]=lst[j]\n        lst[j]=temp\n  return lst\n\n\nWrite a python function to sort a given list of strings in descending order.\ndef sort_strings_Descending(lst):  \n  for i in range(len(lst)):  \n    for j in range(i+1,len(lst)):  \n      if",
        "\n\n\nWrite a function to check whether the given string starts and ends with the same character or not.\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \n\n\nWrite a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \n\n\nWrite a python function to find the length of the smallest list in a list of lists.\ndef Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \n\n\nWrite a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n  area=l*b\n  return area\n\n\nWrite a function to find whether a given array of integers contains any duplicate element.\n \nimport collections\ndef contains_duplicates(arr):\n  return True if len(set(arr)) == len(arr) else False \n\n\nWrite a function to find the number of elements of a given array that are unique.\ndef unique_count(arr):\n  return len(arr) - len(set(arr)) \n\n\nWrite a function to remove duplicates from a given array.\ndef remove_duplicates(arr):\n  arr = list(set(arr))\n  return arr \n\n\nWrite a function to print all possible permutations of a given array.\ndef permutations(arr): \n    res=list()\n    perm(arr,res) \n    return res \n\n\nWrite a function to find the number of occurrences of a given character in a given array.\ndef character_count(arr,ch): \n  count=0 \n  for i in range(len(arr)): \n      if(arr[i]==ch): \n          count+=1 \n  return count \n\n\nWrite",
        "\n\n\nWrite a function to check whether the given string starts and ends with the same character or not.\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \n\n\nWrite a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \n\n\nWrite a python function to find the length of the smallest list in a list of lists.\ndef Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \n\n\nWrite a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n  area=l*b\n  return area\n\n\nWrite a function to find whether a given array of integers contains any duplicate element.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef duplicate_check(list):\n    #Your code here\n    list.sort()\n    for i in range(len(list)-1):\n        if(list[i]==list[i+1]):\n            return True\n    return False\n\nWrite a function to find the largest element in a list.\ndef find_max(list):\n    max_val = -100000\n    for i in range(len(list)):\n        if(list[i]>max_val):\n            max_val=list[i]\n\n    return max_val\n\nWrite a python function to count the number of times each element appears in the given list.\ndef count_unique(list):\n    #Your Code Here\n    unique = {}\n    for i in list:\n        if(i not in unique):\n            unique[i]=1\n        else:\n            unique[i]=unique[i]+1\n    return unique\n\nWrite a",
        "\n\n\nWrite a function to check whether the given string starts and ends with the same character or not.\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \n\n\nWrite a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \n\n\nWrite a python function to find the length of the smallest list in a list of lists.\ndef Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \n\n\nWrite a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n  area=l*b\n  return area\n\n\nWrite a function to find whether a given array of integers contains any duplicate element.\n \ndef find_duplicate(lst): \n  for i in range(len(lst)): \n    for j in range(i+1,len(lst)): \n      if(lst[i]==lst[j]): \n        return True \n# Write a function to sort a list of numbers in ascending order.\ndef sort_list(lst): \n  lst.sort() \n  return lst \n\n\nWrite a python program to find the smallest number in a given list and its position in the given list.\nimport random\ndef find_smallest_in_list(lst): \n  lst.sort() \n  for i in range(len(lst)): \n    if(lst[i]==lst[i-1]):\n      print(\"The smallest number in the list is\",lst[i])\n      return i \n    else: \n      continue \n# Write a function to convert a given list of lists to a nested list.\ndef list_to_nested_list(lst): \n  new_",
        "\n\n\nWrite a function to check whether the given string starts and ends with the same character or not.\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \n\n\nWrite a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \n\n\nWrite a python function to find the length of the smallest list in a list of lists.\ndef Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \n\n\nWrite a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n  area=l*b\n  return area\n\n\nWrite a function to find whether a given array of integers contains any duplicate element.\n \ndef has_dup(arr):  \n    for i in range(len(arr)):  \n        for j in range(i+1,len(arr)):  \n            if(arr[i]==arr[j]):  \n                return True\n    return False\n\n\nWrite a python function to sum the array of integers.\ndef sum_ar(ar):\n    result = 0\n    for i in ar:\n        result += i\n    return result\n\nWrite a python function to find the sum of array of integers and subtract the sum of array of integers from another given array of integers.\ndef sub_ar(ar,ar2):\n    result=0\n    for i in range(len(ar)):\n        result+=ar[i]\n    for i in range(len(ar2)):\n        result-=ar2[i]\n    return result\n\nWrite a python function to find the sum of array of integers and multiply them by another given array of integers.\ndef mul_ar"
      ]
    },
    {
      "input": "\n\n\nWrite a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\n\n\nWrite a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \n\n\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\n\n\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \n\n\nWrite a function to check if the given number is woodball or not.\n ",
      "output": [
        "\n\n\nWrite a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\n\n\nWrite a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \n\n\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\n\n\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \n\n\nWrite a function to check if the given number is woodball or not.\n \ud83d\udca1\ndef is_woodball(num):\n  if num == 1:\n    return True\n  return False\n\nWrite a function to return the sum of square of all numbers in the given list.\ndef square_numbers(nums):\n  result = []\n  for i in nums:\n    result.append(i ** 2)\n  return sum(result)\n\nWrite a function to return the product of all numbers in the given list.\ndef product_of_numbers(nums):\n   result = []\n   for i in nums:\n     result.append(i * i)\n   return sum(result)\n\nWrite a function that checks whether the given number is a prime number or not.\ndef is_prime(num):\n  if num == 1:\n    return False\n  elif num == 2:\n    return True\n  for i in range(2, num):\n    if num % i == 0:\n      return False\n  return True",
        "\n\n\nWrite a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\n\n\nWrite a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \n\n\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\n\n\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \n\n\nWrite a function to check if the given number is woodball or not.\n.............\ndef is_woodball(test_num):\n  if test_num == 1 or test_num == 2 or test_num == 3:\n    return True\n  return False\n\n\nWrite a function to sort the elements of a given list using bubble sort.\ndef bubble_sort(test_list):\n  for i in range(len(test_list)):\n    for j in range(len(test_list) - 1):\n      if test_list[j] > test_list[j + 1]:\n        test_list[j], test_list[j + 1] = test_list[j + 1], test_list[j]\n  return test_list\n\n\nWrite a function to check if the given number is palindrome or not.\ndef palindrome(num):\n  if num == reverse_num:\n    return True\n  return False\n\nWrite a function to find the kth",
        "\n\n\nWrite a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\n\n\nWrite a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \n\n\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\n\n\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \n\n\nWrite a function to check if the given number is woodball or not.\n Equality of two numbers is a number in the range [1,10]\ndef check_woodball(num):\n  return bool(num in range(1,11))\n\n\nWrite a function to check if the given number is anagram or not.\nEquality of two numbers is a number in the range [1,100]\ndef check_anagram(n):\n  return bool(n in range(1,100))\n\n\nWrite a function to check if the given number is palindrome or not.\nEquality of two numbers is a number in the range [1,10]\ndef check_palindrome(n):\n  return bool(n in range(1,10))\n\n\nWrite a function to check if the given string is palindrome or not.\nEquality of two strings are same.\ndef check_palindrome(s):\n  return s == s[::-1]\n\n\nWrite a function to",
        "\n\n\nWrite a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\n\n\nWrite a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \n\n\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\n\n\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \n\n\nWrite a function to check if the given number is woodball or not.\n ########\ndef is_woodball(num):\n  return num > 3 and num < 20 \n\n\nWrite a function to check if the given number is prime or not.\ndef is_prime(n):\n  for i in range(2, n):\n    if n % i == 0:\n      return False\n  return True\n###########\n\ndef get_primes(num):\n  for i in range(2, num):\n    if is_prime(i):\n      yield i\n\ndef get_primes_below_n(n):\n  for i in range(2, n):\n    if is_prime(i):\n      yield i\n\ndef get_primes_below_n_as_set(n):\n  return set(get_primes_below_n(n))\n\ndef get_primes_below_n_as_list(n):\n  return [i for i in get_primes_below_n(",
        "\n\n\nWrite a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\n\n\nWrite a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \n\n\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\n\n\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \n\n\nWrite a function to check if the given number is woodball or not.\n Idx 1: If number is woodball return 'Woodball'.\n  Idx 2: Else return 'Not Woodball'.\n\n\nWrite a function to check if a given number is a perfect number or not.\ndef is_perfect(num):\n  if num%10==0 and num > 1:\n    return True\n  return False\n\n\nWrite a function to check if a given number is a palindrome or not.\ndef is_palindrome(num):\n  return num == int_to_palindrome(num)\n\n\nWrite a function to check if the given number is a multiple of 2 or not.\ndef is_even(num):\n  if num%2 == 0:\n    return True\n  return False\n\n\nWrite a function to find the number of trailing zeros in an integer.\ndef trailing_zeros(num):\n  count = 0\n  while num:\n    if num > 0:\n      num"
      ]
    },
    {
      "input": "\n\n\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\ndef list_split(S, step):\n    return [S[i::step] for i in range(step)]\n\n\nWrite a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \n\n\nWrite a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \n\n\nWrite a python function to count the number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \n\n\nWrite a python function to check if a given number is one less than twice its reverse.\n ",
      "output": [
        "\n\n\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\ndef list_split(S, step):\n    return [S[i::step] for i in range(step)]\n\n\nWrite a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \n\n\nWrite a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \n\n\nWrite a python function to count the number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \n\n\nWrite a python function to check if a given number is one less than twice its reverse.\n \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \n\nWrite a python function to check if a given number is 13. \ndef check(n):    \n    return n == 13  \n\nWrite a python function to check if a given number is a multiple of 3. \ndef check(n):    \n    return n % 3 == 0  \n\nWrite a python function to check if a given number is a multiple of 5. \ndef check(n):    \n    return n % 5 == 0  \n\nWrite a python function to check if a given number is a multiple of 7. \ndef check(n):    \n    return n % 7 == 0  \n\nWrite a python function to check if a given number is a multiple of 9. \ndef check(n):    \n    return n % 9 == 0  \n\nWrite a python function to check",
        "\n\n\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\ndef list_split(S, step):\n    return [S[i::step] for i in range(step)]\n\n\nWrite a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \n\n\nWrite a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \n\n\nWrite a python function to count the number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \n\n\nWrite a python function to check if a given number is one less than twice its reverse.\n  def check_rev(n):  \n  rev = 0\n  while (n > 0):  \n    rev = (rev * 10 + n % 10) \n    n = n // 10\n  return (rev == n + 1)\ndef check_two(n):\n  rev = 0\n  while (n > 0):  \n    rev = (rev * 10 + n % 10) \n    n = n // 10\n  return (rev == n + 2)\n\nWrite a function to determine if a given number is divisible by 3.\ndef div_three(num):\n  return num % 3 == 0\n\nWrite a function to find the first 2 items of a given list.\ndef first2(lst):\n\treturn lst[0:2]\n\nWrite a python function to multiply each element of a list by itself.\ndef mult_list(lst):",
        "\n\n\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\ndef list_split(S, step):\n    return [S[i::step] for i in range(step)]\n\n\nWrite a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \n\n\nWrite a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \n\n\nWrite a python function to count the number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \n\n\nWrite a python function to check if a given number is one less than twice its reverse.\n ########\n# PROBLEM 2\n# Write a python function that takes in a string and returns the number of times certain letters are repeated.\ndef count_occurances(string, letter):\n    count = 0\n    for char in string:\n        if char == letter:\n            count += 1\n    return count\n\n\nWrite a python function that takes in a list a and returns the number of times any two elements share the same value in the list. \ndef two_values_in_a_list(a):\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] == a[j]:\n                count += 1\n    return count\n\n\nWrite a python function that takes in a list a and returns the number of times any two elements share the same value in the list.\ndef two_values_in_a_list(a",
        "\n\n\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\ndef list_split(S, step):\n    return [S[i::step] for i in range(step)]\n\n\nWrite a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \n\n\nWrite a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \n\n\nWrite a python function to count the number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \n\n\nWrite a python function to check if a given number is one less than twice its reverse.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \n\n\nWrite a python function to count the number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \n\nWrite a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num %",
        "\n\n\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\ndef list_split(S, step):\n    return [S[i::step] for i in range(step)]\n\n\nWrite a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \n\n\nWrite a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \n\n\nWrite a python function to count the number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \n\n\nWrite a python function to check if a given number is one less than twice its reverse.\n \ndef rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \n\"\"\"\n\n\n\ndef get_substrings(str, n):\n    \"\"\"\n    >>> get_substrings('aaa', 3)\n    ['aaa', 'aa', 'a']\n    >>> get_substrings('aab', 3)\n    ['aab', 'ab', 'a']\n    >>> get_substrings('aba', 3)\n    ['aba', 'ab', 'a']\n    >>> get_substrings('aaba', 3)\n    ['aaba', 'ab', 'a']\n    >>> get_substrings('aaa', 4)\n    ['aaa']\n   "
      ]
    },
    {
      "input": "\n\n\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfrom operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \n\n\nWrite a function to convert a given tuple of positive integers into a single integer.\ndef tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\n\n\nWrite a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\n\n\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\n\n\nWrite a python function to find the largest number that can be formed with the given list of digits.\n ",
      "output": [
        "\n\n\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfrom operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \n\n\nWrite a function to convert a given tuple of positive integers into a single integer.\ndef tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\n\n\nWrite a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\n\n\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\n\n\nWrite a python function to find the largest number that can be formed with the given list of digits.\n ########\ndef largest_digit(test_list):\n    largest = 0\n    for num in test_list:\n        largest = max(largest, num)\n    return largest\n\n\nWrite a python function that takes in a string and returns True if it is paranthesis-free.\ndef is_paranthesis(test_string):\n    if (len(test_string) == 0):\n        return True\n    for char in test_string:\n        if char!= ')':\n            return False\n    return True\n\n\nWrite a python function that takes in a string and returns True if it is a valid python identifier.\ndef is_valid_identifier(test_string):\n    if (len(test_string) == 0):\n        return True\n    for char in test_string:\n        if (not char.isalnum() or char in ['_', '-']):\n            return False\n    return True\n\n\nWrite a python function that takes in a string and",
        "\n\n\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfrom operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \n\n\nWrite a function to convert a given tuple of positive integers into a single integer.\ndef tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\n\n\nWrite a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\n\n\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\n\n\nWrite a python function to find the largest number that can be formed with the given list of digits.\n #############################################################################\ndef largest_number(digits):\n    max_num = max(digits)\n    for i in range(len(digits)):\n        digits[i] = digits[i] - max_num\n    return digits[0]\n\n\nWrite a python function to calculate the product of the first n terms in a fibonacci series of the form f(n) = f(n-1) + f(n-2).\ndef fibonacci_product(num):\n    a = 0\n    b = 1\n    for i in range(num):\n        c = a + b\n        a = b\n        b = c\n    return(b)\n\n\ndef fibonacci_product(num):\n    a = 0\n    b = 1\n    for i in range(num):\n        c = a + b\n        a = b\n        b = c\n    return(b)\n\n\ndef fibonacci_product(num):\n    a = 0\n    b",
        "\n\n\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfrom operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \n\n\nWrite a function to convert a given tuple of positive integers into a single integer.\ndef tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\n\n\nWrite a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\n\n\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\n\n\nWrite a python function to find the largest number that can be formed with the given list of digits.\n ################################################################################\n\nWrite a python function that takes a string and returns the sum of the first 4 digits (excluding the first digit).\n\ndef sum_digits(nums):\n    return int(''.join(map(str,nums[0:4])))\n\n\nWrite a python function that takes a string and returns the sum of the first 4 digits (excluding the first digit)\nthen the last digit\n\ndef sum_digits_last_digit(nums):\n    return int(''.join(map(str,nums[0:4]))) + int(''.join(map(str,nums[4:8])))\n\n\nWrite a python function to print the sum of the first 4 digits of a given string.\n\ndef sum_digits_print(nums):\n    print(sum_digits(nums))\n\n\nWrite a python function that takes a string and returns the sum of the first 4 digits (excluding the first digit) and the last",
        "\n\n\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfrom operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \n\n\nWrite a function to convert a given tuple of positive integers into a single integer.\ndef tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\n\n\nWrite a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\n\n\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\n\n\nWrite a python function to find the largest number that can be formed with the given list of digits.\n ################################################################################\n def find_largest(digits):\n        max_digit = 0\n        for digit in digits:\n            if max_digit < digit:\n                max_digit = digit\n        return max_digit\n\n\nWrite a python function to get the product of a list of integers.\ndef get_product(nums):\n    if not nums:\n        return 1\n    product = nums[0]\n    for num in nums[1:]:\n        product *= num\n    return product\n\n\nWrite a python function to find the largest prime factor of a given number.\ndef largest_prime_factor(num):\n    if num == 1:\n        return 1\n    is_prime = True\n    for i in range(2,int(math.sqrt(num))+1):\n        if (num % i) == 0:\n            is_prime = False\n            break\n    if is_prime:\n        return i\n    else:\n        return largest_prime_factor(num // i",
        "\n\n\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfrom operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \n\n\nWrite a function to convert a given tuple of positive integers into a single integer.\ndef tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\n\n\nWrite a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\n\n\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\n\n\nWrite a python function to find the largest number that can be formed with the given list of digits.\n 1000000000\ndef largest_digit(digits):\n    if len(digits) == 0:\n        return 0\n    max = 0\n    for num in range(len(digits)):\n        max = max + int(digits[num])\n    return max\n\n\nWrite a python function to find the smallest number that can be formed with the given list of digits.\n1000000000\ndef smallest_digit(digits):\n    if len(digits) == 0:\n        return 0\n    min = 1000000000\n    for num in range(len(digits)):\n        min = min - int(digits[num])\n    return min\n\n\nWrite a python function that takes a non-negative integer and returns its binary representation.\ndef bin_rep(n):\n    return bin(n)[2:]\n\n\nWrite a python function that takes a non-"
      ]
    },
    {
      "input": "\n\n\nWrite a python function to convert the given string to lower case.\ndef is_lower(string):\n  return (string.lower())\n\n\nWrite a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\n\n\nWrite a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\n\n\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nimport heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\n\n\nWrite a python function to check whether the given two integers have opposite sign or not.\n ",
      "output": [
        "\n\n\nWrite a python function to convert the given string to lower case.\ndef is_lower(string):\n  return (string.lower())\n\n\nWrite a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\n\n\nWrite a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\n\n\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nimport heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\n\n\nWrite a python function to check whether the given two integers have opposite sign or not.\n ~~~~~\ndef oppSign(a,b):\n\tif a<0 and b>0:\n\t\treturn True\n\telif a>0 and b<0:\n\t\treturn True\n\telse:\n\t\treturn False\n\nWrite a python function to calculate the sum of the two given integers.\ndef sum2(a,b):\n\treturn a+b\n\n\nWrite a python function to check whether the given integer is a perfect square or not.\ndef is_square(n):\n\tif n == 0:\n\t\treturn False\n\telif n == 1:\n\t\treturn True\n\telse:\n\t\tif n % 4 == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\nWrite a python function to find the first n prime numbers in a given list.\ndef prime_list(n):\n    prime = []\n    for i in range(2,n):\n        j",
        "\n\n\nWrite a python function to convert the given string to lower case.\ndef is_lower(string):\n  return (string.lower())\n\n\nWrite a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\n\n\nWrite a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\n\n\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nimport heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\n\n\nWrite a python function to check whether the given two integers have opposite sign or not.\n ########## Example ##########\nif i==0:\n\tif j==0:\n\t\treturn True\n\treturn False\n########## Example ##########\nif i==0:\n\tif j==0:\n\t\treturn False\n\treturn True\n\n\nWrite a python function to check whether the given integer 'i' is divisible by 2.\ndef is_divisible_by_two(i):\n if i%2==0:\n\treturn True\n return False\n\n\nWrite a python function to check whether the given integer 'i' is divisible by 3.\ndef is_divisible_by_three(i):\n if i%3==0:\n\treturn True\n return False\n\n\nWrite a python function to check whether the given integer 'i' is divisible by 5.\ndef is_divisible_by_five(i):\n if i%5==0:\n\treturn True\n return False\n##########",
        "\n\n\nWrite a python function to convert the given string to lower case.\ndef is_lower(string):\n  return (string.lower())\n\n\nWrite a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\n\n\nWrite a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\n\n\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nimport heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\n\n\nWrite a python function to check whether the given two integers have opposite sign or not.\n ###########\ndef sign(num):\n\tif num >= 0:\n\t\treturn 1\n\telse:\n\t\treturn -1\n\n\nWrite a python function to check whether the given two integers are equal or not.\n###########\ndef equal(num1,num2):\n\tif num1 == num2:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\nWrite a python function to find the sum of all the even integers in the given list.\ndef even_sum(list1):\n\tsum = 0\n\tfor i in list1:\n\t\tif i%2 == 0:\n\t\t\tsum += i\n\treturn sum\n\n\nWrite a python function to find the product of all the even integers in the given list.\ndef even_prod(list1):\n\tprod = 1\n\tfor i in list1:\n\t\tif i%2 == 0:\n\t\t\tprod *= i",
        "\n\n\nWrite a python function to convert the given string to lower case.\ndef is_lower(string):\n  return (string.lower())\n\n\nWrite a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\n\n\nWrite a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\n\n\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nimport heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\n\n\nWrite a python function to check whether the given two integers have opposite sign or not.\n \ndef oppo(a,b):\n if a<0 and b>0:\n\treturn True\n else:\n\treturn False\n\n\nWrite a python function to convert the given string to upper case.\ndef is_upper(string):\n  return (string.upper())",
        "\n\n\nWrite a python function to convert the given string to lower case.\ndef is_lower(string):\n  return (string.lower())\n\n\nWrite a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\n\n\nWrite a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\n\n\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nimport heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\n\n\nWrite a python function to check whether the given two integers have opposite sign or not.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef sign(x=0,y=0):\n    if x > 0 and y < 0:\n        return -1\n    elif x < 0 and y < 0:\n        return 1\n    elif x > 0 and y > 0:\n        return -1\n    elif x < 0 and y > 0:\n        return 1\n    else:\n        return 0\ndef sign(x=0,y=0):\n    if x > 0 and y > 0:\n        return 1\n    elif x > 0 and y < 0:\n        return -1\n    elif x < 0 and y > 0:\n        return 1\n    elif x < 0 and y < 0:\n        return -1\n    else:\n        return 0\n\nWrite a python function check whether two strings are anagram or not.\n\ndef isAnagram(str1,str2):\n    str1"
      ]
    },
    {
      "input": "\n\n\nWrite a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n    return ((x ^ y) < 0); \n\n\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\n\n\nWrite a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \n\n\nWrite a python function to count the number of positive numbers in a list.\ndef pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \n\n\nWrite a function to find the nth octagonal number.\n ",
      "output": [
        "\n\n\nWrite a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n    return ((x ^ y) < 0); \n\n\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\n\n\nWrite a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \n\n\nWrite a python function to count the number of positive numbers in a list.\ndef pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \n\n\nWrite a function to find the nth octagonal number.\n  def nth_Oct(n): \n    return (n * 8) - 3\n\n\nWrite a python function to check whether the given number is divisible by 7 or not.\ndef divisible_by_seven(n): \n   return (n % 7 == 0)\n\n\nWrite a python function to find the smallest prime factor of a number.\ndef prime_factor(n): \n   factor = 2 \n   while (factor < n): \n      if (n % factor == 0): \n         return (n / factor) \n      factor += 1 \n   return n \n\n\nWrite a python function to find the length of the longest palindromic subsequence.\ndef longest_palindrome(s): \n   n = len(s) \n   dp = [[0 for i in range(n)] for j in range(n)] \n   for i in range(n): \n      for j in range(i, n): \n         dp[i][j]",
        "\n\n\nWrite a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n    return ((x ^ y) < 0); \n\n\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\n\n\nWrite a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \n\n\nWrite a python function to count the number of positive numbers in a list.\ndef pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \n\n\nWrite a function to find the nth octagonal number.\n ###########\ndef nth_Octagonal(n): \n  n = n%12\n  if (n == 0): \n    return 1\n  else: \n    return (1+nth_Octagonal(n-1))%12\n\n\nWrite a python function to find the first prime factor of a given number.\ndef find_Prime_Factor(n): \n  for i in range(2, int(n**0.5+1)): \n    if n % i == 0: \n      return i \n  return n \n\n\nWrite a python function to find the smallest prime factor of a given number.\ndef smallest_Prime_Factor(n): \n  while True: \n    if n % 2 == 0: \n      n = n / 2 \n    else: \n      if n % 3 == 0: \n        n = n / 3 \n      else: \n        return n \n\n\nWrite a python function to find the length of the longest common substring",
        "\n\n\nWrite a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n    return ((x ^ y) < 0); \n\n\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\n\n\nWrite a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \n\n\nWrite a python function to count the number of positive numbers in a list.\ndef pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \n\n\nWrite a function to find the nth octagonal number.\n  Note: The nth octagonal number is defined by the sum of the positive integers with the same sign.\ndef nth_octagonal_number(n): \n  if n > 1525: \n    return -1 \n  else: \n    return int(str(n)[3:]) \n\n\nWrite a python function to find the n-th prime number.\ndef nth_prime(n): \n  if n > 15: \n    return -1 \n  else: \n    return int(str(n)[2:]) \n\n\nWrite a function to count the number of prime numbers less than a non-negative number, n.\ndef prime_count(n): \n  prime_count = 0 \n  for i in range(2, n+1): \n    if is_prime(i): \n      prime_count += 1 \n  return prime_count \n\n\n\nWrite a python function to find the nth Fibonacci number.\ndef fibonacci_number(",
        "\n\n\nWrite a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n    return ((x ^ y) < 0); \n\n\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\n\n\nWrite a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \n\n\nWrite a python function to count the number of positive numbers in a list.\ndef pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \n\n\nWrite a function to find the nth octagonal number.\n 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 85, 96\ndef nthOctagonalNumber(n): \n  return n*n*n*n*n*n \n\n\nWrite a python function to sort a given list of integers.\ndef sort(List): \n  # Create a sorted list for this list\n  sortedlist = []\n  for el in List: \n    # If element is positive sort it\n    if el >= 0: \n      # Append element to the list\n      sortedlist.append(el)\n  # Sort list\n  sortedlist.sort()\n  # Return sorted list\n  return sortedlist \n\n\nWrite a python function to check whether a given number is prime or not.\ndef is_prime(n): \n  for i in range(2, n): \n    if",
        "\n\n\nWrite a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n    return ((x ^ y) < 0); \n\n\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\n\n\nWrite a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \n\n\nWrite a python function to count the number of positive numbers in a list.\ndef pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \n\n\nWrite a function to find the nth octagonal number.\n 1st octagonal number is 11, 2nd is 10, 3rd is 1, 4th is 2, 5th is 3, 6th is 4, 7th is 5, 8th is 6, 9th is 7, 10th is 8, 11th is 9.\ndef nth_Octagonal_Number(n): \n  return 11 + 10*n + 10*n**2 + 10*n**3 + 10*n**4 + 10*n**5 + 10*n**6 + 10*n**7 + 10*n**8 + 10*n**9 + 10*n**10\n\nWrite a function to find the sum of squares of a list of numbers.\ndef sum"
      ]
    },
    {
      "input": "\n\n\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\n\n\nWrite a function that matches a string that has an a followed by one or more b's.\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\n\n\nWrite a function to find the volume of a sphere.\nimport math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\n\n\nWrite a python function to count the occurence of all elements of list in a tuple.\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \n\n\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n ",
      "output": [
        "\n\n\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\n\n\nWrite a function that matches a string that has an a followed by one or more b's.\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\n\n\nWrite a function to find the volume of a sphere.\nimport math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\n\n\nWrite a python function to count the occurence of all elements of list in a tuple.\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \n\n\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n ################################################################################\nfrom string import ascii_lowercase\ndef count_substrings(string):\n    count=0\n    for i in range(len(string)):\n        for j in range(i+1,len(string)):\n            if sum(string[i:j+1])==len(string):\n                count+=1\n    return count\n\n################################################################################\nfrom string import ascii_lowercase\ndef count_substrings(string):\n    count=0\n    for i in range(len(string)):\n        for j in range(i+1,len(string)):\n            count+=1\n    return count\n\n################################################################################\n'''\nWrite a function that returns the highest element in a list.\ndef highest_list(lst):\n  return max(lst)\n\n################################################################################\nWrite a function that returns the highest element in a list.\ndef highest_list(lst):\n  return max(lst, key=int)\n\n################################################################################\nWrite a function that returns the highest",
        "\n\n\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\n\n\nWrite a function that matches a string that has an a followed by one or more b's.\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\n\n\nWrite a function to find the volume of a sphere.\nimport math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\n\n\nWrite a python function to count the occurence of all elements of list in a tuple.\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \n\n\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef count_substring_sum(str, d):\n    count = 0 \n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i:j+1] == str[i:j+1]:\n                count += 1\n    return count\n\nWrite a python function that will count the number of words in a sentence.\nfrom string import split\ndef count_words(str):\n    count = 0\n    for i in split(str):\n        if i == '':\n            continue\n        else:\n            count += 1\n    return count\ndef count_words(str):\n    count = 0\n    for i in str.split():\n        if i == '':\n            continue\n        else:\n            count += 1\n    return count\nfrom string import punctuation\ndef count_words(str):\n    count = 0\n    for i in str.split",
        "\n\n\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\n\n\nWrite a function that matches a string that has an a followed by one or more b's.\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\n\n\nWrite a function to find the volume of a sphere.\nimport math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\n\n\nWrite a python function to count the occurence of all elements of list in a tuple.\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \n\n\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n \uf0b7 count_substring(sentence, sum) \ndef count_substring(sentence, sum):\n    count = 0\n    for i in sentence:\n        if sum == len(str(i)): \n            count += 1\n    return count\n\nWrite a python function to count the number of substrings with the same length as their sum.\n def count_substring(sentence, sum):\n    count = 0\n    for i in sentence:\n        if sum == len(str(i)): \n            count += 1\n    return count\n\nWrite a python function to count the number of unique substrings with the sum of digits equal to their length.\n \uf0b7 count_unique_substring(sentence, sum) \ndef count_unique_substring(sentence, sum):\n    count = 0\n    for i in sentence:\n        if sum == len(str(i)): \n            count += 1\n    return count\n\n\nWrite a python function to find",
        "\n\n\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\n\n\nWrite a function that matches a string that has an a followed by one or more b's.\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\n\n\nWrite a function to find the volume of a sphere.\nimport math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\n\n\nWrite a python function to count the occurence of all elements of list in a tuple.\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \n\n\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n ########\nimport string\ndef count_substring(s): \n    d = {}\n    for i in s: \n        if i in d: \n            d[i]+= 1 \n        else: \n            d[i] = 1 \n    return d[len(s)] \n\n\nWrite a python function to calculate the factorial of a number.\ndef factorial(n): \n  fact = 1\n  for i in range(1,n+1): \n    fact *= i \n  return fact \n\n\nWrite a python function to calculate the sum of the digits in a number.\ndef sum_digits(n): \n  d = str(n) \n  sum = 0 \n  for i in range(len(d)): \n    sum += int(d[i]) \n  return sum \n\n\nWrite a python function to calculate the sum of the digits in a number.\ndef sum_digits(n): \n  sum = 0 \n  while n > 0: \n    sum += n % ",
        "\n\n\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\n\n\nWrite a function that matches a string that has an a followed by one or more b's.\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\n\n\nWrite a function to find the volume of a sphere.\nimport math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\n\n\nWrite a python function to count the occurence of all elements of list in a tuple.\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \n\n\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n #############################################################################################\ndef count_number_of_substrings(string): \n    count = 0 \n    for i in range(len(string)): \n        count += string.count(string[i])\n    return count \n\n\nWrite a python function to split a string into a list.\ndef split_string(string):\n    list = string.split() \n    return list \n\n\nWrite a python function to return the list of elements from a given tuple.\ndef return_list(tup): \n    return list(tup) \n\n\nWrite a python function to check if the given integer is a palindrome or not.\ndef is_palindrome(number):\n    if number < 0:\n        return False \n    else: \n        return number == number[::-1] \n\n\nWrite a python function to check if the given string is a palindrome or not.\ndef is_palindrome(string):\n    string = string.lower()\n    list = string.split() \n    list"
      ]
    },
    {
      "input": "\n\n\nWrite a function to remove characters from the first string which are present in the second string.\nNO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind!= len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \n\n\nWrite a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\n\n\nWrite a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \n\n\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\n\n\nWrite a python function to find smallest number in a list.\n ",
      "output": [
        "\n\n\nWrite a function to remove characters from the first string which are present in the second string.\nNO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind!= len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \n\n\nWrite a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\n\n\nWrite a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \n\n\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\n\n\nWrite a python function to find smallest number in a list.\n ################################################################################\ndef smallest_num(arr): \n  min_num = arr[0] \n  for i in arr: \n    if i < min_num: \n      min_num = i \n  return min_num \n\n\nWrite a python function to find the kth smallest number in a list.\n ################################################################################\ndef kth_smallest_num(arr, k): \n  min_num = smallest_num(arr) \n  res = [] \n  for i in arr: \n    if i == min_num: \n      res.append(i) \n  for i in range(k-1): \n    res.append(smallest_num(res))\n  return res \n\n################################################################################\nWrite a function to generate a list of all permutations of a given array of integer.\ndef permute(arr): \n  res = [] \n  temp = [] \n  for i in arr: \n    temp.append(i) \n    if len(temp) == 1: \n      res.append(",
        "\n\n\nWrite a function to remove characters from the first string which are present in the second string.\nNO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind!= len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \n\n\nWrite a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\n\n\nWrite a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \n\n\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\n\n\nWrite a python function to find smallest number in a list.\n #################################################################################\ndef find_min(lst):\n  min_val = min(lst)\n  return(min_val)\n\n\n#################################################################################\ndef find_max(lst):\n  max_val = max(lst)\n  return(max_val)\n\n\n#################################################################################\ndef find_index(lst, value):\n  for i in range(len(lst)):\n    if lst[i] == value:\n      return(i)\n  return(-1)\n\n\n#################################################################################\ndef find_index_lst(lst, value):\n  for i in range(len(lst)):\n    if lst[i] == value:\n      return(i)\n  return(-1)\n\n\n#################################################################################\ndef find_index_2(lst, value):\n  return(lst.index(value))\n\n\n#################################################################################\ndef find_index_3(lst, value):\n  for i in range(len(lst)):\n    if lst[i] ==",
        "\n\n\nWrite a function to remove characters from the first string which are present in the second string.\nNO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind!= len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \n\n\nWrite a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\n\n\nWrite a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \n\n\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\n\n\nWrite a python function to find smallest number in a list.\n ################################################################################\nclass Solution:\n  def find_min_in_list(self, input_list):\n    min_value = input_list[0]\n    for value in input_list:\n      if value < min_value:\n        min_value = value\n    return min_value\n\n\nWrite a python function to count the number of times a number appears in an array.\n ################################################################################\nclass Solution:\n  def count_appears_in_array(self, input_array, number):\n    count = 0\n    for i in input_array:\n      if i == number:\n        count += 1\n    return count\n\nWrite a python function to find the longest word in a string.\n ################################################################################\nclass Solution:\n  def find_longest_word(self, input_string):\n    word = ''\n    for char in input_string:\n      if char =='' and len(word) > 0:\n        return word\n      if char",
        "\n\n\nWrite a function to remove characters from the first string which are present in the second string.\nNO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind!= len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \n\n\nWrite a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\n\n\nWrite a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \n\n\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\n\n\nWrite a python function to find smallest number in a list.\n ###############\ndef minimum(listval):\n    return min(i for i in listval if isinstance(i, int))\n\n\nWrite a function to find the maximum value in a list.\ndef max_value(listval):\n    return max(i for i in listval if isinstance(i, int))\n\nWrite a function which takes in a string and removes the longest substring that is not a digit.\ndef remove_non_digit(str): \n     new_str = \"\" \n     for char in str: \n         if char.isdigit(): \n             new_str = new_str + char \n     return new_str \ndef remove_non_digit(str): \n     new_str = \"\" \n     for char in str: \n         if char.isdigit(): \n             new_str = new_str + char \n     return new_str \n     return str.translate(None, '1234567890')\n\n\nWrite a function to find",
        "\n\n\nWrite a function to remove characters from the first string which are present in the second string.\nNO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind!= len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \n\n\nWrite a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\n\n\nWrite a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \n\n\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\n\n\nWrite a python function to find smallest number in a list.\n ##########\ndef find_smallest(array):\n  array.sort()\n  return(array[0])\n\n\ndef find_smallest_2(array):\n  array.sort()\n  return(array[1])\n\n\ndef find_smallest_3(array):\n  array.sort()\n  return(array[2])\n\n\nWrite a function to find the first index of a given value in a list.\ndef first_occurrence(value, array):\n  for i in range(len(array)):\n    if value == array[i]:\n      return(i)\n  return(None)\n\n\nWrite a python function to find the index of a given value in a given list.\ndef find_index(value, array):\n  for i in range(len(array)):\n    if value == array[i]:\n      return i\n  return None\n\n\nWrite a python function to reverse a list.\ndef reverse_list(array):\n  if len(array"
      ]
    },
    {
      "input": "\n\n\nWrite a function to find the volume of a cube given its side length.\ndef volume_cube(l):\n  volume = l * l * l\n  return volume\n\n\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\ndef insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\n\n\nWrite a function that returns the perimeter of a square given its side length as input.\ndef square_perimeter(a):\n  perimeter=4*a\n  return perimeter\n\n\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nfrom collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \n\n\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n ",
      "output": [
        "\n\n\nWrite a function to find the volume of a cube given its side length.\ndef volume_cube(l):\n  volume = l * l * l\n  return volume\n\n\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\ndef insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\n\n\nWrite a function that returns the perimeter of a square given its side length as input.\ndef square_perimeter(a):\n  perimeter=4*a\n  return perimeter\n\n\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nfrom collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \n\n\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n \ndef pairs_diff(t_list):\n  maxDiff = 0\n  for i in range(len(t_list)):\n    for j in range(i+1, len(t_list)):\n      diff = abs(t_list[i][0]-t_list[j][0])+abs(t_list[i][1]-t_list[j][1])\n      if diff > maxDiff:\n        maxDiff=diff\n  return maxDiff\n\n\nWrite a function that takes in a list of tuples and return the sum of the corresponding values.\nfrom operator import add \ndef sum_values(t_list):\n  return sum(map(add, t_list))\n\n\nWrite a function that takes in a list of tuples and returns the product of the corresponding values.\nfrom operator import mul\ndef product_values(t_list):\n  return reduce(mul, t_list, 1)\n\n\nWrite",
        "\n\n\nWrite a function to find the volume of a cube given its side length.\ndef volume_cube(l):\n  volume = l * l * l\n  return volume\n\n\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\ndef insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\n\n\nWrite a function that returns the perimeter of a square given its side length as input.\ndef square_perimeter(a):\n  perimeter=4*a\n  return perimeter\n\n\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nfrom collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \n\n\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n ########\ndef max_diff_available_pairs(input_list):\n  max_diff = -1\n  for i in range(len(input_list) - 1):\n    for j in range(i + 1, len(input_list)):\n      # find the difference\n      diff = input_list[i][0] - input_list[j][0]\n      if diff > max_diff:\n        max_diff = diff\n        # print(f\"maximum difference value: {max_diff}\")\n  return max_diff\n\n\nWrite a function to find the difference between two numbers.\ndef diff(a, b):\n\n  if a == 0:\n    return b\n\n  elif b == 0:\n    return a\n\n  else:\n    # else\n    temp = a\n    a = b\n    b = temp\n    diff = b - a\n    return diff\n\n\nWrite a function to find the sum of the square of all numbers in a list",
        "\n\n\nWrite a function to find the volume of a cube given its side length.\ndef volume_cube(l):\n  volume = l * l * l\n  return volume\n\n\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\ndef insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\n\n\nWrite a function that returns the perimeter of a square given its side length as input.\ndef square_perimeter(a):\n  perimeter=4*a\n  return perimeter\n\n\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nfrom collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \n\n\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n 1. Given a list of 2-tuples, return the maximum difference between the x- and y-coordinates of each pair\n 2. If there is not a 2-tuple that has the same x- and y-coordinates, return 0.\ndef max_diff(pairs):\n  x_max = 0\n  y_max = 0\n  for pair in pairs:\n    if pair[0][0]>x_max:\n      x_max = pair[0][0]\n    if pair[0][1]>y_max:\n      y_max = pair[0][1]\n  diff = x_max - y_max\n  return diff\n\n\nWrite a function that takes in a list of integers and returns the first and last element of the list\ndef first_and_last(list_of_integers):\n  list_of_integers.sort()\n  return (list_of_integers[0], list_of",
        "\n\n\nWrite a function to find the volume of a cube given its side length.\ndef volume_cube(l):\n  volume = l * l * l\n  return volume\n\n\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\ndef insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\n\n\nWrite a function that returns the perimeter of a square given its side length as input.\ndef square_perimeter(a):\n  perimeter=4*a\n  return perimeter\n\n\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nfrom collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \n\n\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n \u4e00\u4e2atuple\u5217\u8868\u4e2d\uff0c\u53d6\u51fa\u6240\u6709\u5143\u7d20\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\uff0c\u53d6\u51fa\u5176\u5de6\u53f3\u4e24\u8fb9\u7684\u5143\u7d20\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u6700\u5927\u7684\u5dee\u503c\u3002\n\n\u6d4b\u8bd5\u7528\u4f8b\uff1a\n [(1, 2),\n (1, 2),\n (3, 1),\n (3, 2),\n (2, 2)]\n max_diff(test_list)\n # 4\n'''\n\n\ndef find_max_diff(test_list):\n  res = 0\n  for i in range(len(test_list)-1):\n    for j in range(len(test_list)-1):\n      diff = abs(test_list[i][0]-test_list[j][1])\n      if diff > res:\n        res = diff\n  return res\n\n\ndef get_max_diff(test_list): \n  res = 0\n  for i in range(len(test_list)-1",
        "\n\n\nWrite a function to find the volume of a cube given its side length.\ndef volume_cube(l):\n  volume = l * l * l\n  return volume\n\n\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\ndef insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\n\n\nWrite a function that returns the perimeter of a square given its side length as input.\ndef square_perimeter(a):\n  perimeter=4*a\n  return perimeter\n\n\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nfrom collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \n\n\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n ##################################################################################\n\nWrite a function that takes in a list of tuples and returns the difference between the largest and smallest values in each tuple.\ndef get_max_min(test_list):\n  largest = max(test_list, key=lambda x: x[1])[1]\n  smallest = min(test_list, key=lambda x: x[1])[1]\n  diff_max_min = (largest - smallest)\n  return (diff_max_min)\n\n\nWrite a function to find an element in a list of tuples that satisfies a test condition.\ndef find_element(test_list,function):\n  for i in test_list:\n    if(function(i)):\n      return i\n\n\nWrite a function to get the index of a given element in a list of tuples.\ndef get_index(test_list,element):\n  for i in range(len(test_list)):\n    if(test_"
      ]
    },
    {
      "input": "\n\n\nWrite a python function to find the number of divisors of a given integer.\ndef divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\n\n\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\n\n\nWrite a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n    for i in l:\n        if i % 2!= 0:\n            l.remove(i)\n    return l\n\n\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\nfrom math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\n\n\nWrite a function to sort a list of tuples using the second value of each tuple.\n ",
      "output": [
        "\n\n\nWrite a python function to find the number of divisors of a given integer.\ndef divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\n\n\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\n\n\nWrite a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n    for i in l:\n        if i % 2!= 0:\n            l.remove(i)\n    return l\n\n\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\nfrom math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\n\n\nWrite a function to sort a list of tuples using the second value of each tuple.\n Ids are: A: 1 A: 2 A: 3..... A: K\ndef sort_tuples(l):\n  return sorted(l, key=lambda x: x[1])\n\n\nWrite a function to find the number of tuples in a list which have two elements whose first element is 2 and whose second element is 4.\ndef count_24(l):\n  return (sum(x for x in l if x[0] == 2 and x[1] == 4))\n\nWrite a function to print the first 50000 tuples of a list in ascending order of the first element of the tuple.\ndef print_tuples(l):\n  return (sorted(l, key=lambda x: x[0]))[:50000]\n\n\nWrite a function to find the number of tuples in a given list which have elements with a sum of 10.\n",
        "\n\n\nWrite a python function to find the number of divisors of a given integer.\ndef divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\n\n\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\n\n\nWrite a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n    for i in l:\n        if i % 2!= 0:\n            l.remove(i)\n    return l\n\n\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\nfrom math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\n\n\nWrite a function to sort a list of tuples using the second value of each tuple.\n..........\ndef sort_tuple(l):\n  res = []\n  for i in l:\n    for j in sorted(i, key=lambda x:x[1]):\n      res.append(j)\n  return res\n\ndef sort_tuple(l):\n  res = []\n  for i in l:\n    res.append(sorted(i))\n  return res\n\ndef sort_tuple(l):\n  res = []\n  for i in l:\n    res.append(sorted(i))\n  return res\n\ndef sort_tuple(l):\n  res = []\n  for i in l:\n    res.append(sorted(i))\n  return res\n\ndef sort_tuple(l):\n  res = []\n  for i in l:\n    res.append(sorted(i))\n  return res\n\ndef sort_tuple(l):\n  res = []\n  for i in l:\n    res.append(sorted(i))\n ",
        "\n\n\nWrite a python function to find the number of divisors of a given integer.\ndef divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\n\n\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\n\n\nWrite a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n    for i in l:\n        if i % 2!= 0:\n            l.remove(i)\n    return l\n\n\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\nfrom math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\n\n\nWrite a function to sort a list of tuples using the second value of each tuple.\n ################################################################################\n# Write a python function to sort a list of tuples based on their second value.\n# e.g. [(1, 4), (1, 4), (1, 3)] sorted by second value should be [(1, 4), (1, 3), (1, 4)].\ndef sort_by_second(l):\n  list_of_tuples_sorted = sorted(l, key=itemgetter(1))\n  return list_of_tuples_sorted\n\n\n################################################################################\n# Write a python function to filter a list of integers based on whether or not its value is greater than 3.\ndef filter_list(l):\n  if (l >= 3):\n    return l\n  else:\n    return None\n\n\n################################################################################\n# Write a python function to print out the first 5 entries of the given list.\ndef print_first_5(l):\n  if l:\n    print(\"Printing first ",
        "\n\n\nWrite a python function to find the number of divisors of a given integer.\ndef divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\n\n\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\n\n\nWrite a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n    for i in l:\n        if i % 2!= 0:\n            l.remove(i)\n    return l\n\n\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\nfrom math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\n\n\nWrite a function to sort a list of tuples using the second value of each tuple.\n ##################################################################################\n\n\nWrite a python program to sum the values of its list \ndef sum_list(a):\n  s1 = sum(a)\n  return s1\n\n\nWrite a python program to sort the elements of a list in ascending order using the first value of each tuple.\ndef sort_asc(a):\n  a.sort(key=lambda x: x[0])\n  return a\n\n\nWrite a python program to sort the elements of a list in descending order using the first value of each tuple.\ndef sort_desc(a):\n  a.sort(key=lambda x: x[0], reverse=True)\n  return a\n\n\nWrite a python program to swap two values of a list.\ndef swap(a,i,j):\n  x = a[i]\n  a[i] = a[j]\n  a[j] = x\n\n\nWrite a python function to check whether a given number is prime",
        "\n\n\nWrite a python function to find the number of divisors of a given integer.\ndef divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\n\n\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\n\n\nWrite a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n    for i in l:\n        if i % 2!= 0:\n            l.remove(i)\n    return l\n\n\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\nfrom math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\n\n\nWrite a function to sort a list of tuples using the second value of each tuple.\n #########\ndef sort_tuple_using_second(lis):\n  res = sorted(lis, key = lambda x: x[1])\n  return res\n\n\nWrite a function to sort a list with a given key.\n #########\ndef sort_tuple_with_key(lis, key):\n  return sorted(lis, key = key)\n\n\nWrite a function to get the number of occurrences of a particular value in a list.\ndef count_occurrences(lis, val):\n  count = 0\n  for i in lis:\n      if i == val:\n          count += 1\n  return count\n\n\nWrite a function to get the number of occurrences of a particular value in a list.\ndef count_occurrences(lis, val):\n  count = 0\n  for i in lis:\n      if i == val:\n          count += 1\n  return count\n\n\nWrite a function to get the number of occurrences of a particular value in a list."
      ]
    },
    {
      "input": "\n\n\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\ndef find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\n\n\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\n\n\nWrite a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\n\n\nWrite a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\n\n\nWrite a function to flatten a list and sum all of its elements.\n ",
      "output": [
        "\n\n\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\ndef find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\n\n\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\n\n\nWrite a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\n\n\nWrite a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\n\n\nWrite a function to flatten a list and sum all of its elements.\n \ndef flatten_and_sum(num_list):\n    temp = 0\n    for i in num_list:\n        temp += i\n    return temp\n\n\nWrite a function to check whether a given string has no duplicates or not.\ndef check_duplicates(str):\n    if(str in set(str)):\n        return False\n    else:\n        return True\n\n\nWrite a python function to check whether the given string has a pair of adjacent characters of the same type.\ndef check_pairs(str):\n    for i in range(len(str)-1):\n        if(str[i] == str[i+1]):\n            return True\n    return False\n\n\nWrite a python function that takes in a list of numbers and returns a list that contains the product of all the numbers in the list.\ndef product_list(num_list):\n    product = 1\n    for i in num_list:\n        product *= i\n    return product\n\n\nWrite",
        "\n\n\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\ndef find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\n\n\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\n\n\nWrite a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\n\n\nWrite a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\n\n\nWrite a function to flatten a list and sum all of its elements.\n ####################################################################################\ndef flatten_List(list):\n    return sum(list)\n####################################################################################\n\nWrite a Python function that takes a list of integers as parameters and returns the sum of the elements in the order of appearance.\ndef sum_of_elements_order(list):\n    # Your code here\n    list.sort()\n    return sum(list)\n    # Your code here\n\nWrite a function that takes a list of integers as parameters and returns a new list containing the integers in the order of appearance.\ndef sum_of_elements_sorted(list):\n    # Your code here\n    list.sort()\n    return list\n    # Your code here\n\nWrite a function that takes a list of strings as parameters and returns the index of the first occurence of the given string in the list.\ndef find_in_list(string, list_):\n    # Your code here\n    for i in range(len(list_)):\n        if list_[i]==",
        "\n\n\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\ndef find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\n\n\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\n\n\nWrite a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\n\n\nWrite a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\n\n\nWrite a function to flatten a list and sum all of its elements.\n ########\ndef flatten_and_sum(lst):\n    return sum(lst)\n\n\nWrite a python function that takes in a non-negative integer and returns the power of n with base 2.\ndef power_of_two(n):\n    i = 0\n    while i <= n:\n        if i == 0:\n            i = 1\n        else:\n            i = i * 2\n    return i\n\n\nWrite a function that takes in a non-negative integer and returns the sum of its digits.\ndef get_sum_of_digits(n):\n    return sum([int(i) for i in str(n)])\n\n\nWrite a python function that takes in a non-negative integer and returns the number of digits.\ndef get_number_of_digits(n):\n    if n < 0:\n        return 0\n    return len(str(n))\n\n\nWrite a python function that takes in a non-",
        "\n\n\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\ndef find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\n\n\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\n\n\nWrite a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\n\n\nWrite a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\n\n\nWrite a function to flatten a list and sum all of its elements.\n ##########\ndef flatten(l):\n    # loop through the list\n    # sum each element\n    # return the sum\n    # loop through the list\n    # add the sum of each element to total sum\n    # return total sum\n    # return None if the list length is 0\n    total_sum = 0\n    for i in l:\n        if isinstance(i,list):\n            total_sum += flatten(i)\n        else:\n            total_sum += i\n    return total_sum\n\n\nWrite a python function to check whether the given string is palindrome or not.\ndef isPalindrome(s):\n    def reverse(s):\n        new_s = ''\n        for i in s:\n            new_s = new_s + i[::-1]\n        return new_s[::-1]\n    if s == reverse(s):\n        return True\n    return False\n\n\nWrite a python function to find the longest common prefix in a given String.\ndef longest_common",
        "\n\n\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\ndef find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\n\n\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\n\n\nWrite a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\n\n\nWrite a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\n\n\nWrite a function to flatten a list and sum all of its elements.\n ############################################################################\n# Write a function that takes 2 lists and returns a list that is their sum.\n# Use a for loop to iterate through each item in the first list and add each of its items to a new list, and return a new list.\ndef sum_list(list1,list2):\n    sum = []\n    for i in range(len(list1)):\n        sum.append(list1[i]+list2[i])\n    return sum\n\n\nWrite a function that takes a list of lists and returns the outermost list.\n# Use a for loop to iterate through each item in the list and return the first item in the outermost list.\ndef outer_list(list1):\n    outer = []\n    for i in range(len(list1)):\n        outer.append(list1[i][0])\n    return outer\n\n\nWrite a function that takes a list of lists and returns the middle list.\n# Use a"
      ]
    },
    {
      "input": "\n\n\nWrite a function to check if the given number is woodball or not.\ndef is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\n\n\nWrite a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\n\n\nWrite a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\n\n\nWrite a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\n\n\nWrite a python function to count the number of positive numbers in a list.\n ",
      "output": [
        "\n\n\nWrite a function to check if the given number is woodball or not.\ndef is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\n\n\nWrite a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\n\n\nWrite a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\n\n\nWrite a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\n\n\nWrite a python function to count the number of positive numbers in a list.\n \ndef count_positive(lst): \n\tcount = 0\n\tfor i in lst: \n\t\tif (i >= 0): \n\t\t\tcount = count + 1\n\treturn count\n\n\nWrite a python function to calculate the power of 3 given an integer.\n\ndef power_of_3(n): \n\tif (n==0): \n\t\treturn 1\n\treturn n * power_of_3(n-1)\n\n\nWrite a python function to take the square root of a number.\n\ndef square_root(n): \n\tif (n==0): \n\t\treturn 1\n\treturn (n/2)**0.5\n\n\nWrite a python function to find the cube root of a number.\n\ndef cube_root(n): \n\tif (n==1): \n\t\treturn 1\n\treturn n**(1/3) \n\n\nWrite a python function to find",
        "\n\n\nWrite a function to check if the given number is woodball or not.\ndef is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\n\n\nWrite a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\n\n\nWrite a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\n\n\nWrite a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\n\n\nWrite a python function to count the number of positive numbers in a list.\n ##############################################################################################\ndef count_pos_nums(list): \n\tcount = 0\n\tfor i in range(len(list)): \n\t\tif (list[i] > 0): \n\t\t\tcount = count + 1\n\treturn count\n\n\nWrite a python function to count the number of positive numbers in a list.\n ##############################################################################################\ndef count_pos_nums(list): \n\tcount = 0\n\tfor i in range(len(list)): \n\t\tif (list[i] > 0): \n\t\t\tcount = count + 1\n\treturn count\n\n\nWrite a python function to count the number of positive numbers in a list.\n ##############################################################################################\ndef count_pos_nums(list): \n\tcount = 0\n\tfor i in range(len(list)): \n\t\tif (list[i] > 0): \n\t\t\tcount = count + 1\n\treturn count\n\n\nWrite",
        "\n\n\nWrite a function to check if the given number is woodball or not.\ndef is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\n\n\nWrite a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\n\n\nWrite a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\n\n\nWrite a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\n\n\nWrite a python function to count the number of positive numbers in a list.\n \ndef count_pos(list): \n\tpos = 0\n\tfor num in list: \n\t\tif (num > 0): \n\t\t\tpos = pos + 1\n\treturn pos\n\n\nWrite a python function to filter the list of elements which are greater than 5.\n\ndef filter(list): \n\tnew_list = []\n\tfor num in list: \n\t\tif (num > 5): \n\t\t\tnew_list.append(num)\n\treturn new_list\n\n\nWrite a python function to find the first element in a list which is greater than 5.\n\ndef find_gt_5(list): \n\tfor num in list: \n\t\tif (num > 5): \n\t\t\treturn num\n\treturn -1\n\n\nWrite a python function to divide the list of elements which are greater than 5 by 2.\n\ndef divide_list(list): \n\tnew_list",
        "\n\n\nWrite a function to check if the given number is woodball or not.\ndef is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\n\n\nWrite a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\n\n\nWrite a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\n\n\nWrite a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\n\n\nWrite a python function to count the number of positive numbers in a list.\n \ndef positive_count(nums): \n\tcount = 0\n\tfor num in nums: \n\t\tif (num >= 0): \n\t\t\tcount = count + 1\n\treturn count\n\nWrite a function to find the length of a string.\ndef len_str(string): \n\treturn len(string)\n\n\nWrite a function to find the longest word in a sentence.\ndef find_longest_word(sentence): \n\tl = len(sentence.split(\" \"))\n\tfor word in sentence.split(\" \"): \n\t\tif (len(word) > l): \n\t\t\tl = len(word)\n\treturn l\n\n\nWrite a function to convert a number to roman numerals.\ndef convert_num(num): \n\td = {1:\"I\",2:\"II\",3:\"III\",4:\"IV\",5:\"V\",6:\"VI\",7:\"VII\",8:\"VIII\",",
        "\n\n\nWrite a function to check if the given number is woodball or not.\ndef is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\n\n\nWrite a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\n\n\nWrite a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\n\n\nWrite a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\n\n\nWrite a python function to count the number of positive numbers in a list.\n \ndef count_positive(list): \n    positive = 0\n    for i in list: \n        if (i > 0): \n            positive += 1\n    return positive\n\n\nWrite a function to find the area of a triangle.\ndef calc_area(a, b, c): \n    return (a * b) / 2\n\n\ndef sort_string2(string): \n    list_of_string = list(string.split(\" \")) \n    list_of_string.sort()\n    return list_of_string\n\n\nWrite a function to sort a string\ndef sort_string(string): \n    list_of_string = list(string.split(\" \")) \n    list_of_string.sort()\n    return list_of_string\n\n\nWrite a function to find a string that is both a palindrome and not a substring of another string.\ndef find_palindrome(string1, string2): \n    if (string1 == string"
      ]
    },
    {
      "input": "\n\n\nWrite a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \n\n\nWrite a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \n\n\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\ndef frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\n\n\nWrite a function to count the number of occurence of the string'std' in a given string.\ndef count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] =='s' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\n\n\nWrite a function to find the number of ways to partition a set of Bell numbers.\n ",
      "output": [
        "\n\n\nWrite a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \n\n\nWrite a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \n\n\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\ndef frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\n\n\nWrite a function to count the number of occurence of the string'std' in a given string.\ndef count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] =='s' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\n\n\nWrite a function to find the number of ways to partition a set of Bell numbers.\n 1. Find the number of ways to partition the set of first 100 Bell numbers.\ndef ways_to_partition(Bell_num):\n    Bell_num = [int(Bell) for Bell in Bell_num]\n    count = 0\n    for Bell in Bell_num:\n        for i in range(1,Bell + 1):\n            if Bell % i == 0:\n                count += 1\n    return count\n\n\nWrite a function to find the number of ways to partition a set of Bell numbers.\n 2. Find the number of ways to partition the set of last 100 Bell numbers.\ndef ways_to_partition_2(Bell_num):\n    Bell_num = [int(Bell) for Bell in Bell_num]\n    count = 0\n    for Bell in Bell_num:\n        for i in",
        "\n\n\nWrite a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \n\n\nWrite a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \n\n\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\ndef frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\n\n\nWrite a function to count the number of occurence of the string'std' in a given string.\ndef count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] =='s' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\n\n\nWrite a function to find the number of ways to partition a set of Bell numbers.\n 1) Find the number of ways that there are at least two Bell numbers less than that we have given.\n 2) Find the number of ways that there are at least three Bell numbers less than that we have given.\n 3) Find the number of ways that there are at least four Bell numbers less than that we have given.\n 4) Find the number of ways that there are at least five Bell numbers less than that we have given.\n 5) Find the number of ways that there are at least six Bell numbers less than that we have given.\n 6) Find the number of ways that there are at least seven Bell numbers less than that we have given.\n 7) Find the number of ways that there are at least eight Bell numbers less than that we have given.\n 8) Find the number of ways that there are at least nine Bell numbers less than that we have given.\n",
        "\n\n\nWrite a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \n\n\nWrite a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \n\n\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\ndef frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\n\n\nWrite a function to count the number of occurence of the string'std' in a given string.\ndef count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] =='s' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\n\n\nWrite a function to find the number of ways to partition a set of Bell numbers.\n \uf0b7n = 4\n \uf0b7Bell(n) = Bell(n-1) + Bell(n-2) + Bell(n-3) + 1\n \uf0b7Bell(n) = 0 for n = 0 or n = 1\n \uf0b7Bell(n) = n for n > 1\n Write a python function to find the number of ways to partition a set of Bell numbers.\n \uf0b7n = 5\n \uf0b7Bell(n) = Bell(n-1) + Bell(n-2) + Bell(n-3) + Bell(n-4) + 1\n \uf0b7Bell(n) = 0 for n = 0 or n = 1\n \uf0b7Bell(n) = n for n > 1\n Write a function",
        "\n\n\nWrite a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \n\n\nWrite a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \n\n\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\ndef frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\n\n\nWrite a function to count the number of occurence of the string'std' in a given string.\ndef count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] =='s' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\n\n\nWrite a function to find the number of ways to partition a set of Bell numbers.\n \uf0b7 0,1,2,3,4,5,6,7,8,9 are all possible sets of 6 elements.\n \uf0b7 0,1,2,3,4,5,6,7,8,9 are not possible sets of 6 elements and neither of them are the Bell numbers.\n def find_partition(n): \n    if n < 6: \n        return n\n    else: \n        return n - 1 + find_partition(n - 2)\n\nWrite a function to check whether the given list contains all the distinct elements.\ndef check_distinct(list1): \n    list1 = list(set(list1))\n    return list1 == list(range(min(list1),max(list1)+1)) \n\n\nWrite a function to find the sum of all the elements in a list.\ndef sum_list(l):\n    return sum(l",
        "\n\n\nWrite a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \n\n\nWrite a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \n\n\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\ndef frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\n\n\nWrite a function to count the number of occurence of the string'std' in a given string.\ndef count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] =='s' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\n\n\nWrite a function to find the number of ways to partition a set of Bell numbers.\n  def ways_of_partition(n,k):\n    if n == 0 or k == 0:\n      return 1\n    else:\n      return ways_of_partition(n - 1, k) + ways_of_partition(n - 1, k - 1)\n\n\nWrite a function to find the number of ways to arrange a set of elements in a set of permutations.\ndef ways_of_permutation(n,k):\n  if n == 0 or k == 0:\n    return 1\n  else:\n    return ways_of_permutation(n - 1, k) + ways_of_permutation(n - 1, k - 1)\n\n\nWrite a function to find the number of ways to arrange a set of elements in a set of permutations without using the permutations function.\ndef ways_of_permutation2(n, k):\n    # Write your code here.\n    if n =="
      ]
    },
    {
      "input": "\n\n\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\ndef get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\n\n\nWrite a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\n\n\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\n\n\nWrite a function to multiply two integers.\ndef multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\n\n\nWrite a python function to check whether the given array is monotonic or not.\n ",
      "output": [
        "\n\n\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\ndef get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\n\n\nWrite a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\n\n\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\n\n\nWrite a function to multiply two integers.\ndef multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\n\n\nWrite a python function to check whether the given array is monotonic or not.\n ~~~\ndef monotonic(arr):\n    # Your code here!\n    pass\n\nif __name__ == \"__main__\":\n    while True:\n        try:\n            x = int(input('Enter an integer: '))\n            break\n        except ValueError:\n            print('We need an integer!')\n\n    print(monotonic([1, 2, 3, 4]))\n    print(monotonic([1, 2, 3, 4, 5]))\n    print(monotonic([1, 3, 2, 4, 5]))\n    print(monotonic([1, 2, 3, 5, 4]))\n    print(monotonic([1, 3, 4, 2, 5]))\n    print(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(monotonic([1, 2, 3, 4, 5",
        "\n\n\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\ndef get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\n\n\nWrite a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\n\n\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\n\n\nWrite a function to multiply two integers.\ndef multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\n\n\nWrite a python function to check whether the given array is monotonic or not.\n ##########################################################################################\n\n# Write a python function to create a string whose characters are consecutive elements of the given array.\n\n\nWrite a python function to find the first unique character in a given string.\ndef first_unique(str):\n    counter = dict()\n    for i in range(len(str)):\n        if str[i] not in counter:\n            counter[str[i]] = 1\n        else:\n            counter[str[i]] += 1\n    for key, value in counter.items():\n        if value >= 2:\n            return key\n    return \"None\"\n\n\nWrite a python function to check whether the given array is monotonic or not.\ndef isMonotonic(l):\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n\n\nWrite a python function to check whether the given array is monotonic or not.\n",
        "\n\n\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\ndef get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\n\n\nWrite a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\n\n\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\n\n\nWrite a function to multiply two integers.\ndef multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\n\n\nWrite a python function to check whether the given array is monotonic or not.\n  def is_monotonic(arr):\n    for i in range(len(arr)-1):\n        if arr[i+1] < arr[i]:\n            return False\n    return True\n\n\nWrite a python function to check if the given integer is a power of 2 or not.\n  def is_power_of_2(n):\n    return n!= 0 and ((n & (n-1)) == 0)\n\n\nWrite a python function to find the given number's bit pattern.\ndef bit_pattern(n):\n    if (n == 0):\n        return 0\n    else:\n        return 1 + bit_pattern(n-1)\n\n'''\n\n# Problem 1 - Counting Sundays\n# 1. Write a python function to count the number of sundays in the given date range.\nimport datetime\ndef count_sundays(start_date, end_date):\n   ",
        "\n\n\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\ndef get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\n\n\nWrite a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\n\n\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\n\n\nWrite a function to multiply two integers.\ndef multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\n\n\nWrite a python function to check whether the given array is monotonic or not.\n 1. Check whether the array is ascending or not.\n 2. Check whether the array is a monotonic increasing or not.\n 3. Check whether the array is a monotonic decreasing or not.\n 4. Check whether the array is a monotonic increasing or not.\n 5. Check whether the array is a monotonic decreasing or not.\ndef is_monotonic(arr):\n    if arr == None or len(arr) == 0: \n        return True\n    elif len(arr) == 1: \n        return True\n    \n    # check if first element is smaller than the last element\n    if arr[0] >= arr[1]:\n        return False\n    \n    # check if first element is larger than the last element\n    if arr[1] >= arr[len(arr) - 1]:\n        return False\n    else:\n        # check if first element is smaller than the last element\n        if arr[0] <= arr[len(arr",
        "\n\n\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\ndef get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\n\n\nWrite a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\n\n\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\n\n\nWrite a function to multiply two integers.\ndef multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\n\n\nWrite a python function to check whether the given array is monotonic or not.\n 1. For non-decreasing sequence, True is returned if array is monotonic and False otherwise.\ndef monotonic_array(arr):\n    if len(arr) <= 1:\n        return True\n    if arr[0] > arr[-1]: \n        return False\n    for i in range(1, len(arr) - 1):\n        if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:\n            return False\n    return True\n\n\nWrite a python function to check whether the given array is bimonotonic or not.\n 1. True is returned if array is bimonotonic and False otherwise.\ndef bimonotonic_array(arr):\n    if len(arr) <= 1:\n        return True\n    if arr[0] > arr[-1]: \n        return False\n    for i in range(1, len(arr) - 1):\n        if"
      ]
    },
    {
      "input": "\n\n\nWrite a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \n\n\nWrite a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \n\n\nWrite a function to convert all possible convertible elements in a list of lists to floats.\ndef list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\n\n\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\ndef even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \n\n\nWrite a function to check whether a list contains the given sublist or not.\n ",
      "output": [
        "\n\n\nWrite a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \n\n\nWrite a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \n\n\nWrite a function to convert all possible convertible elements in a list of lists to floats.\ndef list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\n\n\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\ndef even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \n\n\nWrite a function to check whether a list contains the given sublist or not.\n ##############################################################################################\ndef contains(lst, sub_lst):\n    return all(sub_lst in lst for sub_lst in sub_lst)\n##############################################################################################\n\n\nWrite a python function that returns true or false depending on the given list having all the same elements.\ndef all_equal(lst):\n    for i in range(1,len(lst)):\n        if lst[i]!= lst[0]:\n            return False\n    return True\n##############################################################################################\n\n\nWrite a function to find the element in a list that satisfies the function given.\ndef find_element(list, func):\n    for i in list:\n        if func(i) == True:\n            return i\n##############################################################################################\n\n\nWrite a python function that returns the integer k such that all the numbers in the given list are divisible by k.\ndef divisible_by_k(list, k):\n    for i in list:\n        if i % k!= 0:\n            return False",
        "\n\n\nWrite a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \n\n\nWrite a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \n\n\nWrite a function to convert all possible convertible elements in a list of lists to floats.\ndef list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\n\n\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\ndef even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \n\n\nWrite a function to check whether a list contains the given sublist or not.\n ###############\n# QUESTION: Write a function that takes two lists and checks whether the second list is contained in the first one.\n###############\ndef contains_Sublist(list1, list2):\n    for sub in list2:\n        if sub in list1:\n            return True\n    return False\n\n###############\n# QUESTION: Write a function that takes two lists and checks whether the second list is contained in the first one.\n###############\ndef contains_Sublist_v2(list1, list2):\n    for sub in list2:\n        if list1.find(sub)!= -1:\n            return True\n    return False\n\n###############\n# QUESTION: Write a function that takes two lists and checks whether the second list is contained in the first one.\n###############\ndef contains_Sublist_v3(list1, list2):\n    for sub in list2:\n        if sub in list1:\n            return True\n   ",
        "\n\n\nWrite a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \n\n\nWrite a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \n\n\nWrite a function to convert all possible convertible elements in a list of lists to floats.\ndef list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\n\n\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\ndef even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \n\n\nWrite a function to check whether a list contains the given sublist or not.\n  def check_Sublist(test_list,sub_list): \n    for element in test_list: \n        for sub_ele in sub_list: \n            if element == sub_ele: \n                return True \n    return False \n\n\nWrite a python program to check whether a list is empty or not.\ndef IsListEmpty(test_list): \n  if not test_list : \n    return True \n  else: \n    return False \n\n\nWrite a python function to check whether a list is empty or not.\ndef IsListEmpty(test_list): \n  return len(test_list) == 0 \n\n\nWrite a python function to find the largest of two numbers.\ndef Find_Largest(x,y) : \n  if (x > y) : \n    return x \n  else : \n    return y \n\n\nWrite a python function to check whether a list is sorted or not.\ndef IsSorted(my_list): \n  return True if my_list",
        "\n\n\nWrite a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \n\n\nWrite a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \n\n\nWrite a function to convert all possible convertible elements in a list of lists to floats.\ndef list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\n\n\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\ndef even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \n\n\nWrite a function to check whether a list contains the given sublist or not.\n ################################################################################\n\nWrite a function to add a given integer to a list and return the resultant list.\ndef add_to_list(test_list, n): \n    new_list = [] \n    for ele in test_list: \n        new_list.append(ele+n) \n    return new_list; \n\n\nWrite a python function that takes in a list and it's size and checks whether there is two or more duplicates in the list.\ndef duplicate_check(test_list, length):\n    res = [] \n    for ele in test_list: \n        if ele not in res: \n            res.append(ele) \n        else: \n            return True \n    return False\n\n\nWrite a python function to calculate sum of the given list after every n-th element in the list.\ndef multiple_sum(test_list, n):\n    res = 0\n    for i in range(len(test_list)-n+1):\n        res =",
        "\n\n\nWrite a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \n\n\nWrite a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \n\n\nWrite a function to convert all possible convertible elements in a list of lists to floats.\ndef list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\n\n\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\ndef even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \n\n\nWrite a function to check whether a list contains the given sublist or not.\n \ndef check_if_in_list(L,E):\n    for item in E:\n        if item not in L:\n            return False\n    return True \n[1,2,3,4,5], [1,2,3,4,5] ==> True \n[1,2,3,4,5], [1,4,5] ==> False \n'''\n\n# test cases\n# print(check_if_in_list([1, 2, 3, 4, 5], [1, 4, 5]))\n\n# print(even_Power_Sum(7))\n\n# print(find_Element([1,2,3,4,5],[[0,3],[4,5],[6,7]],1,2))\n\n# print(trim_tuple([1,2,3,4], 2))\n\n# print(list_"
      ]
    },
    {
      "input": "\n\n\nWrite a python function to count inversions in an array.\ndef get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n\n\nWrite a function to apply a given format string to all of the elements in a list.\ndef add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\n\n\nWrite a python function to count the occurence of all elements of list in a tuple.\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \n\n\nWrite a python function to find the length of the longest word.\ndef len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\n\n\nWrite a function to find whether all the given tuples have equal length or not.\n ",
      "output": [
        "\n\n\nWrite a python function to count inversions in an array.\ndef get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n\n\nWrite a function to apply a given format string to all of the elements in a list.\ndef add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\n\n\nWrite a python function to count the occurence of all elements of list in a tuple.\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \n\n\nWrite a python function to find the length of the longest word.\ndef len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\n\n\nWrite a function to find whether all the given tuples have equal length or not.\n \ndef is_equal_length(tup1, tup2):\n    if len(tup1) == len(tup2):\n        return True\n    return False\n\n\nWrite a function to find the smallest element from a list.\ndef Min(list1):\n    min_val=list1[0]\n    for i in list1:\n        if i<min_val:\n            min_val=i\n    return min_val\n\n\nWrite a function to sort a given list of tuples in ascending order.\nfrom functools import cmp_to_key \ndef Asc_Asc_Sort(tup1, tup2):\n    return cmp_to_key(lambda x,y: cmp(x[1],y[1]))(tup1,tup2)\n\n\nWrite a function to find the smallest element from a list.\ndef Min(list1):\n    min_val=list1[0]\n    for i in list1:\n        if",
        "\n\n\nWrite a python function to count inversions in an array.\ndef get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n\n\nWrite a function to apply a given format string to all of the elements in a list.\ndef add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\n\n\nWrite a python function to count the occurence of all elements of list in a tuple.\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \n\n\nWrite a python function to find the length of the longest word.\ndef len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\n\n\nWrite a function to find whether all the given tuples have equal length or not.\n ########\n\nWrite a python function to find the lengths of the two given sets.\ndef set_len(set1, set2):\n    if len(set1)==len(set2):\n        return len(set1)\n    return -1\n\n\nWrite a function to find the length of the longest string amongst the given strings.\ndef longest_string(strings):\n    max_len=len(strings[0])\n    for i in strings:\n        if len(i)>max_len:\n            max_len=len(i)\n    return max_len\n\n\nWrite a python function to take a string and return the first occurrence of a given character.\n########\n\nWrite a python function to remove all occurrences of a given character from a given string.\ndef remove_char(str, char):\n    return str.replace(char,'')\n\n\nWrite a python function to remove all leading and trailing spaces from a given string.\ndef",
        "\n\n\nWrite a python function to count inversions in an array.\ndef get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n\n\nWrite a function to apply a given format string to all of the elements in a list.\ndef add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\n\n\nWrite a python function to count the occurence of all elements of list in a tuple.\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \n\n\nWrite a python function to find the length of the longest word.\ndef len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\n\n\nWrite a function to find whether all the given tuples have equal length or not.\n \ndef equal_length(tup1, tup2):\n    if len(tup1) == len(tup2):\n        for i in range(len(tup1)):\n            if tup1[i]!= tup2[i]:\n                return False\n    return True\n\n\nWrite a python function to find the smallest element of a list using a min function.\ndef min_element(list_): \n    min_val =list_[0]\n    for i in list_: \n        if i < min_val: \n            min_val=i\n    return min_val\n\n\nWrite a python function to find the largest element of a list using a max function.\ndef max_element(list_): \n    max_val =list_[0]\n    for i in list_: \n        if i > max_val: \n            max_val=i\n    return max_val\n\n\nWrite a python function to find the average of a list using a sum function.\ndef average_of",
        "\n\n\nWrite a python function to count inversions in an array.\ndef get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n\n\nWrite a function to apply a given format string to all of the elements in a list.\ndef add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\n\n\nWrite a python function to count the occurence of all elements of list in a tuple.\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \n\n\nWrite a python function to find the length of the longest word.\ndef len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\n\n\nWrite a function to find whether all the given tuples have equal length or not.\n \uf0e0 def equi_len(tup):\n \uf0e0     if len(tup)==len(tup[0]):\n \uf0e0         return True\n \uf0e0     else:\n \uf0e0         return False\n \uf0e0 if equi_len(tup1)==equi_len(tup2)\n \uf0e0 else:\n \uf0e0   return False\n \uf0e0 if equi_len(tup1)==equi_len(tup3)\n \uf0e0 else:\n \uf0e0   return False\n \uf0e0 if equi_len(tup1)==equi_len(tup4)\n \uf0e0 else:\n \uf0e0   return False\n \uf0e0 if equi_len(tup1)==equi_len(tup5)\n \uf0e0 else:\n \uf0e0   return False",
        "\n\n\nWrite a python function to count inversions in an array.\ndef get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n\n\nWrite a function to apply a given format string to all of the elements in a list.\ndef add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\n\n\nWrite a python function to count the occurence of all elements of list in a tuple.\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \n\n\nWrite a python function to find the length of the longest word.\ndef len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\n\n\nWrite a function to find whether all the given tuples have equal length or not.\n ########\ndef all_equal_len(tup):\n    length=len(tup[0])\n    for i in tup:\n        if len(i)!=length:\n            return False\n    return True\n\n\nWrite a python function to print the contents of a given string.\ndef print_string(string): \n    print(string)\n\n\nWrite a python function to convert a list to a string.\ndef list_to_string(list_): \n    string = \"\" \n    for item in list_:\n        string += str(item) + \" \"\n    return string\n\n\nWrite a python function to convert a list to a string.\ndef list_to_string(list_): \n    string = \"\" \n    for item in list_:\n        string += str(item) + \" \"\n    return string\n\n# Write a python function to reverse a string.\ndef reverse_string(string):\n    result = \"\"\n    for i in range(len(string) - 1,"
      ]
    },
    {
      "input": "\n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\n\n\nWrite a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\n\n\nWrite a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \n\n\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\ndef odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n\n\nWrite a function to sort a list of elements.\n ",
      "output": [
        "\n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\n\n\nWrite a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\n\n\nWrite a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \n\n\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\ndef odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n\n\nWrite a function to sort a list of elements.\n ~~~~~~~~~~~~~~~\ndef sort_list(l):\n\treturn sorted(l)\n\n\nWrite a python function to find the largest number in a list.\ndef find_largest(l):\n\tif l == []:\n\t\treturn -1\n\telif len(l) == 1:\n\t\treturn l[0]\n\telse:\n\t\treturn max(l)\n\n\nWrite a python function to find the smallest number in a list.\ndef find_smallest(l):\n\tif l == []:\n\t\treturn -1\n\telif len(l) == 1:\n\t\treturn l[0]\n\telse:\n\t\treturn min(l)\n\n\nWrite a python function to find the kth largest element in a list.\ndef find_kth_largest(l,k):\n\tif l == []:\n\t\treturn -1\n\telif not k >= 0:\n\t\treturn -1\n",
        "\n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\n\n\nWrite a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\n\n\nWrite a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \n\n\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\ndef odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n\n\nWrite a function to sort a list of elements.\n ~~~~~~~~~~~~~~~\ndef sort_list(list): \n    list.sort() \n    return list\n\n\nWrite a python function to check whether all elements in a list are unique or not.\ndef is_unique(l): \n    count = {} \n    for element in l: \n        if element not in count: \n            count[element] = 1 \n        else: \n            return False \n    return True \n\n\nWrite a python function to find the number of times that a given integer is divisible by 7.\ndef number_of_times_7(n): \n    count=0 \n    for i in range(1,n+1): \n        if i % 7 == 0: \n            count=count+1\n    return count\n\n\nWrite a python function to find the number of times that a given integer is divisible by 5.\ndef number_of_times_5(n): \n    count=0 \n    for i in range(1,n+1): \n       ",
        "\n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\n\n\nWrite a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\n\n\nWrite a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \n\n\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\ndef odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n\n\nWrite a function to sort a list of elements.\n ################################################################################\ndef sort_list(List):\n    return sorted(List)\n\n################################################################################\n# Write a function to find the sum of the first n natural numbers.\ndef sum_firstn(n):\n    sum = 0\n    for i in range(1, n + 1): \n        sum = sum + i\n    return sum\n\n\nWrite a function to find the sum of the first n natural numbers.\ndef sum_firstn(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i\n    return sum\n################################################################################\n# Write a function to find the sum of the first n natural numbers.\ndef sum_firstn(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i\n    return sum\n################################################################################\n# Write a function to find the sum of the first n natural numbers.\ndef sum_firstn",
        "\n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\n\n\nWrite a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\n\n\nWrite a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \n\n\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\ndef odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n\n\nWrite a function to sort a list of elements.\n \ndef sort_list(l): \n    l.sort() \n\n\nWrite a function to merge two sorted lists into one sorted list.\ndef merge_sorted_lists(l1, l2): \n    if len(l1) == 0: \n        return l2\n    elif len(l2) == 0: \n        return l1\n    else: \n        if l1[0] < l2[0]: \n            l1.insert(0, l2[0]) \n            return merge_sorted_lists(l1, l2[1:])\n        else: \n            l2.insert(0, l1[0]) \n            return merge_sorted_lists(l1[1:], l2) \n\nWrite a function to return a list of all the unique elements in a given list.\ndef unique_elements(L): \n    result = [] \n    for i in L: \n        if not i in result: \n            result.append(i)",
        "\n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\n\n\nWrite a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\n\n\nWrite a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \n\n\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\ndef odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n\n\nWrite a function to sort a list of elements.\n ########################################################################################\ndef sort_list(L):\n    # sort by the first item in the list\n    L.sort()\n    # sort by the rest of the list\n    L.sort(key=lambda x:x[1])\n    return L\n########################################################################################\n\n\nWrite a python function to find the nth largest element in a list.\ndef find_nth_largest(L, n):\n    # find the index of the last item\n    index = len(L) - 1 - n\n    # return the item at the index\n    return L[index]\n########################################################################################\n\n\nWrite a python function to reverse a string.\ndef reverse(s):\n    return s[::-1]\n########################################################################################\n\n\nWrite a function to find the length of a string.\ndef length(s):\n    return len(s)\n########################################################################################\n\n\nWrite a python function to find the index of a given substring in a given string.\ndef find_substring(s"
      ]
    },
    {
      "input": "\n\n\nWrite a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\n\n\nWrite a function to find the depth of a dictionary.\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n\n\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\n\n\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n ",
      "output": [
        "\n\n\nWrite a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\n\n\nWrite a function to find the depth of a dictionary.\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n\n\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\n\n\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n \ndef is_square(n):\n\treturn (math.sqrt(n) - int(math.sqrt(n)) == 0)\n\n\ndef is_square_1(n):\n\treturn math.sqrt(n) == math.floor(math.sqrt(n))\n\n\nWrite a function that takes an array and returns the maximum of the two adjacent elements.\ndef find_maximum(arr):\n\tif len(arr) <= 1: return arr[0]\n\treturn max(arr[0], find_maximum(arr[1:]))\n\n\nWrite a function that takes a string and returns the string with all 'x's replaced by '0'.\ndef replace_x_with_0(s):\n\treturn s.replace('x', '0')\n\n\nWrite a function that takes a string and returns the string with all 'o's replaced by '0'.\ndef replace_o_with_",
        "\n\n\nWrite a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\n\n\nWrite a function to find the depth of a dictionary.\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n\n\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\n\n\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n \ndef check_square(n): \n    if n < 0 or n % 4 == 0: \n        return False \n    if n < 4: \n        return True \n    n = int(n ** 0.5) \n    return n * n == n ** 2 \n\n\nWrite a python function to find the n-th Fibonacci number.\ndef fibonacci(n): \n\tif n == 0: \n\t\treturn 0 \n\tif n == 1: \n\t\treturn 1 \n\tif n == 2: \n\t\treturn 1 \n\treturn fibonacci(n - 1) + fibonacci(n - 2) \n\n\nWrite a python function that takes a list of integers as arguments.\ndef find_number(L):\n def find_number(L):\n \tif len(L) == 1: \n \t\treturn L[0] \n \tif len(L) == 0",
        "\n\n\nWrite a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\n\n\nWrite a function to find the depth of a dictionary.\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n\n\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\n\n\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n \ndef power_of_two(n):\n\tif n == 0:\n\t\treturn False\n\twhile n & 1 == 0:\n\t\tn >>= 1\n\treturn n == 1\n\n\nWrite a function which takes a number and returns its binary representation.\ndef binary(n):\n\tresult = 0\n\twhile n!= 0:\n\t\tresult <<= 1\n\t\tresult += n & 1\n\t\tn >>= 1\n\treturn result\n\n\nWrite a python function to check whether a number is prime or not.\ndef is_prime(n):\n\tif n == 2:\n\t\treturn True\n\telif n == 1:\n\t\treturn False\n\telif n % 2 == 0:\n\t\treturn False\n\telif n % 3 == 0:\n\t\treturn False\n\telif n % 5 == 0:\n\t\treturn False",
        "\n\n\nWrite a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\n\n\nWrite a function to find the depth of a dictionary.\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n\n\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\n\n\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n \ndef can_be_represented_as_diff(n):\n    return True if n <= 4 else False\n\nWrite a python function to check whether the given number can be represented as the sum of two squares or not.\n\ndef can_be_represented_as_sum(n):\n    return True if n <= 4 else False\n\nWrite a python function to check whether the given number can be represented as the product of two squares or not.\ndef can_be_represented_as_product(n):\n    return True if n <= 4 else False\n\n\nWrite a python function to convert a decimal to hex.\ndef conv_dec_to_hex(n):\n\treturn bin(n).lstrip(\"0b\")\n\n\nWrite a python function to convert a hex to decimal.\ndef conv_hex_to_dec(n):\n\treturn int(n, 16)\n\n\nWrite",
        "\n\n\nWrite a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\n\n\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\n\n\nWrite a function to find the depth of a dictionary.\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n\n\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\n\n\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n 2^3 > 5\ndef check_difference(number):\n\tif number == 0:\n\t\treturn True\n\tif number % 2 == 0:\n\t\treturn check_difference(number / 2)\n\telse:\n\t\treturn check_difference(3 * number + 1)\n\n\nWrite a function to reverse the digits of a given number.\ndef reverse_digits(n):\n\tn = str(n)\n\treturn int(n[::-1])\n\n\nWrite a function to check whether a string is a palindrome.\ndef is_palindrome(s):\n    s = s.lower()\n    return s == s[::-1]\n\n\nWrite a function to check whether a string is a palindrome.\ndef is_palindrome(s):\n\tif not s:\n\t\treturn True\n\tif len(s) == 1:\n\t\treturn True\n\ts = s."
      ]
    },
    {
      "input": "\n\n\nWrite a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\n\n\nWrite a function to find the length of the longest palindromic subsequence in the given string.\ndef lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\n\n\nWrite a python function to find the sum of even factors of a number.\nimport math \ndef sumofFactors(n) : \n    if (n % 2!= 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\n\n\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \n\n\nWrite a function to check whether it follows the sequence given in the patterns array.\n ",
      "output": [
        "\n\n\nWrite a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\n\n\nWrite a function to find the length of the longest palindromic subsequence in the given string.\ndef lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\n\n\nWrite a python function to find the sum of even factors of a number.\nimport math \ndef sumofFactors(n) : \n    if (n % 2!= 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\n\n\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \n\n\nWrite a function to check whether it follows the sequence given in the patterns array.\n \ndef check_patterns(patterns):\n    for pattern in patterns:\n        pattern_copy = list(pattern)\n        res = 0\n        for i in range(len(pattern_copy)):\n            pattern_copy[i] = int(pattern_copy[i])\n            res = res + pattern_copy[i]\n        if res!= len(pattern):\n            return False\n    return True\n\nWrite a function to find the maximum sum of the squares of all numbers between 1 and n.\ndef max_square_num(n):\n    result = 0\n    for i in range(1, n+1):\n        result = max(result + i**2, i**2)\n    return result\n\n\nWrite a function to find the first occurrence of a substring in a given string.\ndef find_substring(str, substring):\n    return str.find(substring)\n\n\nWrite a function to find the character that appears the most in a given",
        "\n\n\nWrite a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\n\n\nWrite a function to find the length of the longest palindromic subsequence in the given string.\ndef lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\n\n\nWrite a python function to find the sum of even factors of a number.\nimport math \ndef sumofFactors(n) : \n    if (n % 2!= 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\n\n\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \n\n\nWrite a function to check whether it follows the sequence given in the patterns array.\n ~~~~~~~~~~~~~~~~~~~~~~\ndef check_seq(patterns, sequence):\n  for pattern in patterns:\n    for i in range(len(pattern)-1):\n      if sequence[i]!= pattern[i] and sequence[i+1]!= pattern[i]:\n        return False\n  return True\n\nWrite a function which finds the longest common prefix between two strings.\ndef longest_common_prefix(s1, s2): \n  if (s1 == ''):\n    return s2\n  if (s2 == ''):\n    return s1\n  i = 0\n  while (s1[i] == s2[i] and i < len(s1)):\n    i = i + 1\n  return s1[:i]\n\n\nWrite a function which returns all permutations of a given string.\ndef permute(s): \n  result = [] \n  def permute_helper(s, n, curr_result): \n    if (n == 0):",
        "\n\n\nWrite a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\n\n\nWrite a function to find the length of the longest palindromic subsequence in the given string.\ndef lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\n\n\nWrite a python function to find the sum of even factors of a number.\nimport math \ndef sumofFactors(n) : \n    if (n % 2!= 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\n\n\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \n\n\nWrite a function to check whether it follows the sequence given in the patterns array.\n \ndef check_pattern(patterns, string): \n  for i in patterns: \n    if not (string.startswith(i)): \n      return False \n  return True \n\n\nWrite a function to find the minimum number of operations needed to make all substrings palindrome.\ndef minimum_palindrome_length(string): \n  n = len(string) \n  prefix = string[:n//2] \n  suffix = string[n//2:] \n  return sum(1 for i in range(n) if string[i:n-i:2] == suffix[::-1]) + \\\n    sum(1 for i in range(n) if string[i:n-i:2] == prefix[::-1]) \n\n\nWrite a python function to find the sum of the squares of the elements in the given array.\ndef square_array(array): \n  result = 0 \n  for i in array: \n    result = result + i * i \n  return result \n\n\nWrite",
        "\n\n\nWrite a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\n\n\nWrite a function to find the length of the longest palindromic subsequence in the given string.\ndef lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\n\n\nWrite a python function to find the sum of even factors of a number.\nimport math \ndef sumofFactors(n) : \n    if (n % 2!= 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\n\n\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \n\n\nWrite a function to check whether it follows the sequence given in the patterns array.\n \u7ed9\u5b9a\u4e09\u4e2a\u6570\u7ec4arr1,arr2,arr3,arr4\uff1a\narr1=[1,2,3]\narr2=[4,5,6]\narr3=[7,8,9]\narr4=[10,11,12]\narr5=[13,14,15]\npattern=[3,5]\n\u68c0\u67e5arr1,arr2,arr3,arr4\u662f\u5426\u6ee1\u8db3pattern\u3002\n\ndef check(arr1, arr2, arr3, arr4, pattern):\n    res = []\n    for i in range(len(pattern)):\n        if arr1[i]!= pattern[i]:\n            res.append('False')\n        else:\n            res.append('True')\n    if res == ['True','True','True']:\n        return True\n    else:\n        return False\n\n\nWrite a python function to find the longest common substring between two given strings.\ndef longest_",
        "\n\n\nWrite a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\n\n\nWrite a function to find the length of the longest palindromic subsequence in the given string.\ndef lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\n\n\nWrite a python function to find the sum of even factors of a number.\nimport math \ndef sumofFactors(n) : \n    if (n % 2!= 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\n\n\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \n\n\nWrite a function to check whether it follows the sequence given in the patterns array.\n 1. patterns[0] is a list of characters.\n 2. patterns[1] is a list of characters.\n 3. patterns[2] is a list of characters.\ndef follow_sequence(sequence, patterns): \n    if (len(sequence) < len(patterns[0])) : \n        return False\n    for i in range(len(patterns[0])): \n        if (sequence[i]!= patterns[0][i]) : \n            return False\n    if (len(patterns[1]) > len(patterns[0])) : \n        return False\n    for j in range(len(patterns[1])): \n        if (sequence[len(patterns[0])-len(patterns[1]) + j]!= patterns[1][j]) : \n            return False\n    if (len(patterns[2]) > len(patterns[1])) : \n        return False\n    for k in range(len(patterns[2])): \n        if (sequence[len("
      ]
    },
    {
      "input": "\n\n\nWrite a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\n\n\nWrite a function to determine if the sum of the divisors of two integers are the same.\nimport math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \n\n\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\ndef reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\n\n\nWrite a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\n\n\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n ",
      "output": [
        "\n\n\nWrite a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\n\n\nWrite a function to determine if the sum of the divisors of two integers are the same.\nimport math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \n\n\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\ndef reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\n\n\nWrite a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\n\n\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n \ndef find_divisible(list, k): \n    result = []\n    for a in list:\n        if a[1] % k == 0 and all([i % k == 0 for i in a]):\n            result.append(a)\n    return result\n\n\nWrite a function to find the first set of elements that are substrings of the given string.\ndef find_substring(string, sub_string):\n    result = []\n    for i in range(len(string)):\n        left = string[:i]\n        right = string[i+len(sub_string):]\n        if left == sub_string and right == sub_string:\n            result.append(left)\n    return result\n\n\nWrite a python function to find if the given string is a palindrome or not.\ndef is_palindrome(str1):\n    if len(str1) == 0:\n        return True\n    str1 = str1.lower()\n   ",
        "\n\n\nWrite a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\n\n\nWrite a function to determine if the sum of the divisors of two integers are the same.\nimport math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \n\n\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\ndef reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\n\n\nWrite a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\n\n\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n \ndef divisible_tuples(tuples, k): \n    for i in tuples: \n        if i[0] % k == 0 or i[1] % k == 0 or i[2] % k == 0: \n            return True \n    return False\n\n\nWrite a function to find the largest product of three numbers.\ndef largest_product(a, b, c): \n    if a > b: \n        if a > c: \n            return a*b*c \n        else: \n            return a*b*c \n    elif b > c: \n        return a*b*c \n    else: \n        return a*b*c \n\n\nWrite a function to find the smallest integer n such that n^3 + n^2 + n + 1 has the form 6^3 + 3^2 + 2^1 + 1 = 121.\ndef smallest_prime(num): \n    if (num >= 2): \n       ",
        "\n\n\nWrite a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\n\n\nWrite a function to determine if the sum of the divisors of two integers are the same.\nimport math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \n\n\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\ndef reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\n\n\nWrite a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\n\n\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n \ndef find_tuples(tuples, k): \n    return [x for x in tuples if all(y % k == 0 for y in x)]\n\n\nWrite a function that takes an array of integers and divides all the elements by a given number and returns the resulting array.\ndef divide_by_k(arr, k): \n    return [x for x in arr if x % k == 0]\n\n\nWrite a function, which will return the number of tuples in the array, whose elements are in the range [min, max]. \ndef find_tuples_in_range(arr, min, max):\n    result = 0\n    for x in arr:\n        if min <= x <= max:\n            result += 1\n    return result\n\n\nWrite a function that takes in an array of integers and returns the sum of all the elements in the array except the last one.\ndef sum_except_last(arr):\n    return sum",
        "\n\n\nWrite a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\n\n\nWrite a function to determine if the sum of the divisors of two integers are the same.\nimport math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \n\n\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\ndef reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\n\n\nWrite a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\n\n\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n ~~~\ndef tuple_divisible_by_k(tuples, k): \n    result_list = []\n    for i in tuples:\n        if i[0] % k == 0 and i[1] % k == 0: \n            result_list.append(i)\n    return result_list\n\nWrite a function to find the sum of the squares of all the numbers in the given list. \ndef sum_of_squares(nums): \n    sum = 0 \n    for i in nums: \n        sum += i*i \n    return sum \n\n\nWrite a function to return the highest number from a given list.\ndef highest_number(nums): \n    return max(nums) \n\n\nWrite a function to return the smallest number from a given list.\ndef lowest_number(nums): \n    return min(nums) \n\n\nWrite a function to find the sum of the squares of the first n natural numbers.\ndef square_sum(n",
        "\n\n\nWrite a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\n\n\nWrite a function to determine if the sum of the divisors of two integers are the same.\nimport math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \n\n\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\ndef reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\n\n\nWrite a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\n\n\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n  def divisibleByK(lst, k): \n    n = len(lst)\n    res = []\n    for i in range(n): \n        for j in range(i+1, n): \n            if lst[i] % k == 0: \n                if lst[j] % k == 0: \n                    res.append((lst[i], lst[j])) \n    return res\n\n\nWrite a function to find the smallest positive integer divisible by all the given numbers.\ndef smallest_positive_divisible(nums): \n    n = len(nums)\n    for i in range(n): \n        for j in range(i+1, n): \n            if nums[i] % nums[j] == 0: \n                return min(nums[i], nums[j])\n \n\nWrite a function to find all integers in a range [m, n] which are no more than k divisors of a given number.\ndef divisors("
      ]
    },
    {
      "input": "\n\n\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\n\n\nWrite a function to sort a list of tuples using the second value of each tuple.\ndef subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\n\n\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\n\n\nWrite a function to find words that are longer than n characters from a given list of words.\ndef long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\n\n\nWrite a python function to find whether a number is divisible by 11.\n ",
      "output": [
        "\n\n\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\n\n\nWrite a function to sort a list of tuples using the second value of each tuple.\ndef subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\n\n\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\n\n\nWrite a function to find words that are longer than n characters from a given list of words.\ndef long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\n\n\nWrite a python function to find whether a number is divisible by 11.\n ################################################################################\ndef divisible_by_11(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n################################################################################\n",
        "\n\n\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\n\n\nWrite a function to sort a list of tuples using the second value of each tuple.\ndef subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\n\n\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\n\n\nWrite a function to find words that are longer than n characters from a given list of words.\ndef long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\n\n\nWrite a python function to find whether a number is divisible by 11.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef is_divisible_by_11(num):\n    return num % 11 == 0\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a python function to find the sum of all the numbers in a given list (starting from 0).\ndef sum_of_numbers(lst):\n    return sum(lst)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a python function to find the sum of the digits in a given number.\ndef sum_of_digits(num):\n    return sum(map(int,str(num)))\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a python function to find numbers divisible by 3 and 5.\ndef find_divisible_by_3_and_5(lst):\n    return [i for i,_ in enumerate(lst) if i%3 == 0 or i%5 == 0 ]\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWrite a python function to find the difference between ",
        "\n\n\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\n\n\nWrite a function to sort a list of tuples using the second value of each tuple.\ndef subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\n\n\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\n\n\nWrite a function to find words that are longer than n characters from a given list of words.\ndef long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\n\n\nWrite a python function to find whether a number is divisible by 11.\n ################################################################################\ndef is_divisible_by_11(num):\n    return num % 11 == 0\n\n#Write a python function to find whether a number is divisible by 13.\ndef is_divisible_by_13(num):\n    return num % 13 == 0\n\n#Write a python function to find whether a number is divisible by 17.\ndef is_divisible_by_17(num):\n    return num % 17 == 0\n\n#Write a python function to find whether a number is divisible by 19.\ndef is_divisible_by_19(num):\n    return num % 19 == 0\n\n\n\nWrite a python function to find whether a number is divisible by 21.\ndef is_divisible_by_21(num):\n    return num % 21 == 0\ndef is_",
        "\n\n\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\n\n\nWrite a function to sort a list of tuples using the second value of each tuple.\ndef subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\n\n\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\n\n\nWrite a function to find words that are longer than n characters from a given list of words.\ndef long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\n\n\nWrite a python function to find whether a number is divisible by 11.\n ##################################################################################\ndef is_divisible_by_11(n): \n  if n % 11 == 0:\n    return True \n  else:\n    return False\n\n\nWrite a function that takes a number and returns True if it is greater than 7 and less than 23. Otherwise returns False.\ndef is_between(num):\n  if num > 7 and num < 23:\n    return True\n  else:\n    return False\n\n\nWrite a function that takes a number as its argument and returns True if the number is a perfect square number. Otherwise returns False.\ndef is_perfect_square(num):\n  if num > 0 and num ** 2 == num:\n    return True\n  else:\n    return False\n\n\nWrite a function that takes a string as its argument and returns a new string where all the vowels in the string have been removed.\ndef strip_vowels(str):\n  list_of_",
        "\n\n\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\n\n\nWrite a function to sort a list of tuples using the second value of each tuple.\ndef subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\n\n\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\n\n\nWrite a function to find words that are longer than n characters from a given list of words.\ndef long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\n\n\nWrite a python function to find whether a number is divisible by 11.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef divisible_by_11(n):\n  return not n % 11\n\nWrite a python function to find whether a number is divisible by 15.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef divisible_by_15(n):\n  return not n % 15\n\nWrite a python function to find whether a number is divisible by 5 and 13.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef divisible_by_5_13(n):\n  return not (n % 5) and not (n % 13)\n\nWrite a python function to find the sum of all the even numbers from 1 to n.\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndef sum_from_1_to_n(n):\n  sum = 0\n  for i in range(n):\n    if i % 2 == 0:\n      sum += i\n  return sum\n\nWrite a function that will take a"
      ]
    },
    {
      "input": "\n\n\nWrite a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \n\n\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\n\n\nWrite a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \n\n\nWrite a function to check if the given number is woodball or not.\ndef is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\n\n\nWrite a python function to check whether the length of the word is odd or not.\n ",
      "output": [
        "\n\n\nWrite a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \n\n\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\n\n\nWrite a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \n\n\nWrite a function to check if the given number is woodball or not.\ndef is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\n\n\nWrite a python function to check whether the length of the word is odd or not.\n \ndef is_odd(word): \n    return word.count(\"o\") % 2 == 1 \n\n\nWrite a python function to take input as a string and return the reversed string.\ndef reverse_word(word):\n    return \"\".join(reversed(word)) \n\n\nWrite a python function to reverse words from the given string.\n\ndef reverse_words(word): \n    return \" \".join(reversed(word.split())) \n\n\nWrite a python function to calculate the n-th fibonacci number.\ndef fibonacci(n): \n    if (n == 0 or n == 1): \n        return n \n    else: \n        return fibonacci(n-1) + fibonacci(n-2) \n\n\nWrite a python function to find the smallest positive number that is evenly divisible by all of the given numbers.\ndef smallest_positive_multiple(numbers): \n    ans = numbers[0] \n    for num in numbers: \n        ans",
        "\n\n\nWrite a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \n\n\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\n\n\nWrite a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \n\n\nWrite a function to check if the given number is woodball or not.\ndef is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\n\n\nWrite a python function to check whether the length of the word is odd or not.\n 1 = False\n 0 = True\ndef is_odd_or_even(x): \n\tif (x % 2 == 1): \n\t\treturn False\n\telse: \n\t\treturn True \n\n\nWrite a python function to find the sum of all the numbers of 1s in a given range.\ndef sum_1s(n): \n    sum = 0 \n    for i in range(n): \n        if 1 == (i & 1): \n            sum = sum + i \n    return sum \n\n\nWrite a function to find the minimum value in a given list.\ndef minimum_value(lst): \n    if (len(lst) == 0): \n        return 0 \n    else: \n        return min(lst)\n\n\nWrite a python function to check if a given string contains the given character.\ndef is_char_present(s,c): \n    flag = False\n    for i in s: \n        if c == i",
        "\n\n\nWrite a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \n\n\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\n\n\nWrite a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \n\n\nWrite a function to check if the given number is woodball or not.\ndef is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\n\n\nWrite a python function to check whether the length of the word is odd or not.\n \ndef is_odd_len(str): \n\tif (len(str) % 2!= 0): \n\t\treturn True \n\telse: \n\t\treturn False \n\n\nWrite a python function to check whether the length of the word is even or not.\n\ndef is_even_len(str): \n\tif (len(str) % 2 == 0): \n\t\treturn True \n\telse: \n\t\treturn False \n\n\nWrite a python function to check whether the length of the word is one or not.\n\ndef is_one_len(str): \n\tif (len(str) == 1): \n\t\treturn True \n\telse: \n\t\treturn False \n\n\nWrite a python function to check whether the length of the word is zero or not.\n\ndef is_zero_len(str): \n\tif (len(str) == 0): \n\t\treturn True \n\telse: \n\t\t",
        "\n\n\nWrite a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \n\n\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\n\n\nWrite a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \n\n\nWrite a function to check if the given number is woodball or not.\ndef is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\n\n\nWrite a python function to check whether the length of the word is odd or not.\n \ndef is_word_odd(word): \n    length = len(word) \n    if (length % 2 == 0): \n        return True \n    else: \n        return False \n\n\nWrite a python function to return the index of the string that contains the given substring.\ndef find_substring(string,substring): \n    index = 0 \n    for i in range(len(string)-1,0): \n        if (string[i] in substring): \n            index = i \n            break \n    return index\n\n\nWrite a python function to check whether the given string has duplicates or not.\ndef has_duplicates(string): \n    set_string = set(string) \n    return len(set_string)!= len(string) \n\n\nWrite a python function to check whether the given string is palindrome or not.\ndef is_palindrome(string): \n    return string == string[::-1] \n\n\nWrite a python function to check whether the given string is a",
        "\n\n\nWrite a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \n\n\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\n\n\nWrite a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \n\n\nWrite a function to check if the given number is woodball or not.\ndef is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\n\n\nWrite a python function to check whether the length of the word is odd or not.\n \ndef is_odd_length(word): \n    n = len(word)\n    if (n % 2 == 1): \n        return False\n    else: \n        return True\n\n\nWrite a python function to find the nth fibonacci number.\ndef fibonacci(n): \n    a, b = 0, 1 \n    for i in range(n): \n        c = a + b \n        a = b \n        b = c \n    return b \n\n\nWrite a python function to find the sum of all even numbers from 1 to n.\ndef sum_of_even(n): \n    sum = 0 \n    for i in range(2, n + 1): \n        if (i % 2 == 0): \n            sum = sum + i \n    return sum \n\n\nWrite a python function to find the sum of all odd numbers from 1 to n.\ndef sum_of_odd(n): \n    sum = 0 \n    for i in"
      ]
    },
    {
      "input": "\n\n\nWrite a function to find the volume of a cone.\nimport math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\n\n\nWrite a python function to find the product of the array multiplication modulo n.\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \n\n\nWrite a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\n\n\nWrite a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\n\n\nWrite a function to find the nth tetrahedral number.\n ",
      "output": [
        "\n\n\nWrite a function to find the volume of a cone.\nimport math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\n\n\nWrite a python function to find the product of the array multiplication modulo n.\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \n\n\nWrite a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\n\n\nWrite a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\n\n\nWrite a function to find the nth tetrahedral number.\n 1.0 = 1\n 1.1 = 2\n 2.0 = 4\n 2.1 = 8\n 3.0 = 12\n 3.1 = 24\n 4.0 = 48\n 4.1 = 96\n 5.0 = 192\n 5.1 = 384\n 6.0 = 768\n 6.1 = 1536\n 7.0 = 3072\n 7.1 = 6144\n 8.0 = 12288\n 8.1 = 24576\n 9.0 = 49152\n 9.1 = 98304\n10.0 = 196608\n\n\nWrite an efficient function to find the n",
        "\n\n\nWrite a function to find the volume of a cone.\nimport math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\n\n\nWrite a python function to find the product of the array multiplication modulo n.\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \n\n\nWrite a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\n\n\nWrite a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\n\n\nWrite a function to find the nth tetrahedral number.\n 1974 is the first tetrahedral number to have seven successive prime factors\n819 is the first tetrahedral number to have eight successive prime factors\n1001 is the first tetrahedral number to have ten successive prime factors\n\ndef nth_tetrah(n):\n if (n < 0): \n \treturn -1\n if (n > 10 ** 7): \n \treturn -1\n for i in range(n): \n \ta = 1\n \tb = 2\n \tc = 1\n \td = 1\n \twhile (b!= 1): \n \t\ta = a*c\n \t\td = d*b\n \t\tb = b*c\n \t\tc = c+1\n \tif (d == 1): \n \t\treturn i\n \tif (d > 1): \n \t\treturn -1\n return",
        "\n\n\nWrite a function to find the volume of a cone.\nimport math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\n\n\nWrite a python function to find the product of the array multiplication modulo n.\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \n\n\nWrite a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\n\n\nWrite a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\n\n\nWrite a function to find the nth tetrahedral number.\n  n = 42\ndef nth_tetrahedral_number(n):\n\ttetrahedrals = [1, 2, 3]\n\tfor i in range(n):\n\t\ttetrahedrals.append(tetrahedrals[i] + tetrahedrals[i+1] + tetrahedrals[i+2] + tetrahedrals[i+3])\n\treturn tetrahedrals[-1]\n\n\nWrite the code to find all primes less than a non-negative number, n.\ndef prime_factors(n):\n\tprimes = [2]\n\tfor i in range(3,int(math.sqrt(n))+1,2):\n\t\tif (n % i == 0):\n\t\t\tprimes.append(i)\n\t\t\tn = n / i\n\tif (n > 2):\n\t\tprimes.append",
        "\n\n\nWrite a function to find the volume of a cone.\nimport math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\n\n\nWrite a python function to find the product of the array multiplication modulo n.\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \n\n\nWrite a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\n\n\nWrite a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\n\n\nWrite a function to find the nth tetrahedral number.\n  Write a function to find the nth fibonacci number.\n def fibonacci(n):\n a, b, c, d = 0, 1, 1, 0\n if n < 0:\n return -1\n for i in range(n-1):\n a, b, c, d = b, c, d, a + b\n return d\n\n\nWrite a function to find the first odd integer greater than n.\ndef find_first_odd_integer(n): \n\treturn 1 + (n-1) % (n+1)\n \n\nWrite a function to find the first even integer greater than n.\ndef find_first_even_integer(n): \n\treturn 2 + (n-1) % (n+1)\n \n\nWrite a function to find the first prime number greater than n.\ndef find_first_prime_number(n): \n\tif n <=",
        "\n\n\nWrite a function to find the volume of a cone.\nimport math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\n\n\nWrite a python function to find the product of the array multiplication modulo n.\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \n\n\nWrite a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\n\n\nWrite a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\n\n\nWrite a function to find the nth tetrahedral number.\n 1 2 3 4 5\n1 4 8 13 21\n1 7 16 25 39\n1 11 18 27 41\n1 15 24 31 43\n2 3 6 9 12 15\n2 4 8 13 21 25\n2 7 16 25 39 31\n2 11 18 27 41 43\n2 15 24 31 43 47\n3 5 9 14 17 20\n3 8 12 16 19 23\n3 11 14 17 20 26\n3 14 17 20"
      ]
    },
    {
      "input": "\n\n\nWrite a function to remove lowercase substrings from a given string.\nimport re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\n\n\nWrite a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \n\n\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\n\n\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef find(n,m):  \n    q = n//m \n    return (q)\n\n\nWrite a function to find the volume of a sphere.\n ",
      "output": [
        "\n\n\nWrite a function to remove lowercase substrings from a given string.\nimport re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\n\n\nWrite a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \n\n\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\n\n\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef find(n,m):  \n    q = n//m \n    return (q)\n\n\nWrite a function to find the volume of a sphere.\n \u03c0 r^2 = \u03c0 r \u03b8 \u03b8^2. \n\nWrite a python function to find a list of all prime factors of a number.\nimport itertools       \ndef prime_factors(n):\n    return [x for x in range(2, n) if n % x == 0]\n",
        "\n\n\nWrite a function to remove lowercase substrings from a given string.\nimport re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\n\n\nWrite a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \n\n\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\n\n\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef find(n,m):  \n    q = n//m \n    return (q)\n\n\nWrite a function to find the volume of a sphere.\n 1. Use a class to represent the volume of a sphere.\n 2. Use a function to return the volume of a sphere.\n\"\"\"\n\n\ndef area(a, b, c):\n    # Write your code here.\n    s = (a+b+c)/2\n    sqa = s**2\n    sqr = s*s\n    return (sqa - sqr)\n\n\ndef volume_sphere(r):\n    # Write your code here.\n    volume = 4/3 * math.pi * r**3\n    return volume\n\n\ndef volume_sphere_2(r):\n    # Write your code here.\n    surface = 4 * math.pi * r**2\n    volume = surface*math.pi**2\n    return volume\n",
        "\n\n\nWrite a function to remove lowercase substrings from a given string.\nimport re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\n\n\nWrite a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \n\n\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\n\n\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef find(n,m):  \n    q = n//m \n    return (q)\n\n\nWrite a function to find the volume of a sphere.\n \u03c0 * r * r * r = \u03c0 * 4 * 3.14 * r^3 \ndef volume(radius): \n    return 4*3.14*radius*radius*radius\n\n\nWrite a function to convert an angle in degrees to radians.\ndef degrees2Radians(degrees): \n    return (math.pi * degrees/180)\n\n\nWrite a function to convert a radius in meters to centimeters.\ndef radius2Cm(radius): \n    return (radius*100)\n\n\nWrite a python function to find the area of a triangle whose base and height are given as input.\ndef TriangleArea(base, height): \n    return (base*height)/2 \n\n\nWrite a python function to find the perimeter of a rectangle whose width and height are given as input.\ndef RectanglePerimeter(width, height): \n    return width + height\n\n\nWrite a python function to find the area of",
        "\n\n\nWrite a function to remove lowercase substrings from a given string.\nimport re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\n\n\nWrite a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \n\n\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\n\n\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef find(n,m):  \n    q = n//m \n    return (q)\n\n\nWrite a function to find the volume of a sphere.\n 3d space is used to represent the volume of a sphere.\ndef volume(radius):\n    return (4/3)*3.14*radius*radius*radius;\n\n\nWrite a python function to find the surface area of a cube.\ndef surface_area(h, w, l):\n    return (w*h*l)\n\n\nWrite a python function to find the volume of a cylinder.\n def volume(radius, height):\n    return (radius*height)*3.14;\n\n\nWrite a python function to find the volume of a cone.\n def volume(radius, height):\n    return (radius*height)*3.14*radius*radius;\n\n\nWrite a python function to find the volume of a paraboloid.\n def volume(base, height):\n    return (base*height)\n\n\nWrite a python function to find the volume of a equilateral triangle.\n def volume(side):",
        "\n\n\nWrite a function to remove lowercase substrings from a given string.\nimport re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\n\n\nWrite a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \n\n\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\n\n\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef find(n,m):  \n    q = n//m \n    return (q)\n\n\nWrite a function to find the volume of a sphere.\n \u03c02 = 6.3781388\nvol = \u03c02 * (4/3) * \u03c02\n\nWrite a function to find the volume of a cylinder.\n\u03c02 = 6.3781388\nvol = \u03c02 * (4/3) * \u03c02 * r\n\nWrite a function to find the area of a sphere.\n\u03c02 = 6.3781388\nvol = \u03c02 * (4/3) * \u03c02\nr = 2\nvol = vol * r^2\n\nWrite a function to find the area of a cylinder.\n\u03c02 = 6.3781388\nvol = \u03c02 * (4/3) * \u03c02 * r\nr = 2\nvol = vol * r^2\n\nWrite a Python function to compute the surface of a"
      ]
    }
  ]
}