{"task": "mbbp", "input": "Write a python function to find the first repeated character in a given string.", "output": "def first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c", "options": []}
{"task": "mbbp", "input": "Write a function to get all lucid numbers smaller than or equal to a given integer.", "output": "def get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics", "options": []}
{"task": "mbbp", "input": "Write a function to reverse words seperated by spaces in a given string.", "output": "def reverse_words(s):\n        return ' '.join(reversed(s.split()))", "options": []}
{"task": "mbbp", "input": "Write a function to check if the given integer is a prime number.", "output": "def prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False", "options": []}
{"task": "mbbp", "input": "Write a function to convert degrees to radians.", "output": "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian", "options": []}
{"task": "mbbp", "input": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.", "output": "import re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)", "options": []}
{"task": "mbbp", "input": "Write a python function to find nth bell number.", "output": "def bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] ", "options": []}
{"task": "mbbp", "input": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.", "output": "def remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]", "options": []}
{"task": "mbbp", "input": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.", "output": "def max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.", "output": "def merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] ", "options": []}
{"task": "mbbp", "input": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "output": "def cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)", "options": []}
{"task": "mbbp", "input": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.", "output": "def average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result", "options": []}
{"task": "mbbp", "input": "Write a function which takes two tuples of the same length and performs the element wise modulo.", "output": "def tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "output": "def min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2", "options": []}
{"task": "mbbp", "input": "Write a function to divide two lists element wise.", "output": "def div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)", "options": []}
{"task": "mbbp", "input": "Write a function to move all the numbers to the end of the given string.", "output": "def move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.", "output": "def largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)", "options": []}
{"task": "mbbp", "input": "Write a function to find the median of two sorted lists of same size.", "output": "def get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2", "options": []}
{"task": "mbbp", "input": "Write a function to compute the n-th power of each number in a list.", "output": "def nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums", "options": []}
{"task": "mbbp", "input": "Write a python function to convert a given string to uppercase.", "output": "def is_upper(string):\n  return (string.upper())", "options": []}
{"task": "mbbp", "input": "Write a python function to interchange the first and last element in a given list.", "output": "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList ", "options": []}
{"task": "mbbp", "input": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.", "output": "def triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r ", "options": []}
{"task": "mbbp", "input": "Write a python function to find the smallest missing number from a sorted list of natural numbers.", "output": "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) ", "options": []}
{"task": "mbbp", "input": "Write a function to replace all spaces in the given string with '%20'.", "output": "def replace_spaces(string):\n  return string.replace(\" \", \"%20\")", "options": []}
{"task": "mbbp", "input": "Write a python function to find even numbers from a list of numbers.", "output": "def Split(list): \n    return [num for num in list if num % 2 == 0]", "options": []}
{"task": "mbbp", "input": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "output": "def adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))", "options": []}
{"task": "mbbp", "input": "Write a function to replace whitespaces with an underscore and vice versa in a given string.", "output": "def replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)", "options": []}
{"task": "mbbp", "input": "Write a python function to move all zeroes to the end of the given list.", "output": "def move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a", "options": []}
{"task": "mbbp", "input": "Write a python function to find the sum of xor of all pairs of numbers in the given list.", "output": "def pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans ", "options": []}
{"task": "mbbp", "input": "Write a function to sort the given list.", "output": "import heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]", "options": []}
{"task": "mbbp", "input": "Write a function to check whether the given amount has no profit and no loss", "output": "def noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False", "options": []}
{"task": "mbbp", "input": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.", "output": "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))", "options": []}
{"task": "mbbp", "input": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "output": "def sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))", "options": []}
{"task": "mbbp", "input": "Write a function to remove the parenthesis and what is inbetween them from a string.", "output": "import re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))", "options": []}
{"task": "mbbp", "input": "Write a function to find the nth nonagonal number.", "output": "def is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) ", "options": []}
{"task": "mbbp", "input": "Write a function that checks if a strings contains 'z', except at the start and end of the word.", "output": "import re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))", "options": []}
{"task": "mbbp", "input": "Write a python function to reverse an array upto a given position.", "output": "def reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) ", "options": []}
{"task": "mbbp", "input": "Write a function to add a dictionary to the tuple. The output should be a tuple.", "output": "def add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) ", "options": []}
{"task": "mbbp", "input": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.", "output": "def maxAverageOfPath(cost):\n  N = len(cost)\n  dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j],\n                     dp[i][j - 1]) + cost[i][j]\n  return dp[N - 1][N - 1] / (2 * N - 1)", "options": []}
{"task": "mbbp", "input": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.", "output": "def filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    ", "options": []}
{"task": "mbbp", "input": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.", "output": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result", "options": []}
{"task": "mbbp", "input": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.", "output": "def power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])", "options": []}
{"task": "mbbp", "input": "Write a function to extract values between quotation marks \" \" of the given string.", "output": "import re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))", "options": []}
{"task": "mbbp", "input": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.", "output": "def multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].", "output": "def sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list", "options": []}
{"task": "mbbp", "input": "Write a function to remove consecutive duplicates of a given list.", "output": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] ", "options": []}
{"task": "mbbp", "input": "Write a function to find the lateral surface area of a cone given radius r and the height h.", "output": "import math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA", "options": []}
{"task": "mbbp", "input": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "output": "import re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n", "options": []}
{"task": "mbbp", "input": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "output": "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "options": []}
{"task": "mbbp", "input": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/", "output": "def sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)", "options": []}
{"task": "mbbp", "input": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/", "output": "def set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) ", "options": []}
{"task": "mbbp", "input": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php", "output": "import bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i", "options": []}
{"task": "mbbp", "input": "Write a function to check whether the given string is starting with a vowel or not using regex.", "output": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)", "options": []}
{"task": "mbbp", "input": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php", "output": "def geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)", "options": []}
{"task": "mbbp", "input": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/", "output": "import math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)", "options": []}
{"task": "mbbp", "input": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/", "output": "def tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a python function to check whether all the characters are same or not.", "output": "def all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True", "options": []}
{"task": "mbbp", "input": "Write a function to caluclate the area of a tetrahedron.", "output": "import math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area", "options": []}
{"task": "mbbp", "input": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/", "output": "def rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result", "options": []}
{"task": "mbbp", "input": "Write a function to check if the given tuple has any none value or not.", "output": "def check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res ", "options": []}
{"task": "mbbp", "input": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php", "output": "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "options": []}
{"task": "mbbp", "input": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.", "output": "import math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)", "options": []}
{"task": "mbbp", "input": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/", "output": "def lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]", "options": []}
{"task": "mbbp", "input": "Write a function to put spaces between words starting with capital letters in a given string.", "output": "import re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)", "options": []}
{"task": "mbbp", "input": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/", "output": "def sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result", "options": []}
{"task": "mbbp", "input": "Write a function to add the given tuple to the given list.", "output": "def add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list", "options": []}
{"task": "mbbp", "input": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/", "output": "def check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)", "options": []}
{"task": "mbbp", "input": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...", "output": "def jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]", "options": []}
{"task": "mbbp", "input": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases", "output": "def min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) ", "options": []}
{"task": "mbbp", "input": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.", "output": "def extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result", "options": []}
{"task": "mbbp", "input": "Write a function to find the second smallest number in a list.", "output": "def second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]", "options": []}
{"task": "mbbp", "input": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php", "output": "import re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "options": []}
{"task": "mbbp", "input": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/", "output": "def count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res", "options": []}
{"task": "mbbp", "input": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.", "output": "def unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result", "options": []}
{"task": "mbbp", "input": "Write a function to check whether a given string is a decimal number with a precision of 2.", "output": "def is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)", "options": []}
{"task": "mbbp", "input": "Write a python function to check whether a list of numbers contains only one distinct element or not.", "output": "def unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1", "options": []}
{"task": "mbbp", "input": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.", "output": "def check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11", "options": []}
{"task": "mbbp", "input": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/", "output": "def find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff ", "options": []}
{"task": "mbbp", "input": "Write a python function to count number of digits in a given string.", "output": "def number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr", "options": []}
{"task": "mbbp", "input": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/", "output": "import math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) ", "options": []}
{"task": "mbbp", "input": "Write a function to return a list of all pairs of consecutive items in a given list.", "output": "def pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp", "options": []}
{"task": "mbbp", "input": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,", "output": "def get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count", "options": []}
{"task": "mbbp", "input": "Write a python function to get the difference between two lists.", "output": "def Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n ", "options": []}
{"task": "mbbp", "input": "Write a python function to find the sum of fourth power of first n odd natural numbers.", "output": "def odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm ", "options": []}
{"task": "mbbp", "input": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/", "output": "from collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack", "options": []}
{"task": "mbbp", "input": "Write a function to remove all the words with k length in the given string.", "output": "def remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.", "output": "import re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)", "options": []}
{"task": "mbbp", "input": "Write a python function to check whether every odd index contains odd numbers of a given list.", "output": "def odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "options": []}
{"task": "mbbp", "input": "Write a function to count those characters which have vowels as their neighbors in the given string.", "output": "def count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a python function to find the sum of non-repeated elements in a given list.", "output": "def find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum", "options": []}
{"task": "mbbp", "input": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "output": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]", "options": []}
{"task": "mbbp", "input": "Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.", "output": "def unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result", "options": []}
{"task": "mbbp", "input": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/", "output": "from itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php", "output": "import math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0", "options": []}
{"task": "mbbp", "input": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/", "output": "def odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum", "options": []}
{"task": "mbbp", "input": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/", "output": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v", "options": []}
{"task": "mbbp", "input": "Write a function to find the product of first even and odd number of a given list.", "output": "def mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)", "options": []}
{"task": "mbbp", "input": "Write a function to convert tuple string to integer tuple.", "output": "def tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a function to locate the right insertion point for a specified value in sorted order.", "output": "import bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)", "options": []}
{"task": "mbbp", "input": "Write a function that matches a string that has an a followed by three 'b'.", "output": "import re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)", "options": []}
{"task": "mbbp", "input": "Write a function to create a new tuple from the given string and list.", "output": "def new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])", "options": []}
{"task": "mbbp", "input": "Write a python function to check whether every even index contains even numbers of a given list.", "output": "def even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "options": []}
{"task": "mbbp", "input": "Write a function to remove tuples from the given tuple.", "output": "def remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a python function to count the number of lists in a given number of lists.", "output": "def count_list(input_list): \n    return len(input_list)", "options": []}
{"task": "mbbp", "input": "Write a python function to find the last position of an element in a sorted array.", "output": "def last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res", "options": []}
{"task": "mbbp", "input": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "output": "import re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)", "options": []}
{"task": "mbbp", "input": "Write function to find the sum of all items in the given dictionary.", "output": "def return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum", "options": []}
{"task": "mbbp", "input": "Write a python function to find the sum of all odd natural numbers within the range l and r.", "output": "def sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)", "options": []}
{"task": "mbbp", "input": "Write a python function to find the sum of an array.", "output": "def _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  ", "options": []}
{"task": "mbbp", "input": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.", "output": "def left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  ", "options": []}
{"task": "mbbp", "input": "Write a function to remove all whitespaces from a string.", "output": "import re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))", "options": []}
{"task": "mbbp", "input": "Write a python function to count the number of equal numbers from three given integers.", "output": "def test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)", "options": []}
{"task": "mbbp", "input": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/", "output": "def count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0", "options": []}
{"task": "mbbp", "input": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/", "output": "def is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False", "options": []}
{"task": "mbbp", "input": "Write a function to check whether the product of numbers in a list is even or not.", "output": "def is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False", "options": []}
{"task": "mbbp", "input": "Write a function that returns the list in a list of lists whose sum of elements is the highest.", "output": "def max_sum_list(lists):\n return max(lists, key=sum)", "options": []}
{"task": "mbbp", "input": "Write a function to find maximum run of uppercase characters in the given string.", "output": "def max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)", "options": []}
{"task": "mbbp", "input": "Write a python function to find the first odd number in a given list of numbers.", "output": "def first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd", "options": []}
{"task": "mbbp", "input": "Write a function to check if the given tuples contain the k or not.", "output": "def check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res ", "options": []}
{"task": "mbbp", "input": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.", "output": "def check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))", "options": []}
