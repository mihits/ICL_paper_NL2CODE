{"task": "mbbp", "input": "Write a python function to remove first and last occurrence of a given character from the string.", "output": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ", "options": []}
{"task": "mbbp", "input": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "output": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "options": []}
{"task": "mbbp", "input": "Write a python function to find the volume of a triangular prism.", "output": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ", "options": []}
{"task": "mbbp", "input": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.", "output": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "options": []}
{"task": "mbbp", "input": "Write a function that returns the perimeter of a square given its side length as input.", "output": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter", "options": []}
{"task": "mbbp", "input": "Write a function to remove characters from the first string which are present in the second string.", "output": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ", "options": []}
{"task": "mbbp", "input": "Write a function to find whether a given array of integers contains any duplicate element.", "output": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ", "options": []}
{"task": "mbbp", "input": "Write a function to check if the given number is woodball or not.", "output": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False", "options": []}
{"task": "mbbp", "input": "Write a python function to check if a given number is one less than twice its reverse.", "output": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ", "options": []}
{"task": "mbbp", "input": "Write a python function to find the largest number that can be formed with the given list of digits.", "output": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ", "options": []}
{"task": "mbbp", "input": "Write a python function to check whether the given two integers have opposite sign or not.", "output": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ", "options": []}
{"task": "mbbp", "input": "Write a function to find the nth octagonal number.", "output": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ", "options": []}
{"task": "mbbp", "input": "Write a python function to count the number of substrings with the sum of digits equal to their length.", "output": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count", "options": []}
{"task": "mbbp", "input": "Write a python function to find smallest number in a list.", "output": "def smallest_num(xs):\n  return min(xs)\n", "options": []}
{"task": "mbbp", "input": "Write a function to find the maximum difference between available pairs in the given tuple list.", "output": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a function to sort a list of tuples using the second value of each tuple.", "output": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks", "options": []}
{"task": "mbbp", "input": "Write a function to flatten a list and sum all of its elements.", "output": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total", "options": []}
{"task": "mbbp", "input": "Write a python function to count the number of positive numbers in a list.", "output": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ", "options": []}
{"task": "mbbp", "input": "Write a function to find the number of ways to partition a set of Bell numbers.", "output": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ", "options": []}
{"task": "mbbp", "input": "Write a python function to check whether the given array is monotonic or not.", "output": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "options": []}
{"task": "mbbp", "input": "Write a function to check whether a list contains the given sublist or not.", "output": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set", "options": []}
{"task": "mbbp", "input": "Write a function to find whether all the given tuples have equal length or not.", "output": "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1", "options": []}
{"task": "mbbp", "input": "Write a function to sort a list of elements.", "output": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums", "options": []}
{"task": "mbbp", "input": "Write a python function to check whether the given number can be represented as the difference of two squares or not.", "output": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False", "options": []}
{"task": "mbbp", "input": "Write a function to check whether it follows the sequence given in the patterns array.", "output": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True", "options": []}
{"task": "mbbp", "input": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "output": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res", "options": []}
{"task": "mbbp", "input": "Write a python function to find whether a number is divisible by 11.", "output": "def is_Diff(n): \n    return (n % 11 == 0) ", "options": []}
{"task": "mbbp", "input": "Write a python function to check whether the length of the word is odd or not.", "output": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False", "options": []}
{"task": "mbbp", "input": "Write a function to find the nth tetrahedral number.", "output": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6", "options": []}
{"task": "mbbp", "input": "Write a function to find the volume of a sphere.", "output": "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume", "options": []}
{"task": "mbbp", "input": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.", "output": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)", "options": []}
{"task": "mbbp", "input": "Write a function to find the nth number in the newman conway sequence.", "output": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))", "options": []}
{"task": "mbbp", "input": "Write a function to find the surface area of a sphere.", "output": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea", "options": []}
{"task": "mbbp", "input": "Write a function to find nth centered hexagonal number.", "output": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1", "options": []}
{"task": "mbbp", "input": "Write a function to merge three dictionaries into a single dictionary.", "output": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict", "options": []}
{"task": "mbbp", "input": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.", "output": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count", "options": []}
{"task": "mbbp", "input": "Write a function to find the closest smaller number than n.", "output": "def closest_num(N):\n  return (N - 1)", "options": []}
{"task": "mbbp", "input": "Write a python function to find the length of the longest word.", "output": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max", "options": []}
{"task": "mbbp", "input": "Write a function to check if a string is present as a substring in a given list of string values.", "output": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False", "options": []}
{"task": "mbbp", "input": "Write a function to check whether the given number is undulating or not.", "output": "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True", "options": []}
{"task": "mbbp", "input": "Write a function to calculate the value of 'a' to the power 'b'.", "output": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)", "options": []}
{"task": "mbbp", "input": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.", "output": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a python function to find the length of the smallest list in a list of lists.", "output": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ", "options": []}
{"task": "mbbp", "input": "Write a python function to find the number of divisors of a given integer.", "output": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x", "options": []}
{"task": "mbbp", "input": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.", "output": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n", "options": []}
{"task": "mbbp", "input": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "output": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ", "options": []}
{"task": "mbbp", "input": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.", "output": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ", "options": []}
{"task": "mbbp", "input": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.", "output": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i", "options": []}
{"task": "mbbp", "input": "Write a function to find the kth element in the given array using 1-based indexing.", "output": "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]", "options": []}
{"task": "mbbp", "input": "Write a function to convert a snake case string to camel case string.", "output": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))", "options": []}
{"task": "mbbp", "input": "Write a function to find the Eulerian number a(n, m).", "output": "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))", "options": []}
{"task": "mbbp", "input": "Write a function to sort each sublist of strings in a given list of lists.", "output": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n", "options": []}
{"task": "mbbp", "input": "Write a python function to count true booleans in the given list.", "output": "def count(lst):   \n    return sum(lst) ", "options": []}
{"task": "mbbp", "input": "Write a function to append the given list to the given tuples.", "output": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a function to merge three lists into a single sorted list.", "output": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)", "options": []}
{"task": "mbbp", "input": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.", "output": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ", "options": []}
{"task": "mbbp", "input": "Write a function to find the common elements in given nested lists.", "output": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result", "options": []}
{"task": "mbbp", "input": "Write a function to check if a string represents an integer or not.", "output": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False", "options": []}
{"task": "mbbp", "input": "Write a function to check whether all dictionaries in a list are empty or not.", "output": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit", "options": []}
{"task": "mbbp", "input": "Write a function to convert a given tuple of positive integers into a single integer.", "output": "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result", "options": []}
{"task": "mbbp", "input": "Write a function to convert all possible convertible elements in a list of lists to floats.", "output": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res", "options": []}
{"task": "mbbp", "input": "Write a function to convert a string to a list of strings split on the space character.", "output": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst", "options": []}
{"task": "mbbp", "input": "Write a python function to find the element that appears only once in a sorted array.", "output": "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)", "options": []}
{"task": "mbbp", "input": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.", "output": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max", "options": []}
{"task": "mbbp", "input": "Write a function to sum all amicable numbers from 1 to a specified number.", "output": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)", "options": []}
{"task": "mbbp", "input": "Write a function to get the angle of a complex number.", "output": "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle", "options": []}
{"task": "mbbp", "input": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "output": "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0", "options": []}
{"task": "mbbp", "input": "Write a python function to find the sum of common divisors of two given numbers.", "output": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum", "options": []}
{"task": "mbbp", "input": "Write a function to multiply two integers.", "output": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)", "options": []}
{"task": "mbbp", "input": "Write a function to find words that are longer than n characters from a given list of words.", "output": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t", "options": []}
{"task": "mbbp", "input": "Write a function to calculate whether the matrix is a magic square.", "output": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True", "options": []}
{"task": "mbbp", "input": "Write a function to find the item with maximum frequency in a given list.", "output": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]", "options": []}
{"task": "mbbp", "input": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).", "output": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string", "options": []}
{"task": "mbbp", "input": "Write a function to convert a tuple to a string.", "output": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str", "options": []}
{"task": "mbbp", "input": "Write a function to calculate the sum of the negative numbers of a given list of numbers.", "output": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)", "options": []}
{"task": "mbbp", "input": "Write a function to find the nth hexagonal number.", "output": "def hexagonal_num(n): \n\treturn n*(2*n - 1) ", "options": []}
{"task": "mbbp", "input": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.", "output": "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)", "options": []}
{"task": "mbbp", "input": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "output": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True", "options": []}
{"task": "mbbp", "input": "Write a function to find the circumference of a circle.", "output": "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter", "options": []}
{"task": "mbbp", "input": "Write a function to flatten the list of lists into a single set of numbers.", "output": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a function to sort a list of elements.", "output": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums", "options": []}
{"task": "mbbp", "input": "Write a function to count number items that are identical in the same position of three given lists.", "output": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result", "options": []}
{"task": "mbbp", "input": "Write a function to find number of lists present in the given tuple.", "output": "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) ", "options": []}
{"task": "mbbp", "input": "Write a python function to find the maximum difference between any two elements in a given array.", "output": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ", "options": []}
{"task": "mbbp", "input": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.", "output": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None", "options": []}
{"task": "mbbp", "input": "Write a function to remove all elements from a given list present in another list.", "output": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result", "options": []}
{"task": "mbbp", "input": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).", "output": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)", "options": []}
{"task": "mbbp", "input": "Write a function to calculate the area of a regular polygon given the length and number of its sides.", "output": "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area", "options": []}
{"task": "mbbp", "input": "Write a function to determine if the sum of the divisors of two integers are the same.", "output": "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); ", "options": []}
{"task": "mbbp", "input": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).", "output": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ", "options": []}
{"task": "mbbp", "input": "Write a function that counts the number of pairs of integers in a list that xor to an even number.", "output": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count", "options": []}
{"task": "mbbp", "input": "Write a python function to find the smallest power of 2 greater than or equal to n.", "output": "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; ", "options": []}
{"task": "mbbp", "input": "Write a function to count the number of occurrences of a number in a given list.", "output": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ", "options": []}
{"task": "mbbp", "input": "Write a function to find the sum of numbers in a list within a range specified by two indices.", "output": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ", "options": []}
{"task": "mbbp", "input": "Write a function to find the perimeter of a regular pentagon from the length of its sides.", "output": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter", "options": []}
{"task": "mbbp", "input": "Write a function to count the number of occurence of the string 'std' in a given string.", "output": "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count", "options": []}
{"task": "mbbp", "input": "Write a function to check if all the elements in tuple have same data type or not.", "output": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)", "output": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1", "options": []}
{"task": "mbbp", "input": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.", "output": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ", "options": []}
{"task": "mbbp", "input": "Write a python function to remove the characters which have odd index values of a given string.", "output": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result", "options": []}
{"task": "mbbp", "input": "Write a function to find minimum of three numbers.", "output": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ", "options": []}
{"task": "mbbp", "input": "Write a python function to check whether all the bits are unset in the given range or not.", "output": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False", "options": []}
{"task": "mbbp", "input": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.", "output": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr", "options": []}
{"task": "mbbp", "input": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.", "output": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2", "options": []}
{"task": "mbbp", "input": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.", "output": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest", "options": []}
{"task": "mbbp", "input": "Write a function to find the lateral surface area of a cylinder.", "output": "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface", "options": []}
{"task": "mbbp", "input": "Write a function to find the volume of a cube given its side length.", "output": "def volume_cube(l):\n  volume = l * l * l\n  return volume", "options": []}
{"task": "mbbp", "input": "Write a python function to set all even bits of a given number.", "output": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ", "options": []}
{"task": "mbbp", "input": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.", "output": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ", "options": []}
{"task": "mbbp", "input": "Write a python function to count the number of non-empty substrings of a given string.", "output": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ", "options": []}
{"task": "mbbp", "input": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.", "output": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]", "options": []}
{"task": "mbbp", "input": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.", "output": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n", "options": []}
{"task": "mbbp", "input": "Write a function to count the total number of characters in a string.", "output": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total", "options": []}
{"task": "mbbp", "input": "Write a python function to find the next perfect square greater than a given number.", "output": "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ", "options": []}
{"task": "mbbp", "input": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.", "output": "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum", "options": []}
{"task": "mbbp", "input": "Write a function for computing square roots using the babylonian method.", "output": "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;", "options": []}
{"task": "mbbp", "input": "Write a function to find the length of the longest palindromic subsequence in the given string.", "output": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]", "options": []}
{"task": "mbbp", "input": "Write a function that takes in an integer n and calculates the harmonic sum of n-1.", "output": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) ", "options": []}
{"task": "mbbp", "input": "Write a function to find the intersection of two arrays.", "output": "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result", "options": []}
{"task": "mbbp", "input": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.", "output": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ", "options": []}
{"task": "mbbp", "input": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.", "output": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list", "options": []}
{"task": "mbbp", "input": "Write a python function to convert complex numbers to polar coordinates.", "output": "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) ", "options": []}
{"task": "mbbp", "input": "Write a python function that returns the number of integer elements in a given list.", "output": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr", "options": []}
{"task": "mbbp", "input": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.", "output": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n", "options": []}
{"task": "mbbp", "input": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.", "output": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr", "options": []}
{"task": "mbbp", "input": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.", "output": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)", "options": []}
{"task": "mbbp", "input": "Write a function to maximize the given two tuples.", "output": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.", "output": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)", "options": []}
{"task": "mbbp", "input": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.", "output": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.", "output": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]", "options": []}
{"task": "mbbp", "input": "Write a function to calculate a dog's age in dog's years.", "output": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age", "options": []}
{"task": "mbbp", "input": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.", "output": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]", "options": []}
{"task": "mbbp", "input": "Write a function to find the lateral surface area of a cube given its side length.", "output": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA", "options": []}
{"task": "mbbp", "input": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.", "output": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ", "options": []}
{"task": "mbbp", "input": "Write a function to find the n'th star number.", "output": "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) ", "options": []}
{"task": "mbbp", "input": "Write a function to find the ascii value of a character.", "output": "def ascii_value(k):\n  ch=k\n  return ord(ch)", "options": []}
{"task": "mbbp", "input": "Write a python function to find the sum of even numbers at even positions of a list.", "output": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum", "options": []}
{"task": "mbbp", "input": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.", "output": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ", "options": []}
{"task": "mbbp", "input": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.", "output": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.", "output": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.", "output": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ", "options": []}
{"task": "mbbp", "input": "Write a function that takes in the radius and height of a cylinder and returns the the volume.", "output": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume", "options": []}
{"task": "mbbp", "input": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.", "output": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result", "options": []}
{"task": "mbbp", "input": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.", "output": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) ", "options": []}
{"task": "mbbp", "input": "Write a function to find the nth decagonal number.", "output": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n ", "options": []}
{"task": "mbbp", "input": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).", "output": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos", "options": []}
{"task": "mbbp", "input": "Write a python function to check if the elements of a given list are unique or not.", "output": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True", "options": []}
{"task": "mbbp", "input": "Write a function to subtract two lists element-wise.", "output": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "options": []}
{"task": "mbbp", "input": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.", "output": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True", "options": []}
{"task": "mbbp", "input": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.", "output": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element", "options": []}
{"task": "mbbp", "input": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.", "output": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "options": []}
{"task": "mbbp", "input": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.", "output": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "options": []}
{"task": "mbbp", "input": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.", "output": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)", "options": []}
{"task": "mbbp", "input": "Write a function to find the list of maximum length in a list of lists.", "output": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)", "options": []}
{"task": "mbbp", "input": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "output": "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]", "options": []}
{"task": "mbbp", "input": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).", "output": "def find(n,m):  \n    q = n//m \n    return (q)", "options": []}
{"task": "mbbp", "input": "Write a function to find the third side of a right angled triangle.", "output": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s", "options": []}
{"task": "mbbp", "input": "Write a function to find the maximum value in a given heterogeneous list.", "output": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)", "options": []}
{"task": "mbbp", "input": "Write a function to return the sum of all divisors of a number.", "output": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)", "options": []}
{"task": "mbbp", "input": "Write a python function to count inversions in an array.", "output": "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ", "options": []}
{"task": "mbbp", "input": "Write a function to flatten a given nested list structure.", "output": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ", "options": []}
{"task": "mbbp", "input": "Write a function to calculate the maximum aggregate from the list of tuples.", "output": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])", "options": []}
{"task": "mbbp", "input": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "output": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res ", "options": []}
{"task": "mbbp", "input": "Write a function to find the depth of a dictionary.", "output": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0", "options": []}
{"task": "mbbp", "input": "Write a python function to find element at a given index after number of rotations.", "output": "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] ", "options": []}
{"task": "mbbp", "input": "Write a function to return two words from a list of words starting with letter 'p'.", "output": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()", "options": []}
{"task": "mbbp", "input": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .", "output": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]", "options": []}
{"task": "mbbp", "input": "Write a function to get a colon of a tuple.", "output": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon", "options": []}
{"task": "mbbp", "input": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.", "output": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result", "options": []}
{"task": "mbbp", "input": "Write a python function to find the maximum of two numbers.", "output": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ", "options": []}
{"task": "mbbp", "input": "Write a function to convert a given string to a tuple of characters.", "output": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result", "options": []}
{"task": "mbbp", "input": "Write a python function to set the left most unset bit.", "output": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) ", "options": []}
{"task": "mbbp", "input": "Write a function to find the volume of a cone.", "output": "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume", "options": []}
{"task": "mbbp", "input": "Write a python function to find the highest power of 2 that is less than or equal to n.", "output": "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res ", "options": []}
{"task": "mbbp", "input": "Write a function to find the n'th lucas number.", "output": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ", "options": []}
{"task": "mbbp", "input": "Write a function to apply a given format string to all of the elements in a list.", "output": "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string", "options": []}
{"task": "mbbp", "input": "Write a function to convert more than one list to nested dictionary.", "output": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result", "options": []}
{"task": "mbbp", "input": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "output": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]", "options": []}
{"task": "mbbp", "input": "Write a function to find the list with maximum length.", "output": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)", "options": []}
{"task": "mbbp", "input": "Write a function to check if given tuple contains no duplicates.", "output": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res ", "options": []}
{"task": "mbbp", "input": "Write a python function to find the first non-repeated character in a given string.", "output": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None", "options": []}
{"task": "mbbp", "input": "Write a function to check whether the given string starts and ends with the same character or not.", "output": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ", "options": []}
{"task": "mbbp", "input": "Write a function to find the median of three numbers.", "output": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median", "options": []}
{"task": "mbbp", "input": "Write a function to compute the sum of digits of each number of a given list.", "output": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "options": []}
{"task": "mbbp", "input": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "output": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a function to extract the number of unique tuples in the given list.", "output": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)", "options": []}
{"task": "mbbp", "input": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "output": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a python function to find the minimum of two numbers.", "output": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ", "options": []}
{"task": "mbbp", "input": "Write a function to check whether an element exists within a tuple.", "output": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False", "options": []}
{"task": "mbbp", "input": "Write a python function to find whether the parity of a given number is odd.", "output": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False", "options": []}
{"task": "mbbp", "input": "Write a function to create the next bigger number by rearranging the digits of a given number.", "output": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False", "options": []}
{"task": "mbbp", "input": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.", "output": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs", "options": []}
{"task": "mbbp", "input": "Write a function to find the minimum product from the pairs of tuples within a given list.", "output": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min", "options": []}
{"task": "mbbp", "input": "Write a function to find the minimum value in a given heterogeneous list.", "output": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val", "options": []}
{"task": "mbbp", "input": "Write a function to convert the given snake case string to camel case string.", "output": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))", "options": []}
{"task": "mbbp", "input": "Write a python function to remove odd numbers from a given list.", "output": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l", "options": []}
{"task": "mbbp", "input": "Write a function to extract the nth element from a given list of tuples.", "output": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result", "options": []}
{"task": "mbbp", "input": "Write a python function to check whether any value in a sequence exists in a sequence or not.", "output": "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False", "options": []}
{"task": "mbbp", "input": "Write a python function to find a pair with highest product from a given array of integers.", "output": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ", "options": []}
{"task": "mbbp", "input": "Write a function to find common first element in given list of tuple.", "output": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ", "options": []}
{"task": "mbbp", "input": "Write a python function to find the element of a list having maximum length.", "output": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList", "options": []}
{"task": "mbbp", "input": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "output": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum", "options": []}
{"task": "mbbp", "input": "Write a python function to find the cube sum of first n even natural numbers.", "output": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum", "options": []}
{"task": "mbbp", "input": "Write a function to concatenate each element of tuple by the delimiter.", "output": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ", "options": []}
{"task": "mbbp", "input": "Write a python function to find the average of cubes of first n natural numbers.", "output": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ", "options": []}
{"task": "mbbp", "input": "Write a function to extract only the rear index element of each string in the given tuple.", "output": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a function to count the number of sublists containing a particular element.", "output": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr", "options": []}
{"task": "mbbp", "input": "Write a function to filter odd numbers.", "output": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums", "options": []}
{"task": "mbbp", "input": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "output": "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)", "options": []}
{"task": "mbbp", "input": "Write a function to sort the given array by using shell sort.", "output": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list", "options": []}
{"task": "mbbp", "input": "Write a function to extract the elementwise and tuples from the given two tuples.", "output": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a function to find the directrix of a parabola.", "output": "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix", "options": []}
{"task": "mbbp", "input": "Write a function that takes two lists and returns true if they have at least one common element.", "output": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result", "options": []}
{"task": "mbbp", "input": "Write a function to find the median length of a trapezium.", "output": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median", "options": []}
{"task": "mbbp", "input": "Write a function to check whether the entered number is greater than the elements of the given array.", "output": "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]", "options": []}
{"task": "mbbp", "input": "Write a function that matches a string that has an a followed by one or more b's.", "output": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n", "options": []}
{"task": "mbbp", "input": "Write a python function to find the last digit of a given number.", "output": "def last_Digit(n) :\n    return (n % 10) ", "options": []}
{"task": "mbbp", "input": "Write a python function to return the negative numbers in a list.", "output": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ", "options": []}
{"task": "mbbp", "input": "Write a function to remove odd characters in a string.", "output": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2", "options": []}
{"task": "mbbp", "input": "Write a function to count bidirectional tuple pairs.", "output": "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res", "options": []}
{"task": "mbbp", "input": "Write a function to join a list of multiple integers into a single integer.", "output": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x", "options": []}
{"task": "mbbp", "input": "Write a function to find the first adverb and their positions in a given sentence.", "output": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))", "options": []}
{"task": "mbbp", "input": "Write a function to find the surface area of a cube of a given size.", "output": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea", "options": []}
{"task": "mbbp", "input": "Write a function to find the ration of positive numbers in an array of integers.", "output": "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)", "options": []}
{"task": "mbbp", "input": "Write a python function to find the largest negative number from the given list.", "output": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max", "options": []}
{"task": "mbbp", "input": "Write a function to trim each tuple by k in the given tuple list.", "output": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ", "options": []}
{"task": "mbbp", "input": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "output": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a python function to count the occurence of all elements of list in a tuple.", "output": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ", "options": []}
{"task": "mbbp", "input": "Write a function to find cubes of individual elements in a list.", "output": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums", "options": []}
{"task": "mbbp", "input": "Write a function to calculate the sum of perrin numbers.", "output": "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum", "options": []}
{"task": "mbbp", "input": "Write a function to extract specified size of strings from a given list of string values.", "output": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result", "options": []}
{"task": "mbbp", "input": "Write a function to remove all whitespaces from the given string.", "output": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))", "options": []}
{"task": "mbbp", "input": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.", "output": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0", "options": []}
{"task": "mbbp", "input": "Write a python function to find the sum of even factors of a number.", "output": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res", "options": []}
{"task": "mbbp", "input": "Write a function that matches a word containing 'z'.", "output": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "options": []}
{"task": "mbbp", "input": "Write a function to check whether the given month number contains 31 days or not.", "output": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False", "options": []}
{"task": "mbbp", "input": "Write a function to reverse each string in a given list of string values.", "output": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result", "options": []}
{"task": "mbbp", "input": "Write a python function to find the sublist having minimum length.", "output": "def Find_Min(lst): \n    return min(lst, key=len) ", "options": []}
{"task": "mbbp", "input": "Write a function to find the area of a rectangle.", "output": "def rectangle_area(l,b):\n  area=l*b\n  return area", "options": []}
{"task": "mbbp", "input": "Write a function to remove uppercase substrings from a given string.", "output": "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)", "options": []}
{"task": "mbbp", "input": "Write a python function to get the first element of each sublist.", "output": "def Extract(lst): \n    return [item[0] for item in lst] ", "options": []}
{"task": "mbbp", "input": "Write a python function to count the upper case characters in a given string.", "output": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr", "options": []}
{"task": "mbbp", "input": "Write a function to find all possible combinations of the elements of a given list.", "output": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result", "options": []}
{"task": "mbbp", "input": "Write a function to find the maximum product subarray of the given array.", "output": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far", "options": []}
{"task": "mbbp", "input": "Write a function to check if all values are same in a dictionary.", "output": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result", "options": []}
{"task": "mbbp", "input": "Write a function to drop empty items from a given dictionary.", "output": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1", "options": []}
{"task": "mbbp", "input": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "output": "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)", "options": []}
{"task": "mbbp", "input": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.", "output": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "options": []}
{"task": "mbbp", "input": "Write a python function to find the product of the array multiplication modulo n.", "output": "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ", "options": []}
{"task": "mbbp", "input": "Write a python function to check whether the given list contains consecutive numbers or not.", "output": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ", "options": []}
{"task": "mbbp", "input": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "output": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)", "options": []}
{"task": "mbbp", "input": "Write a function to replace characters in a string.", "output": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2", "options": []}
{"task": "mbbp", "input": "Write a function to sort a dictionary by value.", "output": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter", "options": []}
{"task": "mbbp", "input": "Write a python function to find the sum of the largest and smallest value in a given array.", "output": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum", "options": []}
{"task": "mbbp", "input": "Write a python function to convert the given string to lower case.", "output": "def is_lower(string):\n  return (string.lower())", "options": []}
{"task": "mbbp", "input": "Write a function to remove lowercase substrings from a given string.", "output": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)", "options": []}
{"task": "mbbp", "input": "Write a python function to find the first digit of a given number.", "output": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ", "options": []}
